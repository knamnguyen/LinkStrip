/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js':
      /*!***************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js ***!
  \***************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        /* global __webpack_require__ */
        var Refresh = __webpack_require__(
          /*! react-refresh/runtime */ './node_modules/react-refresh/runtime.js'
        );

        /**
         * Extracts exports from a webpack module object.
         * @param {string} moduleId A Webpack module ID.
         * @returns {*} An exports object from the module.
         */
        function getModuleExports(moduleId) {
          if (typeof moduleId === 'undefined') {
            // `moduleId` is unavailable, which indicates that this module is not in the cache,
            // which means we won't be able to capture any exports,
            // and thus they cannot be refreshed safely.
            // These are likely runtime or dynamically generated modules.
            return {};
          }

          var maybeModule = __webpack_require__.c[moduleId];
          if (typeof maybeModule === 'undefined') {
            // `moduleId` is available but the module in cache is unavailable,
            // which indicates the module is somehow corrupted (e.g. broken Webpacak `module` globals).
            // We will warn the user (as this is likely a mistake) and assume they cannot be refreshed.
            console.warn(
              '[React Refresh] Failed to get exports for module: ' +
                moduleId +
                '.'
            );
            return {};
          }

          var exportsOrPromise = maybeModule.exports;
          if (
            typeof Promise !== 'undefined' &&
            exportsOrPromise instanceof Promise
          ) {
            return exportsOrPromise.then(function (exports) {
              return exports;
            });
          }
          return exportsOrPromise;
        }

        /**
         * Calculates the signature of a React refresh boundary.
         * If this signature changes, it's unsafe to accept the boundary.
         *
         * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L795-L816).
         * @param {*} moduleExports A Webpack module exports object.
         * @returns {string[]} A React refresh boundary signature array.
         */
        function getReactRefreshBoundarySignature(moduleExports) {
          var signature = [];
          signature.push(Refresh.getFamilyByType(moduleExports));

          if (moduleExports == null || typeof moduleExports !== 'object') {
            // Exit if we can't iterate over exports.
            return signature;
          }

          for (var key in moduleExports) {
            if (key === '__esModule') {
              continue;
            }

            signature.push(key);
            signature.push(Refresh.getFamilyByType(moduleExports[key]));
          }

          return signature;
        }

        /**
         * Creates a data object to be retained across refreshes.
         * This object should not transtively reference previous exports,
         * which can form infinite chain of objects across refreshes, which can pressure RAM.
         *
         * @param {*} moduleExports A Webpack module exports object.
         * @returns {*} A React refresh boundary signature array.
         */
        function getWebpackHotData(moduleExports) {
          return {
            signature: getReactRefreshBoundarySignature(moduleExports),
            isReactRefreshBoundary: isReactRefreshBoundary(moduleExports),
          };
        }

        /**
         * Creates a helper that performs a delayed React refresh.
         * @returns {function(function(): void): void} A debounced React refresh function.
         */
        function createDebounceUpdate() {
          /**
           * A cached setTimeout handler.
           * @type {number | undefined}
           */
          var refreshTimeout;

          /**
           * Performs react refresh on a delay and clears the error overlay.
           * @param {function(): void} callback
           * @returns {void}
           */
          function enqueueUpdate(callback) {
            if (typeof refreshTimeout === 'undefined') {
              refreshTimeout = setTimeout(function () {
                refreshTimeout = undefined;
                Refresh.performReactRefresh();
                callback();
              }, 30);
            }
          }

          return enqueueUpdate;
        }

        /**
         * Checks if all exports are likely a React component.
         *
         * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L748-L774).
         * @param {*} moduleExports A Webpack module exports object.
         * @returns {boolean} Whether the exports are React component like.
         */
        function isReactRefreshBoundary(moduleExports) {
          if (Refresh.isLikelyComponentType(moduleExports)) {
            return true;
          }
          if (
            moduleExports === undefined ||
            moduleExports === null ||
            typeof moduleExports !== 'object'
          ) {
            // Exit if we can't iterate over exports.
            return false;
          }

          var hasExports = false;
          var areAllExportsComponents = true;
          for (var key in moduleExports) {
            hasExports = true;

            // This is the ES Module indicator flag
            if (key === '__esModule') {
              continue;
            }

            // We can (and have to) safely execute getters here,
            // as Webpack manually assigns harmony exports to getters,
            // without any side-effects attached.
            // Ref: https://github.com/webpack/webpack/blob/b93048643fe74de2a6931755911da1212df55897/lib/MainTemplate.js#L281
            var exportValue = moduleExports[key];
            if (!Refresh.isLikelyComponentType(exportValue)) {
              areAllExportsComponents = false;
            }
          }

          return hasExports && areAllExportsComponents;
        }

        /**
         * Checks if exports are likely a React component and registers them.
         *
         * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L818-L835).
         * @param {*} moduleExports A Webpack module exports object.
         * @param {string} moduleId A Webpack module ID.
         * @returns {void}
         */
        function registerExportsForReactRefresh(moduleExports, moduleId) {
          if (Refresh.isLikelyComponentType(moduleExports)) {
            // Register module.exports if it is likely a component
            Refresh.register(moduleExports, moduleId + ' %exports%');
          }

          if (
            moduleExports === undefined ||
            moduleExports === null ||
            typeof moduleExports !== 'object'
          ) {
            // Exit if we can't iterate over the exports.
            return;
          }

          for (var key in moduleExports) {
            // Skip registering the ES Module indicator
            if (key === '__esModule') {
              continue;
            }

            var exportValue = moduleExports[key];
            if (Refresh.isLikelyComponentType(exportValue)) {
              var typeID = moduleId + ' %exports% ' + key;
              Refresh.register(exportValue, typeID);
            }
          }
        }

        /**
         * Compares previous and next module objects to check for mutated boundaries.
         *
         * This implementation is based on the one in [Metro](https://github.com/facebook/metro/blob/907d6af22ac6ebe58572be418e9253a90665ecbd/packages/metro/src/lib/polyfills/require.js#L776-L792).
         * @param {*} prevSignature The signature of the current Webpack module exports object.
         * @param {*} nextSignature The signature of the next Webpack module exports object.
         * @returns {boolean} Whether the React refresh boundary should be invalidated.
         */
        function shouldInvalidateReactRefreshBoundary(
          prevSignature,
          nextSignature
        ) {
          if (prevSignature.length !== nextSignature.length) {
            return true;
          }

          for (var i = 0; i < nextSignature.length; i += 1) {
            if (prevSignature[i] !== nextSignature[i]) {
              return true;
            }
          }

          return false;
        }

        var enqueueUpdate = createDebounceUpdate();
        function executeRuntime(
          moduleExports,
          moduleId,
          webpackHot,
          refreshOverlay,
          isTest
        ) {
          registerExportsForReactRefresh(moduleExports, moduleId);

          if (webpackHot) {
            var isHotUpdate = !!webpackHot.data;
            var prevData;
            if (isHotUpdate) {
              prevData = webpackHot.data.prevData;
            }

            if (isReactRefreshBoundary(moduleExports)) {
              webpackHot.dispose(
                /**
                 * A callback to performs a full refresh if React has unrecoverable errors,
                 * and also caches the to-be-disposed module.
                 * @param {*} data A hot module data object from Webpack HMR.
                 * @returns {void}
                 */
                function hotDisposeCallback(data) {
                  // We have to mutate the data object to get data registered and cached
                  data.prevData = getWebpackHotData(moduleExports);
                }
              );
              webpackHot.accept(
                /**
                 * An error handler to allow self-recovering behaviours.
                 * @param {Error} error An error occurred during evaluation of a module.
                 * @returns {void}
                 */
                function hotErrorHandler(error) {
                  if (typeof refreshOverlay !== 'undefined' && refreshOverlay) {
                    refreshOverlay.handleRuntimeError(error);
                  }

                  if (typeof isTest !== 'undefined' && isTest) {
                    if (window.onHotAcceptError) {
                      window.onHotAcceptError(error.message);
                    }
                  }

                  __webpack_require__.c[moduleId].hot.accept(hotErrorHandler);
                }
              );

              if (isHotUpdate) {
                if (
                  prevData &&
                  prevData.isReactRefreshBoundary &&
                  shouldInvalidateReactRefreshBoundary(
                    prevData.signature,
                    getReactRefreshBoundarySignature(moduleExports)
                  )
                ) {
                  webpackHot.invalidate();
                } else {
                  enqueueUpdate(
                    /**
                     * A function to dismiss the error overlay after performing React refresh.
                     * @returns {void}
                     */
                    function updateCallback() {
                      if (
                        typeof refreshOverlay !== 'undefined' &&
                        refreshOverlay
                      ) {
                        refreshOverlay.clearRuntimeErrors();
                      }
                    }
                  );
                }
              }
            } else {
              if (isHotUpdate && typeof prevData !== 'undefined') {
                webpackHot.invalidate();
              }
            }
          }
        }

        module.exports = Object.freeze({
          enqueueUpdate: enqueueUpdate,
          executeRuntime: executeRuntime,
          getModuleExports: getModuleExports,
          isReactRefreshBoundary: isReactRefreshBoundary,
          registerExportsForReactRefresh: registerExportsForReactRefresh,
        });

        /***/
      },

    /***/ './node_modules/ansi-html-community/index.js':
      /*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = ansiHTML;

        // Reference to https://github.com/sindresorhus/ansi-regex
        var _regANSI =
          /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/;

        var _defColors = {
          reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
          black: '000',
          red: 'ff0000',
          green: '209805',
          yellow: 'e8bf03',
          blue: '0000ff',
          magenta: 'ff00ff',
          cyan: '00ffee',
          lightgrey: 'f0f0f0',
          darkgrey: '888',
        };
        var _styles = {
          30: 'black',
          31: 'red',
          32: 'green',
          33: 'yellow',
          34: 'blue',
          35: 'magenta',
          36: 'cyan',
          37: 'lightgrey',
        };
        var _openTags = {
          1: 'font-weight:bold', // bold
          2: 'opacity:0.5', // dim
          3: '<i>', // italic
          4: '<u>', // underscore
          8: 'display:none', // hidden
          9: '<del>', // delete
        };
        var _closeTags = {
          23: '</i>', // reset italic
          24: '</u>', // reset underscore
          29: '</del>', // reset delete
        };

        [0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
          _closeTags[n] = '</span>';
        });

        /**
         * Converts text with ANSI color codes to HTML markup.
         * @param {String} text
         * @returns {*}
         */
        function ansiHTML(text) {
          // Returns the text if the string has no ANSI escape code.
          if (!_regANSI.test(text)) {
            return text;
          }

          // Cache opened sequence.
          var ansiCodes = [];
          // Replace with markup.
          var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
            var ot = _openTags[seq];
            if (ot) {
              // If current sequence has been opened, close it.
              if (!!~ansiCodes.indexOf(seq)) {
                // eslint-disable-line no-extra-boolean-cast
                ansiCodes.pop();
                return '</span>';
              }
              // Open tag.
              ansiCodes.push(seq);
              return ot[0] === '<' ? ot : '<span style="' + ot + ';">';
            }

            var ct = _closeTags[seq];
            if (ct) {
              // Pop sequence
              ansiCodes.pop();
              return ct;
            }
            return '';
          });

          // Make sure tags are closed.
          var l = ansiCodes.length;
          l > 0 && (ret += Array(l + 1).join('</span>'));

          return ret;
        }

        /**
         * Customize colors.
         * @param {Object} colors reference to _defColors
         */
        ansiHTML.setColors = function (colors) {
          if (typeof colors !== 'object') {
            throw new Error('`colors` parameter must be an Object.');
          }

          var _finalColors = {};
          for (var key in _defColors) {
            var hex = colors.hasOwnProperty(key) ? colors[key] : null;
            if (!hex) {
              _finalColors[key] = _defColors[key];
              continue;
            }
            if ('reset' === key) {
              if (typeof hex === 'string') {
                hex = [hex];
              }
              if (
                !Array.isArray(hex) ||
                hex.length === 0 ||
                hex.some(function (h) {
                  return typeof h !== 'string';
                })
              ) {
                throw new Error(
                  'The value of `' +
                    key +
                    '` property must be an Array and each item could only be a hex string, e.g.: FF0000'
                );
              }
              var defHexColor = _defColors[key];
              if (!hex[0]) {
                hex[0] = defHexColor[0];
              }
              if (hex.length === 1 || !hex[1]) {
                hex = [hex[0]];
                hex.push(defHexColor[1]);
              }

              hex = hex.slice(0, 2);
            } else if (typeof hex !== 'string') {
              throw new Error(
                'The value of `' +
                  key +
                  '` property must be a hex string, e.g.: FF0000'
              );
            }
            _finalColors[key] = hex;
          }
          _setTags(_finalColors);
        };

        /**
         * Reset colors.
         */
        ansiHTML.reset = function () {
          _setTags(_defColors);
        };

        /**
         * Expose tags, including open and close.
         * @type {Object}
         */
        ansiHTML.tags = {};

        if (Object.defineProperty) {
          Object.defineProperty(ansiHTML.tags, 'open', {
            get: function () {
              return _openTags;
            },
          });
          Object.defineProperty(ansiHTML.tags, 'close', {
            get: function () {
              return _closeTags;
            },
          });
        } else {
          ansiHTML.tags.open = _openTags;
          ansiHTML.tags.close = _closeTags;
        }

        function _setTags(colors) {
          // reset all
          _openTags['0'] =
            'font-weight:normal;opacity:1;color:#' +
            colors.reset[0] +
            ';background:#' +
            colors.reset[1];
          // inverse
          _openTags['7'] =
            'color:#' + colors.reset[1] + ';background:#' + colors.reset[0];
          // dark grey
          _openTags['90'] = 'color:#' + colors.darkgrey;

          for (var code in _styles) {
            var color = _styles[code];
            var oriColor = colors[color] || '000';
            _openTags[code] = 'color:#' + oriColor;
            code = parseInt(code);
            _openTags[(code + 10).toString()] = 'background:#' + oriColor;
          }
        }

        ansiHTML.reset();

        /***/
      },

    /***/ './node_modules/core-js-pure/actual/global-this.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js-pure/actual/global-this.js ***!
  \*********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var parent = __webpack_require__(
          /*! ../stable/global-this */ './node_modules/core-js-pure/stable/global-this.js'
        );

        module.exports = parent;

        /***/
      },

    /***/ './node_modules/core-js-pure/es/global-this.js':
      /*!*****************************************************!*\
  !*** ./node_modules/core-js-pure/es/global-this.js ***!
  \*****************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        __webpack_require__(
          /*! ../modules/es.global-this */ './node_modules/core-js-pure/modules/es.global-this.js'
        );

        module.exports = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/features/global-this.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/features/global-this.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        module.exports = __webpack_require__(
          /*! ../full/global-this */ './node_modules/core-js-pure/full/global-this.js'
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/full/global-this.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js-pure/full/global-this.js ***!
  \*******************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        // TODO: remove from `core-js@4`
        __webpack_require__(
          /*! ../modules/esnext.global-this */ './node_modules/core-js-pure/modules/esnext.global-this.js'
        );

        var parent = __webpack_require__(
          /*! ../actual/global-this */ './node_modules/core-js-pure/actual/global-this.js'
        );

        module.exports = parent;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/a-callable.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/a-callable.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var tryToString = __webpack_require__(
          /*! ../internals/try-to-string */ './node_modules/core-js-pure/internals/try-to-string.js'
        );

        var $TypeError = TypeError;

        // `Assert: IsCallable(argument) is true`
        module.exports = function (argument) {
          if (isCallable(argument)) return argument;
          throw $TypeError(tryToString(argument) + ' is not a function');
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/a-possible-prototype.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/a-possible-prototype.js ***!
  \*********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );

        var $String = String;
        var $TypeError = TypeError;

        module.exports = function (argument) {
          if (typeof argument == 'object' || isCallable(argument))
            return argument;
          throw $TypeError(
            "Can't set " + $String(argument) + ' as a prototype'
          );
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/add-to-unscopables.js':
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/add-to-unscopables.js ***!
  \*******************************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = function () {
          /* empty */
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/an-instance.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/an-instance.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isPrototypeOf = __webpack_require__(
          /*! ../internals/object-is-prototype-of */ './node_modules/core-js-pure/internals/object-is-prototype-of.js'
        );

        var $TypeError = TypeError;

        module.exports = function (it, Prototype) {
          if (isPrototypeOf(Prototype, it)) return it;
          throw $TypeError('Incorrect invocation');
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/an-object.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/an-object.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );

        var $String = String;
        var $TypeError = TypeError;

        // `Assert: Type(argument) is Object`
        module.exports = function (argument) {
          if (isObject(argument)) return argument;
          throw $TypeError($String(argument) + ' is not an object');
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/array-from.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/array-from.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ './node_modules/core-js-pure/internals/function-bind-context.js'
        );
        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ './node_modules/core-js-pure/internals/to-object.js'
        );
        var callWithSafeIterationClosing = __webpack_require__(
          /*! ../internals/call-with-safe-iteration-closing */ './node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js'
        );
        var isArrayIteratorMethod = __webpack_require__(
          /*! ../internals/is-array-iterator-method */ './node_modules/core-js-pure/internals/is-array-iterator-method.js'
        );
        var isConstructor = __webpack_require__(
          /*! ../internals/is-constructor */ './node_modules/core-js-pure/internals/is-constructor.js'
        );
        var lengthOfArrayLike = __webpack_require__(
          /*! ../internals/length-of-array-like */ './node_modules/core-js-pure/internals/length-of-array-like.js'
        );
        var createProperty = __webpack_require__(
          /*! ../internals/create-property */ './node_modules/core-js-pure/internals/create-property.js'
        );
        var getIterator = __webpack_require__(
          /*! ../internals/get-iterator */ './node_modules/core-js-pure/internals/get-iterator.js'
        );
        var getIteratorMethod = __webpack_require__(
          /*! ../internals/get-iterator-method */ './node_modules/core-js-pure/internals/get-iterator-method.js'
        );

        var $Array = Array;

        // `Array.from` method implementation
        // https://tc39.es/ecma262/#sec-array.from
        module.exports = function from(
          arrayLike /* , mapfn = undefined, thisArg = undefined */
        ) {
          var O = toObject(arrayLike);
          var IS_CONSTRUCTOR = isConstructor(this);
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          if (mapping)
            mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
          var iteratorMethod = getIteratorMethod(O);
          var index = 0;
          var length, result, step, iterator, next, value;
          // if the target is not iterable or it's an array with the default iterator - use a simple case
          if (
            iteratorMethod &&
            !(this === $Array && isArrayIteratorMethod(iteratorMethod))
          ) {
            iterator = getIterator(O, iteratorMethod);
            next = iterator.next;
            result = IS_CONSTRUCTOR ? new this() : [];
            for (; !(step = call(next, iterator)).done; index++) {
              value = mapping
                ? callWithSafeIterationClosing(
                    iterator,
                    mapfn,
                    [step.value, index],
                    true
                  )
                : step.value;
              createProperty(result, index, value);
            }
          } else {
            length = lengthOfArrayLike(O);
            result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
            for (; length > index; index++) {
              value = mapping ? mapfn(O[index], index) : O[index];
              createProperty(result, index, value);
            }
          }
          result.length = index;
          return result;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/array-includes.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/array-includes.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ './node_modules/core-js-pure/internals/to-indexed-object.js'
        );
        var toAbsoluteIndex = __webpack_require__(
          /*! ../internals/to-absolute-index */ './node_modules/core-js-pure/internals/to-absolute-index.js'
        );
        var lengthOfArrayLike = __webpack_require__(
          /*! ../internals/length-of-array-like */ './node_modules/core-js-pure/internals/length-of-array-like.js'
        );

        // `Array.prototype.{ indexOf, includes }` methods implementation
        var createMethod = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = lengthOfArrayLike(O);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el !== el)
              while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare -- NaN check
                if (value !== value) return true;
                // Array#indexOf ignores holes, Array#includes - not
              }
            else
              for (; length > index; index++) {
                if ((IS_INCLUDES || index in O) && O[index] === el)
                  return IS_INCLUDES || index || 0;
              }
            return !IS_INCLUDES && -1;
          };
        };

        module.exports = {
          // `Array.prototype.includes` method
          // https://tc39.es/ecma262/#sec-array.prototype.includes
          includes: createMethod(true),
          // `Array.prototype.indexOf` method
          // https://tc39.es/ecma262/#sec-array.prototype.indexof
          indexOf: createMethod(false),
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/array-slice-simple.js':
      /*!*******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/array-slice-simple.js ***!
  \*******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toAbsoluteIndex = __webpack_require__(
          /*! ../internals/to-absolute-index */ './node_modules/core-js-pure/internals/to-absolute-index.js'
        );
        var lengthOfArrayLike = __webpack_require__(
          /*! ../internals/length-of-array-like */ './node_modules/core-js-pure/internals/length-of-array-like.js'
        );
        var createProperty = __webpack_require__(
          /*! ../internals/create-property */ './node_modules/core-js-pure/internals/create-property.js'
        );

        var $Array = Array;
        var max = Math.max;

        module.exports = function (O, start, end) {
          var length = lengthOfArrayLike(O);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length);
          var result = $Array(max(fin - k, 0));
          var n = 0;
          for (; k < fin; k++, n++) createProperty(result, n, O[k]);
          result.length = n;
          return result;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/array-sort.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/array-sort.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var arraySlice = __webpack_require__(
          /*! ../internals/array-slice-simple */ './node_modules/core-js-pure/internals/array-slice-simple.js'
        );

        var floor = Math.floor;

        var mergeSort = function (array, comparefn) {
          var length = array.length;
          var middle = floor(length / 2);
          return length < 8
            ? insertionSort(array, comparefn)
            : merge(
                array,
                mergeSort(arraySlice(array, 0, middle), comparefn),
                mergeSort(arraySlice(array, middle), comparefn),
                comparefn
              );
        };

        var insertionSort = function (array, comparefn) {
          var length = array.length;
          var i = 1;
          var element, j;

          while (i < length) {
            j = i;
            element = array[i];
            while (j && comparefn(array[j - 1], element) > 0) {
              array[j] = array[--j];
            }
            if (j !== i++) array[j] = element;
          }
          return array;
        };

        var merge = function (array, left, right, comparefn) {
          var llength = left.length;
          var rlength = right.length;
          var lindex = 0;
          var rindex = 0;

          while (lindex < llength || rindex < rlength) {
            array[lindex + rindex] =
              lindex < llength && rindex < rlength
                ? comparefn(left[lindex], right[rindex]) <= 0
                  ? left[lindex++]
                  : right[rindex++]
                : lindex < llength
                ? left[lindex++]
                : right[rindex++];
          }
          return array;
        };

        module.exports = mergeSort;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js':
      /*!*********************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js ***!
  \*********************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var iteratorClose = __webpack_require__(
          /*! ../internals/iterator-close */ './node_modules/core-js-pure/internals/iterator-close.js'
        );

        // call something on iterator step with safe closing on error
        module.exports = function (iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
          } catch (error) {
            iteratorClose(iterator, 'throw', error);
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/classof-raw.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/classof-raw.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );

        var toString = uncurryThis({}.toString);
        var stringSlice = uncurryThis(''.slice);

        module.exports = function (it) {
          return stringSlice(toString(it), 8, -1);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/classof.js':
      /*!********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/classof.js ***!
  \********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ './node_modules/core-js-pure/internals/to-string-tag-support.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var classofRaw = __webpack_require__(
          /*! ../internals/classof-raw */ './node_modules/core-js-pure/internals/classof-raw.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');
        var $Object = Object;

        // ES3 wrong here
        var CORRECT_ARGUMENTS =
          classofRaw(
            (function () {
              return arguments;
            })()
          ) === 'Arguments';

        // fallback for IE11 Script Access Denied error
        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (error) {
            /* empty */
          }
        };

        // getting tag from ES6+ `Object.prototype.toString`
        module.exports = TO_STRING_TAG_SUPPORT
          ? classofRaw
          : function (it) {
              var O, tag, result;
              return it === undefined
                ? 'Undefined'
                : it === null
                ? 'Null'
                : // @@toStringTag case
                typeof (tag = tryGet((O = $Object(it)), TO_STRING_TAG)) ==
                  'string'
                ? tag
                : // builtinTag case
                CORRECT_ARGUMENTS
                ? classofRaw(O)
                : // ES3 arguments fallback
                (result = classofRaw(O)) === 'Object' && isCallable(O.callee)
                ? 'Arguments'
                : result;
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/correct-prototype-getter.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/correct-prototype-getter.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );

        module.exports = !fails(function () {
          function F() {
            /* empty */
          }
          F.prototype.constructor = null;
          // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/create-iter-result-object.js':
      /*!**************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/create-iter-result-object.js ***!
  \**************************************************************************/
      /***/ (module) => {
        'use strict';

        // `CreateIterResultObject` abstract operation
        // https://tc39.es/ecma262/#sec-createiterresultobject
        module.exports = function (value, done) {
          return { value: value, done: done };
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/create-non-enumerable-property.js':
      /*!*******************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/create-non-enumerable-property.js ***!
  \*******************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ './node_modules/core-js-pure/internals/create-property-descriptor.js'
        );

        module.exports = DESCRIPTORS
          ? function (object, key, value) {
              return definePropertyModule.f(
                object,
                key,
                createPropertyDescriptor(1, value)
              );
            }
          : function (object, key, value) {
              object[key] = value;
              return object;
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/create-property-descriptor.js':
      /*!***************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/create-property-descriptor.js ***!
  \***************************************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value,
          };
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/create-property.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/create-property.js ***!
  \****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toPropertyKey = __webpack_require__(
          /*! ../internals/to-property-key */ './node_modules/core-js-pure/internals/to-property-key.js'
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ './node_modules/core-js-pure/internals/create-property-descriptor.js'
        );

        module.exports = function (object, key, value) {
          var propertyKey = toPropertyKey(key);
          if (propertyKey in object)
            definePropertyModule.f(
              object,
              propertyKey,
              createPropertyDescriptor(0, value)
            );
          else object[propertyKey] = value;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/define-built-in-accessor.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/define-built-in-accessor.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        );

        module.exports = function (target, name, descriptor) {
          return defineProperty.f(target, name, descriptor);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/define-built-in.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/define-built-in.js ***!
  \****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ './node_modules/core-js-pure/internals/create-non-enumerable-property.js'
        );

        module.exports = function (target, key, value, options) {
          if (options && options.enumerable) target[key] = value;
          else createNonEnumerableProperty(target, key, value);
          return target;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/define-built-ins.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/define-built-ins.js ***!
  \*****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var defineBuiltIn = __webpack_require__(
          /*! ../internals/define-built-in */ './node_modules/core-js-pure/internals/define-built-in.js'
        );

        module.exports = function (target, src, options) {
          for (var key in src) {
            if (options && options.unsafe && target[key])
              target[key] = src[key];
            else defineBuiltIn(target, key, src[key], options);
          }
          return target;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/define-global-property.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/define-global-property.js ***!
  \***********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );

        // eslint-disable-next-line es/no-object-defineproperty -- safe
        var defineProperty = Object.defineProperty;

        module.exports = function (key, value) {
          try {
            defineProperty(global, key, {
              value: value,
              configurable: true,
              writable: true,
            });
          } catch (error) {
            global[key] = value;
          }
          return value;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/descriptors.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/descriptors.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );

        // Detect IE8's incomplete defineProperty implementation
        module.exports = !fails(function () {
          // eslint-disable-next-line es/no-object-defineproperty -- required for testing
          return (
            Object.defineProperty({}, 1, {
              get: function () {
                return 7;
              },
            })[1] !== 7
          );
        });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/document-all.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/document-all.js ***!
  \*************************************************************/
      /***/ (module) => {
        'use strict';

        var documentAll = typeof document == 'object' && document.all;

        // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
        // eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
        var IS_HTMLDDA =
          typeof documentAll == 'undefined' && documentAll !== undefined;

        module.exports = {
          all: documentAll,
          IS_HTMLDDA: IS_HTMLDDA,
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/document-create-element.js':
      /*!************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/document-create-element.js ***!
  \************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );

        var document = global.document;
        // typeof document.createElement is 'object' in old IE
        var EXISTS = isObject(document) && isObject(document.createElement);

        module.exports = function (it) {
          return EXISTS ? document.createElement(it) : {};
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/engine-user-agent.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/engine-user-agent.js ***!
  \******************************************************************/
      /***/ (module) => {
        'use strict';

        module.exports =
          (typeof navigator != 'undefined' && String(navigator.userAgent)) ||
          '';

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/engine-v8-version.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/engine-v8-version.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var userAgent = __webpack_require__(
          /*! ../internals/engine-user-agent */ './node_modules/core-js-pure/internals/engine-user-agent.js'
        );

        var process = global.process;
        var Deno = global.Deno;
        var versions = (process && process.versions) || (Deno && Deno.version);
        var v8 = versions && versions.v8;
        var match, version;

        if (v8) {
          match = v8.split('.');
          // in old Chrome, versions of V8 isn't V8 = Chrome / 10
          // but their correct versions are not interesting for us
          version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
        }

        // BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
        // so check `userAgent` even if `.v8` exists, but 0
        if (!version && userAgent) {
          match = userAgent.match(/Edge\/(\d+)/);
          if (!match || match[1] >= 74) {
            match = userAgent.match(/Chrome\/(\d+)/);
            if (match) version = +match[1];
          }
        }

        module.exports = version;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/enum-bug-keys.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/enum-bug-keys.js ***!
  \**************************************************************/
      /***/ (module) => {
        'use strict';

        // IE8- don't enum bug keys
        module.exports = [
          'constructor',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'toLocaleString',
          'toString',
          'valueOf',
        ];

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/export.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js-pure/internals/export.js ***!
  \*******************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var apply = __webpack_require__(
          /*! ../internals/function-apply */ './node_modules/core-js-pure/internals/function-apply.js'
        );
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this-clause */ './node_modules/core-js-pure/internals/function-uncurry-this-clause.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var getOwnPropertyDescriptor = __webpack_require__(
          /*! ../internals/object-get-own-property-descriptor */ './node_modules/core-js-pure/internals/object-get-own-property-descriptor.js'
        ).f;
        var isForced = __webpack_require__(
          /*! ../internals/is-forced */ './node_modules/core-js-pure/internals/is-forced.js'
        );
        var path = __webpack_require__(
          /*! ../internals/path */ './node_modules/core-js-pure/internals/path.js'
        );
        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ './node_modules/core-js-pure/internals/function-bind-context.js'
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ './node_modules/core-js-pure/internals/create-non-enumerable-property.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );

        var wrapConstructor = function (NativeConstructor) {
          var Wrapper = function (a, b, c) {
            if (this instanceof Wrapper) {
              switch (arguments.length) {
                case 0:
                  return new NativeConstructor();
                case 1:
                  return new NativeConstructor(a);
                case 2:
                  return new NativeConstructor(a, b);
              }
              return new NativeConstructor(a, b, c);
            }
            return apply(NativeConstructor, this, arguments);
          };
          Wrapper.prototype = NativeConstructor.prototype;
          return Wrapper;
        };

        /*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
        module.exports = function (options, source) {
          var TARGET = options.target;
          var GLOBAL = options.global;
          var STATIC = options.stat;
          var PROTO = options.proto;

          var nativeSource = GLOBAL
            ? global
            : STATIC
            ? global[TARGET]
            : (global[TARGET] || {}).prototype;

          var target = GLOBAL
            ? path
            : path[TARGET] ||
              createNonEnumerableProperty(path, TARGET, {})[TARGET];
          var targetPrototype = target.prototype;

          var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
          var key,
            sourceProperty,
            targetProperty,
            nativeProperty,
            resultProperty,
            descriptor;

          for (key in source) {
            FORCED = isForced(
              GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key,
              options.forced
            );
            // contains in native
            USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);

            targetProperty = target[key];

            if (USE_NATIVE)
              if (options.dontCallGetSet) {
                descriptor = getOwnPropertyDescriptor(nativeSource, key);
                nativeProperty = descriptor && descriptor.value;
              } else nativeProperty = nativeSource[key];

            // export native or implementation
            sourceProperty =
              USE_NATIVE && nativeProperty ? nativeProperty : source[key];

            if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
              continue;

            // bind methods to global for calling from export context
            if (options.bind && USE_NATIVE)
              resultProperty = bind(sourceProperty, global);
            // wrap global constructors for prevent changes in this version
            else if (options.wrap && USE_NATIVE)
              resultProperty = wrapConstructor(sourceProperty);
            // make static versions for prototype methods
            else if (PROTO && isCallable(sourceProperty))
              resultProperty = uncurryThis(sourceProperty);
            // default case
            else resultProperty = sourceProperty;

            // add a flag to not completely full polyfills
            if (
              options.sham ||
              (sourceProperty && sourceProperty.sham) ||
              (targetProperty && targetProperty.sham)
            ) {
              createNonEnumerableProperty(resultProperty, 'sham', true);
            }

            createNonEnumerableProperty(target, key, resultProperty);

            if (PROTO) {
              VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
              if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
                createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
              }
              // export virtual prototype methods
              createNonEnumerableProperty(
                path[VIRTUAL_PROTOTYPE],
                key,
                sourceProperty
              );
              // export real prototype methods
              if (
                options.real &&
                targetPrototype &&
                (FORCED || !targetPrototype[key])
              ) {
                createNonEnumerableProperty(
                  targetPrototype,
                  key,
                  sourceProperty
                );
              }
            }
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/fails.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js-pure/internals/fails.js ***!
  \******************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (error) {
            return true;
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-apply.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-apply.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var NATIVE_BIND = __webpack_require__(
          /*! ../internals/function-bind-native */ './node_modules/core-js-pure/internals/function-bind-native.js'
        );

        var FunctionPrototype = Function.prototype;
        var apply = FunctionPrototype.apply;
        var call = FunctionPrototype.call;

        // eslint-disable-next-line es/no-reflect -- safe
        module.exports =
          (typeof Reflect == 'object' && Reflect.apply) ||
          (NATIVE_BIND
            ? call.bind(apply)
            : function () {
                return call.apply(apply, arguments);
              });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-bind-context.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-bind-context.js ***!
  \**********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this-clause */ './node_modules/core-js-pure/internals/function-uncurry-this-clause.js'
        );
        var aCallable = __webpack_require__(
          /*! ../internals/a-callable */ './node_modules/core-js-pure/internals/a-callable.js'
        );
        var NATIVE_BIND = __webpack_require__(
          /*! ../internals/function-bind-native */ './node_modules/core-js-pure/internals/function-bind-native.js'
        );

        var bind = uncurryThis(uncurryThis.bind);

        // optional / simple context binding
        module.exports = function (fn, that) {
          aCallable(fn);
          return that === undefined
            ? fn
            : NATIVE_BIND
            ? bind(fn, that)
            : function (/* ...args */) {
                return fn.apply(that, arguments);
              };
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-bind-native.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-bind-native.js ***!
  \*********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );

        module.exports = !fails(function () {
          // eslint-disable-next-line es/no-function-prototype-bind -- safe
          var test = function () {
            /* empty */
          }.bind();
          // eslint-disable-next-line no-prototype-builtins -- safe
          return typeof test != 'function' || test.hasOwnProperty('prototype');
        });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-call.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-call.js ***!
  \**************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var NATIVE_BIND = __webpack_require__(
          /*! ../internals/function-bind-native */ './node_modules/core-js-pure/internals/function-bind-native.js'
        );

        var call = Function.prototype.call;

        module.exports = NATIVE_BIND
          ? call.bind(call)
          : function () {
              return call.apply(call, arguments);
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-name.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-name.js ***!
  \**************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );

        var FunctionPrototype = Function.prototype;
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

        var EXISTS = hasOwn(FunctionPrototype, 'name');
        // additional protection from minified / mangled / dropped function names
        var PROPER =
          EXISTS &&
          function something() {
            /* empty */
          }.name === 'something';
        var CONFIGURABLE =
          EXISTS &&
          (!DESCRIPTORS ||
            (DESCRIPTORS &&
              getDescriptor(FunctionPrototype, 'name').configurable));

        module.exports = {
          EXISTS: EXISTS,
          PROPER: PROPER,
          CONFIGURABLE: CONFIGURABLE,
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-uncurry-this-accessor.js':
      /*!*******************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-uncurry-this-accessor.js ***!
  \*******************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var aCallable = __webpack_require__(
          /*! ../internals/a-callable */ './node_modules/core-js-pure/internals/a-callable.js'
        );

        module.exports = function (object, key, method) {
          try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            return uncurryThis(
              aCallable(Object.getOwnPropertyDescriptor(object, key)[method])
            );
          } catch (error) {
            /* empty */
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-uncurry-this-clause.js':
      /*!*****************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-uncurry-this-clause.js ***!
  \*****************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var classofRaw = __webpack_require__(
          /*! ../internals/classof-raw */ './node_modules/core-js-pure/internals/classof-raw.js'
        );
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );

        module.exports = function (fn) {
          // Nashorn bug:
          //   https://github.com/zloirock/core-js/issues/1128
          //   https://github.com/zloirock/core-js/issues/1130
          if (classofRaw(fn) === 'Function') return uncurryThis(fn);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/function-uncurry-this.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/function-uncurry-this.js ***!
  \**********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var NATIVE_BIND = __webpack_require__(
          /*! ../internals/function-bind-native */ './node_modules/core-js-pure/internals/function-bind-native.js'
        );

        var FunctionPrototype = Function.prototype;
        var call = FunctionPrototype.call;
        var uncurryThisWithBind =
          NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

        module.exports = NATIVE_BIND
          ? uncurryThisWithBind
          : function (fn) {
              return function () {
                return call.apply(fn, arguments);
              };
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/get-built-in.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/get-built-in.js ***!
  \*************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var path = __webpack_require__(
          /*! ../internals/path */ './node_modules/core-js-pure/internals/path.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );

        var aFunction = function (variable) {
          return isCallable(variable) ? variable : undefined;
        };

        module.exports = function (namespace, method) {
          return arguments.length < 2
            ? aFunction(path[namespace]) || aFunction(global[namespace])
            : (path[namespace] && path[namespace][method]) ||
                (global[namespace] && global[namespace][method]);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/get-iterator-method.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/get-iterator-method.js ***!
  \********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var classof = __webpack_require__(
          /*! ../internals/classof */ './node_modules/core-js-pure/internals/classof.js'
        );
        var getMethod = __webpack_require__(
          /*! ../internals/get-method */ './node_modules/core-js-pure/internals/get-method.js'
        );
        var isNullOrUndefined = __webpack_require__(
          /*! ../internals/is-null-or-undefined */ './node_modules/core-js-pure/internals/is-null-or-undefined.js'
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ './node_modules/core-js-pure/internals/iterators.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );

        var ITERATOR = wellKnownSymbol('iterator');

        module.exports = function (it) {
          if (!isNullOrUndefined(it))
            return (
              getMethod(it, ITERATOR) ||
              getMethod(it, '@@iterator') ||
              Iterators[classof(it)]
            );
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/get-iterator.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/get-iterator.js ***!
  \*************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var aCallable = __webpack_require__(
          /*! ../internals/a-callable */ './node_modules/core-js-pure/internals/a-callable.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var tryToString = __webpack_require__(
          /*! ../internals/try-to-string */ './node_modules/core-js-pure/internals/try-to-string.js'
        );
        var getIteratorMethod = __webpack_require__(
          /*! ../internals/get-iterator-method */ './node_modules/core-js-pure/internals/get-iterator-method.js'
        );

        var $TypeError = TypeError;

        module.exports = function (argument, usingIterator) {
          var iteratorMethod =
            arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
          if (aCallable(iteratorMethod))
            return anObject(call(iteratorMethod, argument));
          throw $TypeError(tryToString(argument) + ' is not iterable');
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/get-method.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/get-method.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var aCallable = __webpack_require__(
          /*! ../internals/a-callable */ './node_modules/core-js-pure/internals/a-callable.js'
        );
        var isNullOrUndefined = __webpack_require__(
          /*! ../internals/is-null-or-undefined */ './node_modules/core-js-pure/internals/is-null-or-undefined.js'
        );

        // `GetMethod` abstract operation
        // https://tc39.es/ecma262/#sec-getmethod
        module.exports = function (V, P) {
          var func = V[P];
          return isNullOrUndefined(func) ? undefined : aCallable(func);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/global.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js-pure/internals/global.js ***!
  \*******************************************************/
      /***/ function (module, __unused_webpack_exports, __webpack_require__) {
        'use strict';

        var check = function (it) {
          return it && it.Math === Math && it;
        };

        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        module.exports =
          // eslint-disable-next-line es/no-global-this -- safe
          check(typeof globalThis == 'object' && globalThis) ||
          check(typeof window == 'object' && window) ||
          // eslint-disable-next-line no-restricted-globals -- safe
          check(typeof self == 'object' && self) ||
          check(
            typeof __webpack_require__.g == 'object' && __webpack_require__.g
          ) ||
          // eslint-disable-next-line no-new-func -- fallback
          (function () {
            return this;
          })() ||
          this ||
          Function('return this')();

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/has-own-property.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/has-own-property.js ***!
  \*****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ './node_modules/core-js-pure/internals/to-object.js'
        );

        var hasOwnProperty = uncurryThis({}.hasOwnProperty);

        // `HasOwnProperty` abstract operation
        // https://tc39.es/ecma262/#sec-hasownproperty
        // eslint-disable-next-line es/no-object-hasown -- safe
        module.exports =
          Object.hasOwn ||
          function hasOwn(it, key) {
            return hasOwnProperty(toObject(it), key);
          };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/hidden-keys.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/hidden-keys.js ***!
  \************************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = {};

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/html.js':
      /*!*****************************************************!*\
  !*** ./node_modules/core-js-pure/internals/html.js ***!
  \*****************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ './node_modules/core-js-pure/internals/get-built-in.js'
        );

        module.exports = getBuiltIn('document', 'documentElement');

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/ie8-dom-define.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/ie8-dom-define.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var createElement = __webpack_require__(
          /*! ../internals/document-create-element */ './node_modules/core-js-pure/internals/document-create-element.js'
        );

        // Thanks to IE8 for its funny defineProperty
        module.exports =
          !DESCRIPTORS &&
          !fails(function () {
            // eslint-disable-next-line es/no-object-defineproperty -- required for testing
            return (
              Object.defineProperty(createElement('div'), 'a', {
                get: function () {
                  return 7;
                },
              }).a !== 7
            );
          });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/indexed-object.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/indexed-object.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var classof = __webpack_require__(
          /*! ../internals/classof-raw */ './node_modules/core-js-pure/internals/classof-raw.js'
        );

        var $Object = Object;
        var split = uncurryThis(''.split);

        // fallback for non-array-like ES3 and non-enumerable old V8 strings
        module.exports = fails(function () {
          // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
          // eslint-disable-next-line no-prototype-builtins -- safe
          return !$Object('z').propertyIsEnumerable(0);
        })
          ? function (it) {
              return classof(it) === 'String' ? split(it, '') : $Object(it);
            }
          : $Object;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/inspect-source.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/inspect-source.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var store = __webpack_require__(
          /*! ../internals/shared-store */ './node_modules/core-js-pure/internals/shared-store.js'
        );

        var functionToString = uncurryThis(Function.toString);

        // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
        if (!isCallable(store.inspectSource)) {
          store.inspectSource = function (it) {
            return functionToString(it);
          };
        }

        module.exports = store.inspectSource;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/internal-state.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/internal-state.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var NATIVE_WEAK_MAP = __webpack_require__(
          /*! ../internals/weak-map-basic-detection */ './node_modules/core-js-pure/internals/weak-map-basic-detection.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ './node_modules/core-js-pure/internals/create-non-enumerable-property.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var shared = __webpack_require__(
          /*! ../internals/shared-store */ './node_modules/core-js-pure/internals/shared-store.js'
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ './node_modules/core-js-pure/internals/shared-key.js'
        );
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ './node_modules/core-js-pure/internals/hidden-keys.js'
        );

        var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
        var TypeError = global.TypeError;
        var WeakMap = global.WeakMap;
        var set, get, has;

        var enforce = function (it) {
          return has(it) ? get(it) : set(it, {});
        };

        var getterFor = function (TYPE) {
          return function (it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) {
              throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            }
            return state;
          };
        };

        if (NATIVE_WEAK_MAP || shared.state) {
          var store = shared.state || (shared.state = new WeakMap());
          /* eslint-disable no-self-assign -- prototype methods protection */
          store.get = store.get;
          store.has = store.has;
          store.set = store.set;
          /* eslint-enable no-self-assign -- prototype methods protection */
          set = function (it, metadata) {
            if (store.has(it)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            store.set(it, metadata);
            return metadata;
          };
          get = function (it) {
            return store.get(it) || {};
          };
          has = function (it) {
            return store.has(it);
          };
        } else {
          var STATE = sharedKey('state');
          hiddenKeys[STATE] = true;
          set = function (it, metadata) {
            if (hasOwn(it, STATE)) throw TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
          };
          get = function (it) {
            return hasOwn(it, STATE) ? it[STATE] : {};
          };
          has = function (it) {
            return hasOwn(it, STATE);
          };
        }

        module.exports = {
          set: set,
          get: get,
          has: has,
          enforce: enforce,
          getterFor: getterFor,
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-array-iterator-method.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-array-iterator-method.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ './node_modules/core-js-pure/internals/iterators.js'
        );

        var ITERATOR = wellKnownSymbol('iterator');
        var ArrayPrototype = Array.prototype;

        // check on default Array iterator
        module.exports = function (it) {
          return (
            it !== undefined &&
            (Iterators.Array === it || ArrayPrototype[ITERATOR] === it)
          );
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-callable.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-callable.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var $documentAll = __webpack_require__(
          /*! ../internals/document-all */ './node_modules/core-js-pure/internals/document-all.js'
        );

        var documentAll = $documentAll.all;

        // `IsCallable` abstract operation
        // https://tc39.es/ecma262/#sec-iscallable
        module.exports = $documentAll.IS_HTMLDDA
          ? function (argument) {
              return typeof argument == 'function' || argument === documentAll;
            }
          : function (argument) {
              return typeof argument == 'function';
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-constructor.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-constructor.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var classof = __webpack_require__(
          /*! ../internals/classof */ './node_modules/core-js-pure/internals/classof.js'
        );
        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ './node_modules/core-js-pure/internals/get-built-in.js'
        );
        var inspectSource = __webpack_require__(
          /*! ../internals/inspect-source */ './node_modules/core-js-pure/internals/inspect-source.js'
        );

        var noop = function () {
          /* empty */
        };
        var empty = [];
        var construct = getBuiltIn('Reflect', 'construct');
        var constructorRegExp = /^\s*(?:class|function)\b/;
        var exec = uncurryThis(constructorRegExp.exec);
        var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

        var isConstructorModern = function isConstructor(argument) {
          if (!isCallable(argument)) return false;
          try {
            construct(noop, empty, argument);
            return true;
          } catch (error) {
            return false;
          }
        };

        var isConstructorLegacy = function isConstructor(argument) {
          if (!isCallable(argument)) return false;
          switch (classof(argument)) {
            case 'AsyncFunction':
            case 'GeneratorFunction':
            case 'AsyncGeneratorFunction':
              return false;
          }
          try {
            // we can't check .prototype since constructors produced by .bind haven't it
            // `Function#toString` throws on some built-it function in some legacy engines
            // (for example, `DOMQuad` and similar in FF41-)
            return (
              INCORRECT_TO_STRING ||
              !!exec(constructorRegExp, inspectSource(argument))
            );
          } catch (error) {
            return true;
          }
        };

        isConstructorLegacy.sham = true;

        // `IsConstructor` abstract operation
        // https://tc39.es/ecma262/#sec-isconstructor
        module.exports =
          !construct ||
          fails(function () {
            var called;
            return (
              isConstructorModern(isConstructorModern.call) ||
              !isConstructorModern(Object) ||
              !isConstructorModern(function () {
                called = true;
              }) ||
              called
            );
          })
            ? isConstructorLegacy
            : isConstructorModern;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-forced.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-forced.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );

        var replacement = /#|\.prototype\./;

        var isForced = function (feature, detection) {
          var value = data[normalize(feature)];
          return value === POLYFILL
            ? true
            : value === NATIVE
            ? false
            : isCallable(detection)
            ? fails(detection)
            : !!detection;
        };

        var normalize = (isForced.normalize = function (string) {
          return String(string).replace(replacement, '.').toLowerCase();
        });

        var data = (isForced.data = {});
        var NATIVE = (isForced.NATIVE = 'N');
        var POLYFILL = (isForced.POLYFILL = 'P');

        module.exports = isForced;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-null-or-undefined.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-null-or-undefined.js ***!
  \*********************************************************************/
      /***/ (module) => {
        'use strict';

        // we can't use just `it == null` since of `document.all` special case
        // https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
        module.exports = function (it) {
          return it === null || it === undefined;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-object.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-object.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var $documentAll = __webpack_require__(
          /*! ../internals/document-all */ './node_modules/core-js-pure/internals/document-all.js'
        );

        var documentAll = $documentAll.all;

        module.exports = $documentAll.IS_HTMLDDA
          ? function (it) {
              return typeof it == 'object'
                ? it !== null
                : isCallable(it) || it === documentAll;
            }
          : function (it) {
              return typeof it == 'object' ? it !== null : isCallable(it);
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-pure.js':
      /*!********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-pure.js ***!
  \********************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = true;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/is-symbol.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/is-symbol.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ './node_modules/core-js-pure/internals/get-built-in.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var isPrototypeOf = __webpack_require__(
          /*! ../internals/object-is-prototype-of */ './node_modules/core-js-pure/internals/object-is-prototype-of.js'
        );
        var USE_SYMBOL_AS_UID = __webpack_require__(
          /*! ../internals/use-symbol-as-uid */ './node_modules/core-js-pure/internals/use-symbol-as-uid.js'
        );

        var $Object = Object;

        module.exports = USE_SYMBOL_AS_UID
          ? function (it) {
              return typeof it == 'symbol';
            }
          : function (it) {
              var $Symbol = getBuiltIn('Symbol');
              return (
                isCallable($Symbol) &&
                isPrototypeOf($Symbol.prototype, $Object(it))
              );
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/iterator-close.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/iterator-close.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var getMethod = __webpack_require__(
          /*! ../internals/get-method */ './node_modules/core-js-pure/internals/get-method.js'
        );

        module.exports = function (iterator, kind, value) {
          var innerResult, innerError;
          anObject(iterator);
          try {
            innerResult = getMethod(iterator, 'return');
            if (!innerResult) {
              if (kind === 'throw') throw value;
              return value;
            }
            innerResult = call(innerResult, iterator);
          } catch (error) {
            innerError = true;
            innerResult = error;
          }
          if (kind === 'throw') throw value;
          if (innerError) throw innerResult;
          anObject(innerResult);
          return value;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/iterator-create-constructor.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/iterator-create-constructor.js ***!
  \****************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var IteratorPrototype = __webpack_require__(
          /*! ../internals/iterators-core */ './node_modules/core-js-pure/internals/iterators-core.js'
        ).IteratorPrototype;
        var create = __webpack_require__(
          /*! ../internals/object-create */ './node_modules/core-js-pure/internals/object-create.js'
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ './node_modules/core-js-pure/internals/create-property-descriptor.js'
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ './node_modules/core-js-pure/internals/set-to-string-tag.js'
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ './node_modules/core-js-pure/internals/iterators.js'
        );

        var returnThis = function () {
          return this;
        };

        module.exports = function (
          IteratorConstructor,
          NAME,
          next,
          ENUMERABLE_NEXT
        ) {
          var TO_STRING_TAG = NAME + ' Iterator';
          IteratorConstructor.prototype = create(IteratorPrototype, {
            next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next),
          });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/iterator-define.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/iterator-define.js ***!
  \****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var $ = __webpack_require__(
          /*! ../internals/export */ './node_modules/core-js-pure/internals/export.js'
        );
        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ './node_modules/core-js-pure/internals/is-pure.js'
        );
        var FunctionName = __webpack_require__(
          /*! ../internals/function-name */ './node_modules/core-js-pure/internals/function-name.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var createIteratorConstructor = __webpack_require__(
          /*! ../internals/iterator-create-constructor */ './node_modules/core-js-pure/internals/iterator-create-constructor.js'
        );
        var getPrototypeOf = __webpack_require__(
          /*! ../internals/object-get-prototype-of */ './node_modules/core-js-pure/internals/object-get-prototype-of.js'
        );
        var setPrototypeOf = __webpack_require__(
          /*! ../internals/object-set-prototype-of */ './node_modules/core-js-pure/internals/object-set-prototype-of.js'
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ './node_modules/core-js-pure/internals/set-to-string-tag.js'
        );
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ './node_modules/core-js-pure/internals/create-non-enumerable-property.js'
        );
        var defineBuiltIn = __webpack_require__(
          /*! ../internals/define-built-in */ './node_modules/core-js-pure/internals/define-built-in.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ './node_modules/core-js-pure/internals/iterators.js'
        );
        var IteratorsCore = __webpack_require__(
          /*! ../internals/iterators-core */ './node_modules/core-js-pure/internals/iterators-core.js'
        );

        var PROPER_FUNCTION_NAME = FunctionName.PROPER;
        var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol('iterator');
        var KEYS = 'keys';
        var VALUES = 'values';
        var ENTRIES = 'entries';

        var returnThis = function () {
          return this;
        };

        module.exports = function (
          Iterable,
          NAME,
          IteratorConstructor,
          next,
          DEFAULT,
          IS_SET,
          FORCED
        ) {
          createIteratorConstructor(IteratorConstructor, NAME, next);

          var getIterationMethod = function (KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND && KIND in IterablePrototype)
              return IterablePrototype[KIND];

            switch (KIND) {
              case KEYS:
                return function keys() {
                  return new IteratorConstructor(this, KIND);
                };
              case VALUES:
                return function values() {
                  return new IteratorConstructor(this, KIND);
                };
              case ENTRIES:
                return function entries() {
                  return new IteratorConstructor(this, KIND);
                };
            }

            return function () {
              return new IteratorConstructor(this);
            };
          };

          var TO_STRING_TAG = NAME + ' Iterator';
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator =
            IterablePrototype[ITERATOR] ||
            IterablePrototype['@@iterator'] ||
            (DEFAULT && IterablePrototype[DEFAULT]);
          var defaultIterator =
            (!BUGGY_SAFARI_ITERATORS && nativeIterator) ||
            getIterationMethod(DEFAULT);
          var anyNativeIterator =
            NAME === 'Array'
              ? IterablePrototype.entries || nativeIterator
              : nativeIterator;
          var CurrentIteratorPrototype, methods, KEY;

          // fix native
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf(
              anyNativeIterator.call(new Iterable())
            );
            if (
              CurrentIteratorPrototype !== Object.prototype &&
              CurrentIteratorPrototype.next
            ) {
              if (
                !IS_PURE &&
                getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype
              ) {
                if (setPrototypeOf) {
                  setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                  defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
                }
              }
              // Set @@toStringTag to native iterators
              setToStringTag(
                CurrentIteratorPrototype,
                TO_STRING_TAG,
                true,
                true
              );
              if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
            }
          }

          // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
          if (
            PROPER_FUNCTION_NAME &&
            DEFAULT === VALUES &&
            nativeIterator &&
            nativeIterator.name !== VALUES
          ) {
            if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
              createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
            } else {
              INCORRECT_VALUES_NAME = true;
              defaultIterator = function values() {
                return call(nativeIterator, this);
              };
            }
          }

          // export additional methods
          if (DEFAULT) {
            methods = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES),
            };
            if (FORCED)
              for (KEY in methods) {
                if (
                  BUGGY_SAFARI_ITERATORS ||
                  INCORRECT_VALUES_NAME ||
                  !(KEY in IterablePrototype)
                ) {
                  defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
                }
              }
            else
              $(
                {
                  target: NAME,
                  proto: true,
                  forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME,
                },
                methods
              );
          }

          // define iterator
          if (
            (!IS_PURE || FORCED) &&
            IterablePrototype[ITERATOR] !== defaultIterator
          ) {
            defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, {
              name: DEFAULT,
            });
          }
          Iterators[NAME] = defaultIterator;

          return methods;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/iterators-core.js':
      /*!***************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/iterators-core.js ***!
  \***************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );
        var create = __webpack_require__(
          /*! ../internals/object-create */ './node_modules/core-js-pure/internals/object-create.js'
        );
        var getPrototypeOf = __webpack_require__(
          /*! ../internals/object-get-prototype-of */ './node_modules/core-js-pure/internals/object-get-prototype-of.js'
        );
        var defineBuiltIn = __webpack_require__(
          /*! ../internals/define-built-in */ './node_modules/core-js-pure/internals/define-built-in.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ './node_modules/core-js-pure/internals/is-pure.js'
        );

        var ITERATOR = wellKnownSymbol('iterator');
        var BUGGY_SAFARI_ITERATORS = false;

        // `%IteratorPrototype%` object
        // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

        /* eslint-disable es/no-array-prototype-keys -- safe */
        if ([].keys) {
          arrayIterator = [].keys();
          // Safari 8 has buggy iterators w/o `next`
          if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf(
              getPrototypeOf(arrayIterator)
            );
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
              IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }

        var NEW_ITERATOR_PROTOTYPE =
          !isObject(IteratorPrototype) ||
          fails(function () {
            var test = {};
            // FF44- legacy iterators case
            return IteratorPrototype[ITERATOR].call(test) !== test;
          });

        if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
        else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

        // `%IteratorPrototype%[@@iterator]()` method
        // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
        if (!isCallable(IteratorPrototype[ITERATOR])) {
          defineBuiltIn(IteratorPrototype, ITERATOR, function () {
            return this;
          });
        }

        module.exports = {
          IteratorPrototype: IteratorPrototype,
          BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS,
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/iterators.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/iterators.js ***!
  \**********************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = {};

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/length-of-array-like.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/length-of-array-like.js ***!
  \*********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toLength = __webpack_require__(
          /*! ../internals/to-length */ './node_modules/core-js-pure/internals/to-length.js'
        );

        // `LengthOfArrayLike` abstract operation
        // https://tc39.es/ecma262/#sec-lengthofarraylike
        module.exports = function (obj) {
          return toLength(obj.length);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/math-trunc.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/math-trunc.js ***!
  \***********************************************************/
      /***/ (module) => {
        'use strict';

        var ceil = Math.ceil;
        var floor = Math.floor;

        // `Math.trunc` method
        // https://tc39.es/ecma262/#sec-math.trunc
        // eslint-disable-next-line es/no-math-trunc -- safe
        module.exports =
          Math.trunc ||
          function trunc(x) {
            var n = +x;
            return (n > 0 ? floor : ceil)(n);
          };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-assign.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-assign.js ***!
  \**************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var objectKeys = __webpack_require__(
          /*! ../internals/object-keys */ './node_modules/core-js-pure/internals/object-keys.js'
        );
        var getOwnPropertySymbolsModule = __webpack_require__(
          /*! ../internals/object-get-own-property-symbols */ './node_modules/core-js-pure/internals/object-get-own-property-symbols.js'
        );
        var propertyIsEnumerableModule = __webpack_require__(
          /*! ../internals/object-property-is-enumerable */ './node_modules/core-js-pure/internals/object-property-is-enumerable.js'
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ './node_modules/core-js-pure/internals/to-object.js'
        );
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ './node_modules/core-js-pure/internals/indexed-object.js'
        );

        // eslint-disable-next-line es/no-object-assign -- safe
        var $assign = Object.assign;
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        var defineProperty = Object.defineProperty;
        var concat = uncurryThis([].concat);

        // `Object.assign` method
        // https://tc39.es/ecma262/#sec-object.assign
        module.exports =
          !$assign ||
          fails(function () {
            // should have correct order of operations (Edge bug)
            if (
              DESCRIPTORS &&
              $assign(
                { b: 1 },
                $assign(
                  defineProperty({}, 'a', {
                    enumerable: true,
                    get: function () {
                      defineProperty(this, 'b', {
                        value: 3,
                        enumerable: false,
                      });
                    },
                  }),
                  { b: 2 }
                )
              ).b !== 1
            )
              return true;
            // should work with symbols and should have deterministic property order (V8 bug)
            var A = {};
            var B = {};
            // eslint-disable-next-line es/no-symbol -- safe
            var symbol = Symbol('assign detection');
            var alphabet = 'abcdefghijklmnopqrst';
            A[symbol] = 7;
            alphabet.split('').forEach(function (chr) {
              B[chr] = chr;
            });
            return (
              $assign({}, A)[symbol] !== 7 ||
              objectKeys($assign({}, B)).join('') !== alphabet
            );
          })
            ? function assign(target, source) {
                // eslint-disable-line no-unused-vars -- required for `.length`
                var T = toObject(target);
                var argumentsLength = arguments.length;
                var index = 1;
                var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
                var propertyIsEnumerable = propertyIsEnumerableModule.f;
                while (argumentsLength > index) {
                  var S = IndexedObject(arguments[index++]);
                  var keys = getOwnPropertySymbols
                    ? concat(objectKeys(S), getOwnPropertySymbols(S))
                    : objectKeys(S);
                  var length = keys.length;
                  var j = 0;
                  var key;
                  while (length > j) {
                    key = keys[j++];
                    if (!DESCRIPTORS || call(propertyIsEnumerable, S, key))
                      T[key] = S[key];
                  }
                }
                return T;
              }
            : $assign;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-create.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-create.js ***!
  \**************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        /* global ActiveXObject -- old IE, WSH */
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var definePropertiesModule = __webpack_require__(
          /*! ../internals/object-define-properties */ './node_modules/core-js-pure/internals/object-define-properties.js'
        );
        var enumBugKeys = __webpack_require__(
          /*! ../internals/enum-bug-keys */ './node_modules/core-js-pure/internals/enum-bug-keys.js'
        );
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ './node_modules/core-js-pure/internals/hidden-keys.js'
        );
        var html = __webpack_require__(
          /*! ../internals/html */ './node_modules/core-js-pure/internals/html.js'
        );
        var documentCreateElement = __webpack_require__(
          /*! ../internals/document-create-element */ './node_modules/core-js-pure/internals/document-create-element.js'
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ './node_modules/core-js-pure/internals/shared-key.js'
        );

        var GT = '>';
        var LT = '<';
        var PROTOTYPE = 'prototype';
        var SCRIPT = 'script';
        var IE_PROTO = sharedKey('IE_PROTO');

        var EmptyConstructor = function () {
          /* empty */
        };

        var scriptTag = function (content) {
          return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
        };

        // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
        var NullProtoObjectViaActiveX = function (activeXDocument) {
          activeXDocument.write(scriptTag(''));
          activeXDocument.close();
          var temp = activeXDocument.parentWindow.Object;
          activeXDocument = null; // avoid memory leak
          return temp;
        };

        // Create object with fake `null` prototype: use iframe Object with cleared prototype
        var NullProtoObjectViaIFrame = function () {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = documentCreateElement('iframe');
          var JS = 'java' + SCRIPT + ':';
          var iframeDocument;
          iframe.style.display = 'none';
          html.appendChild(iframe);
          // https://github.com/zloirock/core-js/issues/475
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag('document.F=Object'));
          iframeDocument.close();
          return iframeDocument.F;
        };

        // Check for document.domain and active x support
        // No need to use active x approach when document.domain is not set
        // see https://github.com/es-shims/es5-shim/issues/150
        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
        // avoid IE GC bug
        var activeXDocument;
        var NullProtoObject = function () {
          try {
            activeXDocument = new ActiveXObject('htmlfile');
          } catch (error) {
            /* ignore */
          }
          NullProtoObject =
            typeof document != 'undefined'
              ? document.domain && activeXDocument
                ? NullProtoObjectViaActiveX(activeXDocument) // old IE
                : NullProtoObjectViaIFrame()
              : NullProtoObjectViaActiveX(activeXDocument); // WSH
          var length = enumBugKeys.length;
          while (length--)
            delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };

        hiddenKeys[IE_PROTO] = true;

        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        // eslint-disable-next-line es/no-object-create -- safe
        module.exports =
          Object.create ||
          function create(O, Properties) {
            var result;
            if (O !== null) {
              EmptyConstructor[PROTOTYPE] = anObject(O);
              result = new EmptyConstructor();
              EmptyConstructor[PROTOTYPE] = null;
              // add "__proto__" for Object.getPrototypeOf polyfill
              result[IE_PROTO] = O;
            } else result = NullProtoObject();
            return Properties === undefined
              ? result
              : definePropertiesModule.f(result, Properties);
          };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-define-properties.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-define-properties.js ***!
  \*************************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(
          /*! ../internals/v8-prototype-define-bug */ './node_modules/core-js-pure/internals/v8-prototype-define-bug.js'
        );
        var definePropertyModule = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ './node_modules/core-js-pure/internals/to-indexed-object.js'
        );
        var objectKeys = __webpack_require__(
          /*! ../internals/object-keys */ './node_modules/core-js-pure/internals/object-keys.js'
        );

        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        // eslint-disable-next-line es/no-object-defineproperties -- safe
        exports.f =
          DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG
            ? Object.defineProperties
            : function defineProperties(O, Properties) {
                anObject(O);
                var props = toIndexedObject(Properties);
                var keys = objectKeys(Properties);
                var length = keys.length;
                var index = 0;
                var key;
                while (length > index)
                  definePropertyModule.f(O, (key = keys[index++]), props[key]);
                return O;
              };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-define-property.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-define-property.js ***!
  \***********************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ../internals/ie8-dom-define */ './node_modules/core-js-pure/internals/ie8-dom-define.js'
        );
        var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(
          /*! ../internals/v8-prototype-define-bug */ './node_modules/core-js-pure/internals/v8-prototype-define-bug.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var toPropertyKey = __webpack_require__(
          /*! ../internals/to-property-key */ './node_modules/core-js-pure/internals/to-property-key.js'
        );

        var $TypeError = TypeError;
        // eslint-disable-next-line es/no-object-defineproperty -- safe
        var $defineProperty = Object.defineProperty;
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var ENUMERABLE = 'enumerable';
        var CONFIGURABLE = 'configurable';
        var WRITABLE = 'writable';

        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        exports.f = DESCRIPTORS
          ? V8_PROTOTYPE_DEFINE_BUG
            ? function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPropertyKey(P);
                anObject(Attributes);
                if (
                  typeof O === 'function' &&
                  P === 'prototype' &&
                  'value' in Attributes &&
                  WRITABLE in Attributes &&
                  !Attributes[WRITABLE]
                ) {
                  var current = $getOwnPropertyDescriptor(O, P);
                  if (current && current[WRITABLE]) {
                    O[P] = Attributes.value;
                    Attributes = {
                      configurable:
                        CONFIGURABLE in Attributes
                          ? Attributes[CONFIGURABLE]
                          : current[CONFIGURABLE],
                      enumerable:
                        ENUMERABLE in Attributes
                          ? Attributes[ENUMERABLE]
                          : current[ENUMERABLE],
                      writable: false,
                    };
                  }
                }
                return $defineProperty(O, P, Attributes);
              }
            : $defineProperty
          : function defineProperty(O, P, Attributes) {
              anObject(O);
              P = toPropertyKey(P);
              anObject(Attributes);
              if (IE8_DOM_DEFINE)
                try {
                  return $defineProperty(O, P, Attributes);
                } catch (error) {
                  /* empty */
                }
              if ('get' in Attributes || 'set' in Attributes)
                throw $TypeError('Accessors not supported');
              if ('value' in Attributes) O[P] = Attributes.value;
              return O;
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-get-own-property-descriptor.js':
      /*!***********************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-get-own-property-descriptor.js ***!
  \***********************************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var propertyIsEnumerableModule = __webpack_require__(
          /*! ../internals/object-property-is-enumerable */ './node_modules/core-js-pure/internals/object-property-is-enumerable.js'
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ './node_modules/core-js-pure/internals/create-property-descriptor.js'
        );
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ './node_modules/core-js-pure/internals/to-indexed-object.js'
        );
        var toPropertyKey = __webpack_require__(
          /*! ../internals/to-property-key */ './node_modules/core-js-pure/internals/to-property-key.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var IE8_DOM_DEFINE = __webpack_require__(
          /*! ../internals/ie8-dom-define */ './node_modules/core-js-pure/internals/ie8-dom-define.js'
        );

        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
        exports.f = DESCRIPTORS
          ? $getOwnPropertyDescriptor
          : function getOwnPropertyDescriptor(O, P) {
              O = toIndexedObject(O);
              P = toPropertyKey(P);
              if (IE8_DOM_DEFINE)
                try {
                  return $getOwnPropertyDescriptor(O, P);
                } catch (error) {
                  /* empty */
                }
              if (hasOwn(O, P))
                return createPropertyDescriptor(
                  !call(propertyIsEnumerableModule.f, O, P),
                  O[P]
                );
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-get-own-property-symbols.js':
      /*!********************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-get-own-property-symbols.js ***!
  \********************************************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';

        // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
        exports.f = Object.getOwnPropertySymbols;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-get-prototype-of.js':
      /*!************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-get-prototype-of.js ***!
  \************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var toObject = __webpack_require__(
          /*! ../internals/to-object */ './node_modules/core-js-pure/internals/to-object.js'
        );
        var sharedKey = __webpack_require__(
          /*! ../internals/shared-key */ './node_modules/core-js-pure/internals/shared-key.js'
        );
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__(
          /*! ../internals/correct-prototype-getter */ './node_modules/core-js-pure/internals/correct-prototype-getter.js'
        );

        var IE_PROTO = sharedKey('IE_PROTO');
        var $Object = Object;
        var ObjectPrototype = $Object.prototype;

        // `Object.getPrototypeOf` method
        // https://tc39.es/ecma262/#sec-object.getprototypeof
        // eslint-disable-next-line es/no-object-getprototypeof -- safe
        module.exports = CORRECT_PROTOTYPE_GETTER
          ? $Object.getPrototypeOf
          : function (O) {
              var object = toObject(O);
              if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
              var constructor = object.constructor;
              if (isCallable(constructor) && object instanceof constructor) {
                return constructor.prototype;
              }
              return object instanceof $Object ? ObjectPrototype : null;
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-is-prototype-of.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-is-prototype-of.js ***!
  \***********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );

        module.exports = uncurryThis({}.isPrototypeOf);

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-keys-internal.js':
      /*!*********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-keys-internal.js ***!
  \*********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ './node_modules/core-js-pure/internals/to-indexed-object.js'
        );
        var indexOf = __webpack_require__(
          /*! ../internals/array-includes */ './node_modules/core-js-pure/internals/array-includes.js'
        ).indexOf;
        var hiddenKeys = __webpack_require__(
          /*! ../internals/hidden-keys */ './node_modules/core-js-pure/internals/hidden-keys.js'
        );

        var push = uncurryThis([].push);

        module.exports = function (object, names) {
          var O = toIndexedObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O)
            !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
          // Don't enum bug & hidden keys
          while (names.length > i)
            if (hasOwn(O, (key = names[i++]))) {
              ~indexOf(result, key) || push(result, key);
            }
          return result;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-keys.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-keys.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var internalObjectKeys = __webpack_require__(
          /*! ../internals/object-keys-internal */ './node_modules/core-js-pure/internals/object-keys-internal.js'
        );
        var enumBugKeys = __webpack_require__(
          /*! ../internals/enum-bug-keys */ './node_modules/core-js-pure/internals/enum-bug-keys.js'
        );

        // `Object.keys` method
        // https://tc39.es/ecma262/#sec-object.keys
        // eslint-disable-next-line es/no-object-keys -- safe
        module.exports =
          Object.keys ||
          function keys(O) {
            return internalObjectKeys(O, enumBugKeys);
          };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-property-is-enumerable.js':
      /*!******************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-property-is-enumerable.js ***!
  \******************************************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';

        var $propertyIsEnumerable = {}.propertyIsEnumerable;
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

        // Nashorn ~ JDK8 bug
        var NASHORN_BUG =
          getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

        // `Object.prototype.propertyIsEnumerable` method implementation
        // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
        exports.f = NASHORN_BUG
          ? function propertyIsEnumerable(V) {
              var descriptor = getOwnPropertyDescriptor(this, V);
              return !!descriptor && descriptor.enumerable;
            }
          : $propertyIsEnumerable;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-set-prototype-of.js':
      /*!************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-set-prototype-of.js ***!
  \************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        /* eslint-disable no-proto -- safe */
        var uncurryThisAccessor = __webpack_require__(
          /*! ../internals/function-uncurry-this-accessor */ './node_modules/core-js-pure/internals/function-uncurry-this-accessor.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var aPossiblePrototype = __webpack_require__(
          /*! ../internals/a-possible-prototype */ './node_modules/core-js-pure/internals/a-possible-prototype.js'
        );

        // `Object.setPrototypeOf` method
        // https://tc39.es/ecma262/#sec-object.setprototypeof
        // Works with __proto__ only. Old v8 can't work with null proto objects.
        // eslint-disable-next-line es/no-object-setprototypeof -- safe
        module.exports =
          Object.setPrototypeOf ||
          ('__proto__' in {}
            ? (function () {
                var CORRECT_SETTER = false;
                var test = {};
                var setter;
                try {
                  setter = uncurryThisAccessor(
                    Object.prototype,
                    '__proto__',
                    'set'
                  );
                  setter(test, []);
                  CORRECT_SETTER = test instanceof Array;
                } catch (error) {
                  /* empty */
                }
                return function setPrototypeOf(O, proto) {
                  anObject(O);
                  aPossiblePrototype(proto);
                  if (CORRECT_SETTER) setter(O, proto);
                  else O.__proto__ = proto;
                  return O;
                };
              })()
            : undefined);

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/object-to-string.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/object-to-string.js ***!
  \*****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ './node_modules/core-js-pure/internals/to-string-tag-support.js'
        );
        var classof = __webpack_require__(
          /*! ../internals/classof */ './node_modules/core-js-pure/internals/classof.js'
        );

        // `Object.prototype.toString` method implementation
        // https://tc39.es/ecma262/#sec-object.prototype.tostring
        module.exports = TO_STRING_TAG_SUPPORT
          ? {}.toString
          : function toString() {
              return '[object ' + classof(this) + ']';
            };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/ordinary-to-primitive.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/ordinary-to-primitive.js ***!
  \**********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );

        var $TypeError = TypeError;

        // `OrdinaryToPrimitive` abstract operation
        // https://tc39.es/ecma262/#sec-ordinarytoprimitive
        module.exports = function (input, pref) {
          var fn, val;
          if (
            pref === 'string' &&
            isCallable((fn = input.toString)) &&
            !isObject((val = call(fn, input)))
          )
            return val;
          if (
            isCallable((fn = input.valueOf)) &&
            !isObject((val = call(fn, input)))
          )
            return val;
          if (
            pref !== 'string' &&
            isCallable((fn = input.toString)) &&
            !isObject((val = call(fn, input)))
          )
            return val;
          throw $TypeError("Can't convert object to primitive value");
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/path.js':
      /*!*****************************************************!*\
  !*** ./node_modules/core-js-pure/internals/path.js ***!
  \*****************************************************/
      /***/ (module) => {
        'use strict';

        module.exports = {};

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/require-object-coercible.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/require-object-coercible.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var isNullOrUndefined = __webpack_require__(
          /*! ../internals/is-null-or-undefined */ './node_modules/core-js-pure/internals/is-null-or-undefined.js'
        );

        var $TypeError = TypeError;

        // `RequireObjectCoercible` abstract operation
        // https://tc39.es/ecma262/#sec-requireobjectcoercible
        module.exports = function (it) {
          if (isNullOrUndefined(it))
            throw $TypeError("Can't call method on " + it);
          return it;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/set-to-string-tag.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/set-to-string-tag.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var TO_STRING_TAG_SUPPORT = __webpack_require__(
          /*! ../internals/to-string-tag-support */ './node_modules/core-js-pure/internals/to-string-tag-support.js'
        );
        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        ).f;
        var createNonEnumerableProperty = __webpack_require__(
          /*! ../internals/create-non-enumerable-property */ './node_modules/core-js-pure/internals/create-non-enumerable-property.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var toString = __webpack_require__(
          /*! ../internals/object-to-string */ './node_modules/core-js-pure/internals/object-to-string.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');

        module.exports = function (it, TAG, STATIC, SET_METHOD) {
          if (it) {
            var target = STATIC ? it : it.prototype;
            if (!hasOwn(target, TO_STRING_TAG)) {
              defineProperty(target, TO_STRING_TAG, {
                configurable: true,
                value: TAG,
              });
            }
            if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
              createNonEnumerableProperty(target, 'toString', toString);
            }
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/shared-key.js':
      /*!***********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/shared-key.js ***!
  \***********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var shared = __webpack_require__(
          /*! ../internals/shared */ './node_modules/core-js-pure/internals/shared.js'
        );
        var uid = __webpack_require__(
          /*! ../internals/uid */ './node_modules/core-js-pure/internals/uid.js'
        );

        var keys = shared('keys');

        module.exports = function (key) {
          return keys[key] || (keys[key] = uid(key));
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/shared-store.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/shared-store.js ***!
  \*************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var defineGlobalProperty = __webpack_require__(
          /*! ../internals/define-global-property */ './node_modules/core-js-pure/internals/define-global-property.js'
        );

        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || defineGlobalProperty(SHARED, {});

        module.exports = store;

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/shared.js':
      /*!*******************************************************!*\
  !*** ./node_modules/core-js-pure/internals/shared.js ***!
  \*******************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ './node_modules/core-js-pure/internals/is-pure.js'
        );
        var store = __webpack_require__(
          /*! ../internals/shared-store */ './node_modules/core-js-pure/internals/shared-store.js'
        );

        (module.exports = function (key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: '3.32.2',
          mode: IS_PURE ? 'pure' : 'global',
          copyright: '© 2014-2023 Denis Pushkarev (zloirock.ru)',
          license: 'https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE',
          source: 'https://github.com/zloirock/core-js',
        });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/string-multibyte.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/string-multibyte.js ***!
  \*****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var toIntegerOrInfinity = __webpack_require__(
          /*! ../internals/to-integer-or-infinity */ './node_modules/core-js-pure/internals/to-integer-or-infinity.js'
        );
        var toString = __webpack_require__(
          /*! ../internals/to-string */ './node_modules/core-js-pure/internals/to-string.js'
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ './node_modules/core-js-pure/internals/require-object-coercible.js'
        );

        var charAt = uncurryThis(''.charAt);
        var charCodeAt = uncurryThis(''.charCodeAt);
        var stringSlice = uncurryThis(''.slice);

        var createMethod = function (CONVERT_TO_STRING) {
          return function ($this, pos) {
            var S = toString(requireObjectCoercible($this));
            var position = toIntegerOrInfinity(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size)
              return CONVERT_TO_STRING ? '' : undefined;
            first = charCodeAt(S, position);
            return first < 0xd800 ||
              first > 0xdbff ||
              position + 1 === size ||
              (second = charCodeAt(S, position + 1)) < 0xdc00 ||
              second > 0xdfff
              ? CONVERT_TO_STRING
                ? charAt(S, position)
                : first
              : CONVERT_TO_STRING
              ? stringSlice(S, position, position + 2)
              : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
          };
        };

        module.exports = {
          // `String.prototype.codePointAt` method
          // https://tc39.es/ecma262/#sec-string.prototype.codepointat
          codeAt: createMethod(false),
          // `String.prototype.at` method
          // https://github.com/mathiasbynens/String.prototype.at
          charAt: createMethod(true),
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/string-punycode-to-ascii.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/string-punycode-to-ascii.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );

        var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128; // 0x80
        var delimiter = '-'; // '\x2D'
        var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
        var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
        var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
        var baseMinusTMin = base - tMin;

        var $RangeError = RangeError;
        var exec = uncurryThis(regexSeparators.exec);
        var floor = Math.floor;
        var fromCharCode = String.fromCharCode;
        var charCodeAt = uncurryThis(''.charCodeAt);
        var join = uncurryThis([].join);
        var push = uncurryThis([].push);
        var replace = uncurryThis(''.replace);
        var split = uncurryThis(''.split);
        var toLowerCase = uncurryThis(''.toLowerCase);

        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         */
        var ucs2decode = function (string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          while (counter < length) {
            var value = charCodeAt(string, counter++);
            if (value >= 0xd800 && value <= 0xdbff && counter < length) {
              // It's a high surrogate, and there is a next character.
              var extra = charCodeAt(string, counter++);
              if ((extra & 0xfc00) === 0xdc00) {
                // Low surrogate.
                push(
                  output,
                  ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000
                );
              } else {
                // It's an unmatched surrogate; only append this code unit, in case the
                // next code unit is the high surrogate of a surrogate pair.
                push(output, value);
                counter--;
              }
            } else {
              push(output, value);
            }
          }
          return output;
        };

        /**
         * Converts a digit/integer into a basic code point.
         */
        var digitToBasic = function (digit) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26);
        };

        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * https://tools.ietf.org/html/rfc3492#section-3.4
         */
        var adapt = function (delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          while (delta > (baseMinusTMin * tMax) >> 1) {
            delta = floor(delta / baseMinusTMin);
            k += base;
          }
          return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
        };

        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         */
        var encode = function (input) {
          var output = [];

          // Convert the input in UCS-2 to an array of Unicode code points.
          input = ucs2decode(input);

          // Cache the length.
          var inputLength = input.length;

          // Initialize the state.
          var n = initialN;
          var delta = 0;
          var bias = initialBias;
          var i, currentValue;

          // Handle the basic code points.
          for (i = 0; i < input.length; i++) {
            currentValue = input[i];
            if (currentValue < 0x80) {
              push(output, fromCharCode(currentValue));
            }
          }

          var basicLength = output.length; // number of basic code points.
          var handledCPCount = basicLength; // number of code points that have been handled;

          // Finish the basic string with a delimiter unless it's empty.
          if (basicLength) {
            push(output, delimiter);
          }

          // Main encoding loop:
          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next larger one:
            var m = maxInt;
            for (i = 0; i < input.length; i++) {
              currentValue = input[i];
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }

            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              throw $RangeError(OVERFLOW_ERROR);
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (i = 0; i < input.length; i++) {
              currentValue = input[i];
              if (currentValue < n && ++delta > maxInt) {
                throw $RangeError(OVERFLOW_ERROR);
              }
              if (currentValue === n) {
                // Represent delta as a generalized variable-length integer.
                var q = delta;
                var k = base;
                while (true) {
                  var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) break;
                  var qMinusT = q - t;
                  var baseMinusT = base - t;
                  push(
                    output,
                    fromCharCode(digitToBasic(t + (qMinusT % baseMinusT)))
                  );
                  q = floor(qMinusT / baseMinusT);
                  k += base;
                }

                push(output, fromCharCode(digitToBasic(q)));
                bias = adapt(
                  delta,
                  handledCPCountPlusOne,
                  handledCPCount === basicLength
                );
                delta = 0;
                handledCPCount++;
              }
            }

            delta++;
            n++;
          }
          return join(output, '');
        };

        module.exports = function (input) {
          var encoded = [];
          var labels = split(
            replace(toLowerCase(input), regexSeparators, '\u002E'),
            '.'
          );
          var i, label;
          for (i = 0; i < labels.length; i++) {
            label = labels[i];
            push(
              encoded,
              exec(regexNonASCII, label) ? 'xn--' + encode(label) : label
            );
          }
          return join(encoded, '.');
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/symbol-constructor-detection.js':
      /*!*****************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/symbol-constructor-detection.js ***!
  \*****************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        /* eslint-disable es/no-symbol -- required for testing */
        var V8_VERSION = __webpack_require__(
          /*! ../internals/engine-v8-version */ './node_modules/core-js-pure/internals/engine-v8-version.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );

        var $String = global.String;

        // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
        module.exports =
          !!Object.getOwnPropertySymbols &&
          !fails(function () {
            var symbol = Symbol('symbol detection');
            // Chrome 38 Symbol has incorrect toString conversion
            // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
            // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
            // of course, fail.
            return (
              !$String(symbol) ||
              !(Object(symbol) instanceof Symbol) ||
              // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
              (!Symbol.sham && V8_VERSION && V8_VERSION < 41)
            );
          });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-absolute-index.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-absolute-index.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toIntegerOrInfinity = __webpack_require__(
          /*! ../internals/to-integer-or-infinity */ './node_modules/core-js-pure/internals/to-integer-or-infinity.js'
        );

        var max = Math.max;
        var min = Math.min;

        // Helper for a popular repeating case of the spec:
        // Let integer be ? ToInteger(index).
        // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
        module.exports = function (index, length) {
          var integer = toIntegerOrInfinity(index);
          return integer < 0 ? max(integer + length, 0) : min(integer, length);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-indexed-object.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-indexed-object.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        // toObject with fallback for non-array-like ES3 strings
        var IndexedObject = __webpack_require__(
          /*! ../internals/indexed-object */ './node_modules/core-js-pure/internals/indexed-object.js'
        );
        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ './node_modules/core-js-pure/internals/require-object-coercible.js'
        );

        module.exports = function (it) {
          return IndexedObject(requireObjectCoercible(it));
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-integer-or-infinity.js':
      /*!***********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-integer-or-infinity.js ***!
  \***********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var trunc = __webpack_require__(
          /*! ../internals/math-trunc */ './node_modules/core-js-pure/internals/math-trunc.js'
        );

        // `ToIntegerOrInfinity` abstract operation
        // https://tc39.es/ecma262/#sec-tointegerorinfinity
        module.exports = function (argument) {
          var number = +argument;
          // eslint-disable-next-line no-self-compare -- NaN check
          return number !== number || number === 0 ? 0 : trunc(number);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-length.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-length.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toIntegerOrInfinity = __webpack_require__(
          /*! ../internals/to-integer-or-infinity */ './node_modules/core-js-pure/internals/to-integer-or-infinity.js'
        );

        var min = Math.min;

        // `ToLength` abstract operation
        // https://tc39.es/ecma262/#sec-tolength
        module.exports = function (argument) {
          return argument > 0
            ? min(toIntegerOrInfinity(argument), 0x1fffffffffffff)
            : 0; // 2 ** 53 - 1 == 9007199254740991
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-object.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-object.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var requireObjectCoercible = __webpack_require__(
          /*! ../internals/require-object-coercible */ './node_modules/core-js-pure/internals/require-object-coercible.js'
        );

        var $Object = Object;

        // `ToObject` abstract operation
        // https://tc39.es/ecma262/#sec-toobject
        module.exports = function (argument) {
          return $Object(requireObjectCoercible(argument));
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-primitive.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-primitive.js ***!
  \*************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );
        var isSymbol = __webpack_require__(
          /*! ../internals/is-symbol */ './node_modules/core-js-pure/internals/is-symbol.js'
        );
        var getMethod = __webpack_require__(
          /*! ../internals/get-method */ './node_modules/core-js-pure/internals/get-method.js'
        );
        var ordinaryToPrimitive = __webpack_require__(
          /*! ../internals/ordinary-to-primitive */ './node_modules/core-js-pure/internals/ordinary-to-primitive.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );

        var $TypeError = TypeError;
        var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

        // `ToPrimitive` abstract operation
        // https://tc39.es/ecma262/#sec-toprimitive
        module.exports = function (input, pref) {
          if (!isObject(input) || isSymbol(input)) return input;
          var exoticToPrim = getMethod(input, TO_PRIMITIVE);
          var result;
          if (exoticToPrim) {
            if (pref === undefined) pref = 'default';
            result = call(exoticToPrim, input, pref);
            if (!isObject(result) || isSymbol(result)) return result;
            throw $TypeError("Can't convert object to primitive value");
          }
          if (pref === undefined) pref = 'number';
          return ordinaryToPrimitive(input, pref);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-property-key.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-property-key.js ***!
  \****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toPrimitive = __webpack_require__(
          /*! ../internals/to-primitive */ './node_modules/core-js-pure/internals/to-primitive.js'
        );
        var isSymbol = __webpack_require__(
          /*! ../internals/is-symbol */ './node_modules/core-js-pure/internals/is-symbol.js'
        );

        // `ToPropertyKey` abstract operation
        // https://tc39.es/ecma262/#sec-topropertykey
        module.exports = function (argument) {
          var key = toPrimitive(argument, 'string');
          return isSymbol(key) ? key : key + '';
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-string-tag-support.js':
      /*!**********************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-string-tag-support.js ***!
  \**********************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');
        var test = {};

        test[TO_STRING_TAG] = 'z';

        module.exports = String(test) === '[object z]';

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/to-string.js':
      /*!**********************************************************!*\
  !*** ./node_modules/core-js-pure/internals/to-string.js ***!
  \**********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var classof = __webpack_require__(
          /*! ../internals/classof */ './node_modules/core-js-pure/internals/classof.js'
        );

        var $String = String;

        module.exports = function (argument) {
          if (classof(argument) === 'Symbol')
            throw TypeError('Cannot convert a Symbol value to a string');
          return $String(argument);
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/try-to-string.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/try-to-string.js ***!
  \**************************************************************/
      /***/ (module) => {
        'use strict';

        var $String = String;

        module.exports = function (argument) {
          try {
            return $String(argument);
          } catch (error) {
            return 'Object';
          }
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/uid.js':
      /*!****************************************************!*\
  !*** ./node_modules/core-js-pure/internals/uid.js ***!
  \****************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );

        var id = 0;
        var postfix = Math.random();
        var toString = uncurryThis((1.0).toString);

        module.exports = function (key) {
          return (
            'Symbol(' +
            (key === undefined ? '' : key) +
            ')_' +
            toString(++id + postfix, 36)
          );
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/url-constructor-detection.js':
      /*!**************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/url-constructor-detection.js ***!
  \**************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ './node_modules/core-js-pure/internals/is-pure.js'
        );

        var ITERATOR = wellKnownSymbol('iterator');

        module.exports = !fails(function () {
          // eslint-disable-next-line unicorn/relative-url-style -- required for testing
          var url = new URL('b?a=1&b=2&c=3', 'http://a');
          var params = url.searchParams;
          var params2 = new URLSearchParams('a=1&a=2&b=3');
          var result = '';
          url.pathname = 'c%20d';
          params.forEach(function (value, key) {
            params['delete']('b');
            result += key + value;
          });
          params2['delete']('a', 2);
          // `undefined` case is a Chromium 117 bug
          // https://bugs.chromium.org/p/v8/issues/detail?id=14222
          params2['delete']('b', undefined);
          return (
            (IS_PURE &&
              (!url.toJSON ||
                !params2.has('a', 1) ||
                params2.has('a', 2) ||
                !params2.has('a', undefined) ||
                params2.has('b'))) ||
            (!params.size && (IS_PURE || !DESCRIPTORS)) ||
            !params.sort ||
            url.href !== 'http://a/c%20d?a=1&c=3' ||
            params.get('c') !== '3' ||
            String(new URLSearchParams('?a=1')) !== 'a=1' ||
            !params[ITERATOR] ||
            // throws in Edge
            new URL('https://a@b').username !== 'a' ||
            new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' ||
            // not punycoded in Edge
            new URL('http://тест').host !== 'xn--e1aybc' ||
            // not escaped in Chrome 62-
            new URL('http://a#б').hash !== '#%D0%B1' ||
            // fails in Chrome 66-
            result !== 'a1c3' ||
            // throws in Safari
            new URL('http://x', undefined).host !== 'x'
          );
        });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/use-symbol-as-uid.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/use-symbol-as-uid.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        /* eslint-disable es/no-symbol -- required for testing */
        var NATIVE_SYMBOL = __webpack_require__(
          /*! ../internals/symbol-constructor-detection */ './node_modules/core-js-pure/internals/symbol-constructor-detection.js'
        );

        module.exports =
          NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/v8-prototype-define-bug.js':
      /*!************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/v8-prototype-define-bug.js ***!
  \************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );

        // V8 ~ Chrome 36-
        // https://bugs.chromium.org/p/v8/issues/detail?id=3334
        module.exports =
          DESCRIPTORS &&
          fails(function () {
            // eslint-disable-next-line es/no-object-defineproperty -- required for testing
            return (
              Object.defineProperty(
                function () {
                  /* empty */
                },
                'prototype',
                {
                  value: 42,
                  writable: false,
                }
              ).prototype !== 42
            );
          });

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/validate-arguments-length.js':
      /*!**************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/validate-arguments-length.js ***!
  \**************************************************************************/
      /***/ (module) => {
        'use strict';

        var $TypeError = TypeError;

        module.exports = function (passed, required) {
          if (passed < required) throw $TypeError('Not enough arguments');
          return passed;
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/weak-map-basic-detection.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/weak-map-basic-detection.js ***!
  \*************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );

        var WeakMap = global.WeakMap;

        module.exports =
          isCallable(WeakMap) && /native code/.test(String(WeakMap));

        /***/
      },

    /***/ './node_modules/core-js-pure/internals/well-known-symbol.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/internals/well-known-symbol.js ***!
  \******************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var shared = __webpack_require__(
          /*! ../internals/shared */ './node_modules/core-js-pure/internals/shared.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var uid = __webpack_require__(
          /*! ../internals/uid */ './node_modules/core-js-pure/internals/uid.js'
        );
        var NATIVE_SYMBOL = __webpack_require__(
          /*! ../internals/symbol-constructor-detection */ './node_modules/core-js-pure/internals/symbol-constructor-detection.js'
        );
        var USE_SYMBOL_AS_UID = __webpack_require__(
          /*! ../internals/use-symbol-as-uid */ './node_modules/core-js-pure/internals/use-symbol-as-uid.js'
        );

        var Symbol = global.Symbol;
        var WellKnownSymbolsStore = shared('wks');
        var createWellKnownSymbol = USE_SYMBOL_AS_UID
          ? Symbol['for'] || Symbol
          : (Symbol && Symbol.withoutSetter) || uid;

        module.exports = function (name) {
          if (!hasOwn(WellKnownSymbolsStore, name)) {
            WellKnownSymbolsStore[name] =
              NATIVE_SYMBOL && hasOwn(Symbol, name)
                ? Symbol[name]
                : createWellKnownSymbol('Symbol.' + name);
          }
          return WellKnownSymbolsStore[name];
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/es.array.iterator.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/es.array.iterator.js ***!
  \****************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var toIndexedObject = __webpack_require__(
          /*! ../internals/to-indexed-object */ './node_modules/core-js-pure/internals/to-indexed-object.js'
        );
        var addToUnscopables = __webpack_require__(
          /*! ../internals/add-to-unscopables */ './node_modules/core-js-pure/internals/add-to-unscopables.js'
        );
        var Iterators = __webpack_require__(
          /*! ../internals/iterators */ './node_modules/core-js-pure/internals/iterators.js'
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ './node_modules/core-js-pure/internals/internal-state.js'
        );
        var defineProperty = __webpack_require__(
          /*! ../internals/object-define-property */ './node_modules/core-js-pure/internals/object-define-property.js'
        ).f;
        var defineIterator = __webpack_require__(
          /*! ../internals/iterator-define */ './node_modules/core-js-pure/internals/iterator-define.js'
        );
        var createIterResultObject = __webpack_require__(
          /*! ../internals/create-iter-result-object */ './node_modules/core-js-pure/internals/create-iter-result-object.js'
        );
        var IS_PURE = __webpack_require__(
          /*! ../internals/is-pure */ './node_modules/core-js-pure/internals/is-pure.js'
        );
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );

        var ARRAY_ITERATOR = 'Array Iterator';
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

        // `Array.prototype.entries` method
        // https://tc39.es/ecma262/#sec-array.prototype.entries
        // `Array.prototype.keys` method
        // https://tc39.es/ecma262/#sec-array.prototype.keys
        // `Array.prototype.values` method
        // https://tc39.es/ecma262/#sec-array.prototype.values
        // `Array.prototype[@@iterator]` method
        // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
        // `CreateArrayIterator` internal method
        // https://tc39.es/ecma262/#sec-createarrayiterator
        module.exports = defineIterator(
          Array,
          'Array',
          function (iterated, kind) {
            setInternalState(this, {
              type: ARRAY_ITERATOR,
              target: toIndexedObject(iterated), // target
              index: 0, // next index
              kind: kind, // kind
            });
            // `%ArrayIteratorPrototype%.next` method
            // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
          },
          function () {
            var state = getInternalState(this);
            var target = state.target;
            var kind = state.kind;
            var index = state.index++;
            if (!target || index >= target.length) {
              state.target = undefined;
              return createIterResultObject(undefined, true);
            }
            switch (kind) {
              case 'keys':
                return createIterResultObject(index, false);
              case 'values':
                return createIterResultObject(target[index], false);
            }
            return createIterResultObject([index, target[index]], false);
          },
          'values'
        );

        // argumentsList[@@iterator] is %ArrayProto_values%
        // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
        // https://tc39.es/ecma262/#sec-createmappedargumentsobject
        var values = (Iterators.Arguments = Iterators.Array);

        // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');

        // V8 ~ Chrome 45- bug
        if (!IS_PURE && DESCRIPTORS && values.name !== 'values')
          try {
            defineProperty(values, 'name', { value: 'values' });
          } catch (error) {
            /* empty */
          }

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/es.global-this.js':
      /*!*************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/es.global-this.js ***!
  \*************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        var $ = __webpack_require__(
          /*! ../internals/export */ './node_modules/core-js-pure/internals/export.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );

        // `globalThis` object
        // https://tc39.es/ecma262/#sec-globalthis
        $(
          { global: true, forced: global.globalThis !== global },
          {
            globalThis: global,
          }
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/es.string.iterator.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/es.string.iterator.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        var charAt = __webpack_require__(
          /*! ../internals/string-multibyte */ './node_modules/core-js-pure/internals/string-multibyte.js'
        ).charAt;
        var toString = __webpack_require__(
          /*! ../internals/to-string */ './node_modules/core-js-pure/internals/to-string.js'
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ './node_modules/core-js-pure/internals/internal-state.js'
        );
        var defineIterator = __webpack_require__(
          /*! ../internals/iterator-define */ './node_modules/core-js-pure/internals/iterator-define.js'
        );
        var createIterResultObject = __webpack_require__(
          /*! ../internals/create-iter-result-object */ './node_modules/core-js-pure/internals/create-iter-result-object.js'
        );

        var STRING_ITERATOR = 'String Iterator';
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

        // `String.prototype[@@iterator]` method
        // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
        defineIterator(
          String,
          'String',
          function (iterated) {
            setInternalState(this, {
              type: STRING_ITERATOR,
              string: toString(iterated),
              index: 0,
            });
            // `%StringIteratorPrototype%.next` method
            // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
          },
          function next() {
            var state = getInternalState(this);
            var string = state.string;
            var index = state.index;
            var point;
            if (index >= string.length)
              return createIterResultObject(undefined, true);
            point = charAt(string, index);
            state.index += point.length;
            return createIterResultObject(point, false);
          }
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/esnext.global-this.js':
      /*!*****************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/esnext.global-this.js ***!
  \*****************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        // TODO: Remove from `core-js@4`
        __webpack_require__(
          /*! ../modules/es.global-this */ './node_modules/core-js-pure/modules/es.global-this.js'
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url-search-params.constructor.js':
      /*!********************************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url-search-params.constructor.js ***!
  \********************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
        __webpack_require__(
          /*! ../modules/es.array.iterator */ './node_modules/core-js-pure/modules/es.array.iterator.js'
        );
        var $ = __webpack_require__(
          /*! ../internals/export */ './node_modules/core-js-pure/internals/export.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var call = __webpack_require__(
          /*! ../internals/function-call */ './node_modules/core-js-pure/internals/function-call.js'
        );
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var USE_NATIVE_URL = __webpack_require__(
          /*! ../internals/url-constructor-detection */ './node_modules/core-js-pure/internals/url-constructor-detection.js'
        );
        var defineBuiltIn = __webpack_require__(
          /*! ../internals/define-built-in */ './node_modules/core-js-pure/internals/define-built-in.js'
        );
        var defineBuiltInAccessor = __webpack_require__(
          /*! ../internals/define-built-in-accessor */ './node_modules/core-js-pure/internals/define-built-in-accessor.js'
        );
        var defineBuiltIns = __webpack_require__(
          /*! ../internals/define-built-ins */ './node_modules/core-js-pure/internals/define-built-ins.js'
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ './node_modules/core-js-pure/internals/set-to-string-tag.js'
        );
        var createIteratorConstructor = __webpack_require__(
          /*! ../internals/iterator-create-constructor */ './node_modules/core-js-pure/internals/iterator-create-constructor.js'
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ './node_modules/core-js-pure/internals/internal-state.js'
        );
        var anInstance = __webpack_require__(
          /*! ../internals/an-instance */ './node_modules/core-js-pure/internals/an-instance.js'
        );
        var isCallable = __webpack_require__(
          /*! ../internals/is-callable */ './node_modules/core-js-pure/internals/is-callable.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ './node_modules/core-js-pure/internals/function-bind-context.js'
        );
        var classof = __webpack_require__(
          /*! ../internals/classof */ './node_modules/core-js-pure/internals/classof.js'
        );
        var anObject = __webpack_require__(
          /*! ../internals/an-object */ './node_modules/core-js-pure/internals/an-object.js'
        );
        var isObject = __webpack_require__(
          /*! ../internals/is-object */ './node_modules/core-js-pure/internals/is-object.js'
        );
        var $toString = __webpack_require__(
          /*! ../internals/to-string */ './node_modules/core-js-pure/internals/to-string.js'
        );
        var create = __webpack_require__(
          /*! ../internals/object-create */ './node_modules/core-js-pure/internals/object-create.js'
        );
        var createPropertyDescriptor = __webpack_require__(
          /*! ../internals/create-property-descriptor */ './node_modules/core-js-pure/internals/create-property-descriptor.js'
        );
        var getIterator = __webpack_require__(
          /*! ../internals/get-iterator */ './node_modules/core-js-pure/internals/get-iterator.js'
        );
        var getIteratorMethod = __webpack_require__(
          /*! ../internals/get-iterator-method */ './node_modules/core-js-pure/internals/get-iterator-method.js'
        );
        var validateArgumentsLength = __webpack_require__(
          /*! ../internals/validate-arguments-length */ './node_modules/core-js-pure/internals/validate-arguments-length.js'
        );
        var wellKnownSymbol = __webpack_require__(
          /*! ../internals/well-known-symbol */ './node_modules/core-js-pure/internals/well-known-symbol.js'
        );
        var arraySort = __webpack_require__(
          /*! ../internals/array-sort */ './node_modules/core-js-pure/internals/array-sort.js'
        );

        var ITERATOR = wellKnownSymbol('iterator');
        var URL_SEARCH_PARAMS = 'URLSearchParams';
        var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
        var setInternalState = InternalStateModule.set;
        var getInternalParamsState =
          InternalStateModule.getterFor(URL_SEARCH_PARAMS);
        var getInternalIteratorState = InternalStateModule.getterFor(
          URL_SEARCH_PARAMS_ITERATOR
        );
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

        // Avoid NodeJS experimental warning
        var safeGetBuiltIn = function (name) {
          if (!DESCRIPTORS) return global[name];
          var descriptor = getOwnPropertyDescriptor(global, name);
          return descriptor && descriptor.value;
        };

        var nativeFetch = safeGetBuiltIn('fetch');
        var NativeRequest = safeGetBuiltIn('Request');
        var Headers = safeGetBuiltIn('Headers');
        var RequestPrototype = NativeRequest && NativeRequest.prototype;
        var HeadersPrototype = Headers && Headers.prototype;
        var RegExp = global.RegExp;
        var TypeError = global.TypeError;
        var decodeURIComponent = global.decodeURIComponent;
        var encodeURIComponent = global.encodeURIComponent;
        var charAt = uncurryThis(''.charAt);
        var join = uncurryThis([].join);
        var push = uncurryThis([].push);
        var replace = uncurryThis(''.replace);
        var shift = uncurryThis([].shift);
        var splice = uncurryThis([].splice);
        var split = uncurryThis(''.split);
        var stringSlice = uncurryThis(''.slice);

        var plus = /\+/g;
        var sequences = Array(4);

        var percentSequence = function (bytes) {
          return (
            sequences[bytes - 1] ||
            (sequences[bytes - 1] = RegExp(
              '((?:%[\\da-f]{2}){' + bytes + '})',
              'gi'
            ))
          );
        };

        var percentDecode = function (sequence) {
          try {
            return decodeURIComponent(sequence);
          } catch (error) {
            return sequence;
          }
        };

        var deserialize = function (it) {
          var result = replace(it, plus, ' ');
          var bytes = 4;
          try {
            return decodeURIComponent(result);
          } catch (error) {
            while (bytes) {
              result = replace(result, percentSequence(bytes--), percentDecode);
            }
            return result;
          }
        };

        var find = /[!'()~]|%20/g;

        var replacements = {
          '!': '%21',
          "'": '%27',
          '(': '%28',
          ')': '%29',
          '~': '%7E',
          '%20': '+',
        };

        var replacer = function (match) {
          return replacements[match];
        };

        var serialize = function (it) {
          return replace(encodeURIComponent(it), find, replacer);
        };

        var URLSearchParamsIterator = createIteratorConstructor(
          function Iterator(params, kind) {
            setInternalState(this, {
              type: URL_SEARCH_PARAMS_ITERATOR,
              iterator: getIterator(getInternalParamsState(params).entries),
              kind: kind,
            });
          },
          'Iterator',
          function next() {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var step = state.iterator.next();
            var entry = step.value;
            if (!step.done) {
              step.value =
                kind === 'keys'
                  ? entry.key
                  : kind === 'values'
                  ? entry.value
                  : [entry.key, entry.value];
            }
            return step;
          },
          true
        );

        var URLSearchParamsState = function (init) {
          this.entries = [];
          this.url = null;

          if (init !== undefined) {
            if (isObject(init)) this.parseObject(init);
            else
              this.parseQuery(
                typeof init == 'string'
                  ? charAt(init, 0) === '?'
                    ? stringSlice(init, 1)
                    : init
                  : $toString(init)
              );
          }
        };

        URLSearchParamsState.prototype = {
          type: URL_SEARCH_PARAMS,
          bindURL: function (url) {
            this.url = url;
            this.update();
          },
          parseObject: function (object) {
            var iteratorMethod = getIteratorMethod(object);
            var iterator, next, step, entryIterator, entryNext, first, second;

            if (iteratorMethod) {
              iterator = getIterator(object, iteratorMethod);
              next = iterator.next;
              while (!(step = call(next, iterator)).done) {
                entryIterator = getIterator(anObject(step.value));
                entryNext = entryIterator.next;
                if (
                  (first = call(entryNext, entryIterator)).done ||
                  (second = call(entryNext, entryIterator)).done ||
                  !call(entryNext, entryIterator).done
                )
                  throw TypeError('Expected sequence with length 2');
                push(this.entries, {
                  key: $toString(first.value),
                  value: $toString(second.value),
                });
              }
            } else
              for (var key in object)
                if (hasOwn(object, key)) {
                  push(this.entries, {
                    key: key,
                    value: $toString(object[key]),
                  });
                }
          },
          parseQuery: function (query) {
            if (query) {
              var attributes = split(query, '&');
              var index = 0;
              var attribute, entry;
              while (index < attributes.length) {
                attribute = attributes[index++];
                if (attribute.length) {
                  entry = split(attribute, '=');
                  push(this.entries, {
                    key: deserialize(shift(entry)),
                    value: deserialize(join(entry, '=')),
                  });
                }
              }
            }
          },
          serialize: function () {
            var entries = this.entries;
            var result = [];
            var index = 0;
            var entry;
            while (index < entries.length) {
              entry = entries[index++];
              push(result, serialize(entry.key) + '=' + serialize(entry.value));
            }
            return join(result, '&');
          },
          update: function () {
            this.entries.length = 0;
            this.parseQuery(this.url.query);
          },
          updateURL: function () {
            if (this.url) this.url.update();
          },
        };

        // `URLSearchParams` constructor
        // https://url.spec.whatwg.org/#interface-urlsearchparams
        var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
          anInstance(this, URLSearchParamsPrototype);
          var init = arguments.length > 0 ? arguments[0] : undefined;
          var state = setInternalState(this, new URLSearchParamsState(init));
          if (!DESCRIPTORS) this.size = state.entries.length;
        };

        var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

        defineBuiltIns(
          URLSearchParamsPrototype,
          {
            // `URLSearchParams.prototype.append` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-append
            append: function append(name, value) {
              var state = getInternalParamsState(this);
              validateArgumentsLength(arguments.length, 2);
              push(state.entries, {
                key: $toString(name),
                value: $toString(value),
              });
              if (!DESCRIPTORS) this.length++;
              state.updateURL();
            },
            // `URLSearchParams.prototype.delete` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
            delete: function (name /* , value */) {
              var state = getInternalParamsState(this);
              var length = validateArgumentsLength(arguments.length, 1);
              var entries = state.entries;
              var key = $toString(name);
              var $value = length < 2 ? undefined : arguments[1];
              var value = $value === undefined ? $value : $toString($value);
              var index = 0;
              while (index < entries.length) {
                var entry = entries[index];
                if (
                  entry.key === key &&
                  (value === undefined || entry.value === value)
                ) {
                  splice(entries, index, 1);
                  if (value !== undefined) break;
                } else index++;
              }
              if (!DESCRIPTORS) this.size = entries.length;
              state.updateURL();
            },
            // `URLSearchParams.prototype.get` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-get
            get: function get(name) {
              var entries = getInternalParamsState(this).entries;
              validateArgumentsLength(arguments.length, 1);
              var key = $toString(name);
              var index = 0;
              for (; index < entries.length; index++) {
                if (entries[index].key === key) return entries[index].value;
              }
              return null;
            },
            // `URLSearchParams.prototype.getAll` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
            getAll: function getAll(name) {
              var entries = getInternalParamsState(this).entries;
              validateArgumentsLength(arguments.length, 1);
              var key = $toString(name);
              var result = [];
              var index = 0;
              for (; index < entries.length; index++) {
                if (entries[index].key === key)
                  push(result, entries[index].value);
              }
              return result;
            },
            // `URLSearchParams.prototype.has` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-has
            has: function has(name /* , value */) {
              var entries = getInternalParamsState(this).entries;
              var length = validateArgumentsLength(arguments.length, 1);
              var key = $toString(name);
              var $value = length < 2 ? undefined : arguments[1];
              var value = $value === undefined ? $value : $toString($value);
              var index = 0;
              while (index < entries.length) {
                var entry = entries[index++];
                if (
                  entry.key === key &&
                  (value === undefined || entry.value === value)
                )
                  return true;
              }
              return false;
            },
            // `URLSearchParams.prototype.set` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-set
            set: function set(name, value) {
              var state = getInternalParamsState(this);
              validateArgumentsLength(arguments.length, 1);
              var entries = state.entries;
              var found = false;
              var key = $toString(name);
              var val = $toString(value);
              var index = 0;
              var entry;
              for (; index < entries.length; index++) {
                entry = entries[index];
                if (entry.key === key) {
                  if (found) splice(entries, index--, 1);
                  else {
                    found = true;
                    entry.value = val;
                  }
                }
              }
              if (!found) push(entries, { key: key, value: val });
              if (!DESCRIPTORS) this.size = entries.length;
              state.updateURL();
            },
            // `URLSearchParams.prototype.sort` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
            sort: function sort() {
              var state = getInternalParamsState(this);
              arraySort(state.entries, function (a, b) {
                return a.key > b.key ? 1 : -1;
              });
              state.updateURL();
            },
            // `URLSearchParams.prototype.forEach` method
            forEach: function forEach(callback /* , thisArg */) {
              var entries = getInternalParamsState(this).entries;
              var boundFunction = bind(
                callback,
                arguments.length > 1 ? arguments[1] : undefined
              );
              var index = 0;
              var entry;
              while (index < entries.length) {
                entry = entries[index++];
                boundFunction(entry.value, entry.key, this);
              }
            },
            // `URLSearchParams.prototype.keys` method
            keys: function keys() {
              return new URLSearchParamsIterator(this, 'keys');
            },
            // `URLSearchParams.prototype.values` method
            values: function values() {
              return new URLSearchParamsIterator(this, 'values');
            },
            // `URLSearchParams.prototype.entries` method
            entries: function entries() {
              return new URLSearchParamsIterator(this, 'entries');
            },
          },
          { enumerable: true }
        );

        // `URLSearchParams.prototype[@@iterator]` method
        defineBuiltIn(
          URLSearchParamsPrototype,
          ITERATOR,
          URLSearchParamsPrototype.entries,
          { name: 'entries' }
        );

        // `URLSearchParams.prototype.toString` method
        // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
        defineBuiltIn(
          URLSearchParamsPrototype,
          'toString',
          function toString() {
            return getInternalParamsState(this).serialize();
          },
          { enumerable: true }
        );

        // `URLSearchParams.prototype.size` getter
        // https://github.com/whatwg/url/pull/734
        if (DESCRIPTORS)
          defineBuiltInAccessor(URLSearchParamsPrototype, 'size', {
            get: function size() {
              return getInternalParamsState(this).entries.length;
            },
            configurable: true,
            enumerable: true,
          });

        setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

        $(
          { global: true, constructor: true, forced: !USE_NATIVE_URL },
          {
            URLSearchParams: URLSearchParamsConstructor,
          }
        );

        // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
        if (!USE_NATIVE_URL && isCallable(Headers)) {
          var headersHas = uncurryThis(HeadersPrototype.has);
          var headersSet = uncurryThis(HeadersPrototype.set);

          var wrapRequestOptions = function (init) {
            if (isObject(init)) {
              var body = init.body;
              var headers;
              if (classof(body) === URL_SEARCH_PARAMS) {
                headers = init.headers
                  ? new Headers(init.headers)
                  : new Headers();
                if (!headersHas(headers, 'content-type')) {
                  headersSet(
                    headers,
                    'content-type',
                    'application/x-www-form-urlencoded;charset=UTF-8'
                  );
                }
                return create(init, {
                  body: createPropertyDescriptor(0, $toString(body)),
                  headers: createPropertyDescriptor(0, headers),
                });
              }
            }
            return init;
          };

          if (isCallable(nativeFetch)) {
            $(
              {
                global: true,
                enumerable: true,
                dontCallGetSet: true,
                forced: true,
              },
              {
                fetch: function fetch(input /* , init */) {
                  return nativeFetch(
                    input,
                    arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {}
                  );
                },
              }
            );
          }

          if (isCallable(NativeRequest)) {
            var RequestConstructor = function Request(input /* , init */) {
              anInstance(this, RequestPrototype);
              return new NativeRequest(
                input,
                arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {}
              );
            };

            RequestPrototype.constructor = RequestConstructor;
            RequestConstructor.prototype = RequestPrototype;

            $(
              {
                global: true,
                constructor: true,
                dontCallGetSet: true,
                forced: true,
              },
              {
                Request: RequestConstructor,
              }
            );
          }
        }

        module.exports = {
          URLSearchParams: URLSearchParamsConstructor,
          getState: getInternalParamsState,
        };

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url-search-params.delete.js':
      /*!***************************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url-search-params.delete.js ***!
  \***************************************************************************/
      /***/ () => {
        // empty
        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url-search-params.has.js':
      /*!************************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url-search-params.has.js ***!
  \************************************************************************/
      /***/ () => {
        // empty
        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url-search-params.js':
      /*!********************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url-search-params.js ***!
  \********************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        // TODO: Remove this module from `core-js@4` since it's replaced to module below
        __webpack_require__(
          /*! ../modules/web.url-search-params.constructor */ './node_modules/core-js-pure/modules/web.url-search-params.constructor.js'
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url-search-params.size.js':
      /*!*************************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url-search-params.size.js ***!
  \*************************************************************************/
      /***/ () => {
        // empty
        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url.can-parse.js':
      /*!****************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url.can-parse.js ***!
  \****************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        var $ = __webpack_require__(
          /*! ../internals/export */ './node_modules/core-js-pure/internals/export.js'
        );
        var getBuiltIn = __webpack_require__(
          /*! ../internals/get-built-in */ './node_modules/core-js-pure/internals/get-built-in.js'
        );
        var fails = __webpack_require__(
          /*! ../internals/fails */ './node_modules/core-js-pure/internals/fails.js'
        );
        var validateArgumentsLength = __webpack_require__(
          /*! ../internals/validate-arguments-length */ './node_modules/core-js-pure/internals/validate-arguments-length.js'
        );
        var toString = __webpack_require__(
          /*! ../internals/to-string */ './node_modules/core-js-pure/internals/to-string.js'
        );
        var USE_NATIVE_URL = __webpack_require__(
          /*! ../internals/url-constructor-detection */ './node_modules/core-js-pure/internals/url-constructor-detection.js'
        );

        var URL = getBuiltIn('URL');

        // https://github.com/nodejs/node/issues/47505
        // https://github.com/denoland/deno/issues/18893
        var THROWS_WITHOUT_ARGUMENTS =
          USE_NATIVE_URL &&
          fails(function () {
            URL.canParse();
          });

        // `URL.canParse` method
        // https://url.spec.whatwg.org/#dom-url-canparse
        $(
          { target: 'URL', stat: true, forced: !THROWS_WITHOUT_ARGUMENTS },
          {
            canParse: function canParse(url) {
              var length = validateArgumentsLength(arguments.length, 1);
              var urlString = toString(url);
              var base =
                length < 2 || arguments[1] === undefined
                  ? undefined
                  : toString(arguments[1]);
              try {
                return !!new URL(urlString, base);
              } catch (error) {
                return false;
              }
            },
          }
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url.constructor.js':
      /*!******************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url.constructor.js ***!
  \******************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
        __webpack_require__(
          /*! ../modules/es.string.iterator */ './node_modules/core-js-pure/modules/es.string.iterator.js'
        );
        var $ = __webpack_require__(
          /*! ../internals/export */ './node_modules/core-js-pure/internals/export.js'
        );
        var DESCRIPTORS = __webpack_require__(
          /*! ../internals/descriptors */ './node_modules/core-js-pure/internals/descriptors.js'
        );
        var USE_NATIVE_URL = __webpack_require__(
          /*! ../internals/url-constructor-detection */ './node_modules/core-js-pure/internals/url-constructor-detection.js'
        );
        var global = __webpack_require__(
          /*! ../internals/global */ './node_modules/core-js-pure/internals/global.js'
        );
        var bind = __webpack_require__(
          /*! ../internals/function-bind-context */ './node_modules/core-js-pure/internals/function-bind-context.js'
        );
        var uncurryThis = __webpack_require__(
          /*! ../internals/function-uncurry-this */ './node_modules/core-js-pure/internals/function-uncurry-this.js'
        );
        var defineBuiltIn = __webpack_require__(
          /*! ../internals/define-built-in */ './node_modules/core-js-pure/internals/define-built-in.js'
        );
        var defineBuiltInAccessor = __webpack_require__(
          /*! ../internals/define-built-in-accessor */ './node_modules/core-js-pure/internals/define-built-in-accessor.js'
        );
        var anInstance = __webpack_require__(
          /*! ../internals/an-instance */ './node_modules/core-js-pure/internals/an-instance.js'
        );
        var hasOwn = __webpack_require__(
          /*! ../internals/has-own-property */ './node_modules/core-js-pure/internals/has-own-property.js'
        );
        var assign = __webpack_require__(
          /*! ../internals/object-assign */ './node_modules/core-js-pure/internals/object-assign.js'
        );
        var arrayFrom = __webpack_require__(
          /*! ../internals/array-from */ './node_modules/core-js-pure/internals/array-from.js'
        );
        var arraySlice = __webpack_require__(
          /*! ../internals/array-slice-simple */ './node_modules/core-js-pure/internals/array-slice-simple.js'
        );
        var codeAt = __webpack_require__(
          /*! ../internals/string-multibyte */ './node_modules/core-js-pure/internals/string-multibyte.js'
        ).codeAt;
        var toASCII = __webpack_require__(
          /*! ../internals/string-punycode-to-ascii */ './node_modules/core-js-pure/internals/string-punycode-to-ascii.js'
        );
        var $toString = __webpack_require__(
          /*! ../internals/to-string */ './node_modules/core-js-pure/internals/to-string.js'
        );
        var setToStringTag = __webpack_require__(
          /*! ../internals/set-to-string-tag */ './node_modules/core-js-pure/internals/set-to-string-tag.js'
        );
        var validateArgumentsLength = __webpack_require__(
          /*! ../internals/validate-arguments-length */ './node_modules/core-js-pure/internals/validate-arguments-length.js'
        );
        var URLSearchParamsModule = __webpack_require__(
          /*! ../modules/web.url-search-params.constructor */ './node_modules/core-js-pure/modules/web.url-search-params.constructor.js'
        );
        var InternalStateModule = __webpack_require__(
          /*! ../internals/internal-state */ './node_modules/core-js-pure/internals/internal-state.js'
        );

        var setInternalState = InternalStateModule.set;
        var getInternalURLState = InternalStateModule.getterFor('URL');
        var URLSearchParams = URLSearchParamsModule.URLSearchParams;
        var getInternalSearchParamsState = URLSearchParamsModule.getState;

        var NativeURL = global.URL;
        var TypeError = global.TypeError;
        var parseInt = global.parseInt;
        var floor = Math.floor;
        var pow = Math.pow;
        var charAt = uncurryThis(''.charAt);
        var exec = uncurryThis(/./.exec);
        var join = uncurryThis([].join);
        var numberToString = uncurryThis((1.0).toString);
        var pop = uncurryThis([].pop);
        var push = uncurryThis([].push);
        var replace = uncurryThis(''.replace);
        var shift = uncurryThis([].shift);
        var split = uncurryThis(''.split);
        var stringSlice = uncurryThis(''.slice);
        var toLowerCase = uncurryThis(''.toLowerCase);
        var unshift = uncurryThis([].unshift);

        var INVALID_AUTHORITY = 'Invalid authority';
        var INVALID_SCHEME = 'Invalid scheme';
        var INVALID_HOST = 'Invalid host';
        var INVALID_PORT = 'Invalid port';

        var ALPHA = /[a-z]/i;
        // eslint-disable-next-line regexp/no-obscure-range -- safe
        var ALPHANUMERIC = /[\d+-.a-z]/i;
        var DIGIT = /\d/;
        var HEX_START = /^0x/i;
        var OCT = /^[0-7]+$/;
        var DEC = /^\d+$/;
        var HEX = /^[\da-f]+$/i;
        /* eslint-disable regexp/no-control-character -- safe */
        var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
        var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT =
          /[\0\t\n\r #/:<>?@[\\\]^|]/;
        var LEADING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+/;
        var TRAILING_C0_CONTROL_OR_SPACE =
          /(^|[^\u0000-\u0020])[\u0000-\u0020]+$/;
        var TAB_AND_NEW_LINE = /[\t\n\r]/g;
        /* eslint-enable regexp/no-control-character -- safe */
        var EOF;

        // https://url.spec.whatwg.org/#ipv4-number-parser
        var parseIPv4 = function (input) {
          var parts = split(input, '.');
          var partsLength, numbers, index, part, radix, number, ipv4;
          if (parts.length && parts[parts.length - 1] === '') {
            parts.length--;
          }
          partsLength = parts.length;
          if (partsLength > 4) return input;
          numbers = [];
          for (index = 0; index < partsLength; index++) {
            part = parts[index];
            if (part === '') return input;
            radix = 10;
            if (part.length > 1 && charAt(part, 0) === '0') {
              radix = exec(HEX_START, part) ? 16 : 8;
              part = stringSlice(part, radix === 8 ? 1 : 2);
            }
            if (part === '') {
              number = 0;
            } else {
              if (!exec(radix === 10 ? DEC : radix === 8 ? OCT : HEX, part))
                return input;
              number = parseInt(part, radix);
            }
            push(numbers, number);
          }
          for (index = 0; index < partsLength; index++) {
            number = numbers[index];
            if (index === partsLength - 1) {
              if (number >= pow(256, 5 - partsLength)) return null;
            } else if (number > 255) return null;
          }
          ipv4 = pop(numbers);
          for (index = 0; index < numbers.length; index++) {
            ipv4 += numbers[index] * pow(256, 3 - index);
          }
          return ipv4;
        };

        // https://url.spec.whatwg.org/#concept-ipv6-parser
        // eslint-disable-next-line max-statements -- TODO
        var parseIPv6 = function (input) {
          var address = [0, 0, 0, 0, 0, 0, 0, 0];
          var pieceIndex = 0;
          var compress = null;
          var pointer = 0;
          var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

          var chr = function () {
            return charAt(input, pointer);
          };

          if (chr() === ':') {
            if (charAt(input, 1) !== ':') return;
            pointer += 2;
            pieceIndex++;
            compress = pieceIndex;
          }
          while (chr()) {
            if (pieceIndex === 8) return;
            if (chr() === ':') {
              if (compress !== null) return;
              pointer++;
              pieceIndex++;
              compress = pieceIndex;
              continue;
            }
            value = length = 0;
            while (length < 4 && exec(HEX, chr())) {
              value = value * 16 + parseInt(chr(), 16);
              pointer++;
              length++;
            }
            if (chr() === '.') {
              if (length === 0) return;
              pointer -= length;
              if (pieceIndex > 6) return;
              numbersSeen = 0;
              while (chr()) {
                ipv4Piece = null;
                if (numbersSeen > 0) {
                  if (chr() === '.' && numbersSeen < 4) pointer++;
                  else return;
                }
                if (!exec(DIGIT, chr())) return;
                while (exec(DIGIT, chr())) {
                  number = parseInt(chr(), 10);
                  if (ipv4Piece === null) ipv4Piece = number;
                  else if (ipv4Piece === 0) return;
                  else ipv4Piece = ipv4Piece * 10 + number;
                  if (ipv4Piece > 255) return;
                  pointer++;
                }
                address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                numbersSeen++;
                if (numbersSeen === 2 || numbersSeen === 4) pieceIndex++;
              }
              if (numbersSeen !== 4) return;
              break;
            } else if (chr() === ':') {
              pointer++;
              if (!chr()) return;
            } else if (chr()) return;
            address[pieceIndex++] = value;
          }
          if (compress !== null) {
            swaps = pieceIndex - compress;
            pieceIndex = 7;
            while (pieceIndex !== 0 && swaps > 0) {
              swap = address[pieceIndex];
              address[pieceIndex--] = address[compress + swaps - 1];
              address[compress + --swaps] = swap;
            }
          } else if (pieceIndex !== 8) return;
          return address;
        };

        var findLongestZeroSequence = function (ipv6) {
          var maxIndex = null;
          var maxLength = 1;
          var currStart = null;
          var currLength = 0;
          var index = 0;
          for (; index < 8; index++) {
            if (ipv6[index] !== 0) {
              if (currLength > maxLength) {
                maxIndex = currStart;
                maxLength = currLength;
              }
              currStart = null;
              currLength = 0;
            } else {
              if (currStart === null) currStart = index;
              ++currLength;
            }
          }
          if (currLength > maxLength) {
            maxIndex = currStart;
            maxLength = currLength;
          }
          return maxIndex;
        };

        // https://url.spec.whatwg.org/#host-serializing
        var serializeHost = function (host) {
          var result, index, compress, ignore0;
          // ipv4
          if (typeof host == 'number') {
            result = [];
            for (index = 0; index < 4; index++) {
              unshift(result, host % 256);
              host = floor(host / 256);
            }
            return join(result, '.');
            // ipv6
          } else if (typeof host == 'object') {
            result = '';
            compress = findLongestZeroSequence(host);
            for (index = 0; index < 8; index++) {
              if (ignore0 && host[index] === 0) continue;
              if (ignore0) ignore0 = false;
              if (compress === index) {
                result += index ? ':' : '::';
                ignore0 = true;
              } else {
                result += numberToString(host[index], 16);
                if (index < 7) result += ':';
              }
            }
            return '[' + result + ']';
          }
          return host;
        };

        var C0ControlPercentEncodeSet = {};
        var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
          ' ': 1,
          '"': 1,
          '<': 1,
          '>': 1,
          '`': 1,
        });
        var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
          '#': 1,
          '?': 1,
          '{': 1,
          '}': 1,
        });
        var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
          '/': 1,
          ':': 1,
          ';': 1,
          '=': 1,
          '@': 1,
          '[': 1,
          '\\': 1,
          ']': 1,
          '^': 1,
          '|': 1,
        });

        var percentEncode = function (chr, set) {
          var code = codeAt(chr, 0);
          return code > 0x20 && code < 0x7f && !hasOwn(set, chr)
            ? chr
            : encodeURIComponent(chr);
        };

        // https://url.spec.whatwg.org/#special-scheme
        var specialSchemes = {
          ftp: 21,
          file: null,
          http: 80,
          https: 443,
          ws: 80,
          wss: 443,
        };

        // https://url.spec.whatwg.org/#windows-drive-letter
        var isWindowsDriveLetter = function (string, normalized) {
          var second;
          return (
            string.length === 2 &&
            exec(ALPHA, charAt(string, 0)) &&
            ((second = charAt(string, 1)) === ':' ||
              (!normalized && second === '|'))
          );
        };

        // https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
        var startsWithWindowsDriveLetter = function (string) {
          var third;
          return (
            string.length > 1 &&
            isWindowsDriveLetter(stringSlice(string, 0, 2)) &&
            (string.length === 2 ||
              (third = charAt(string, 2)) === '/' ||
              third === '\\' ||
              third === '?' ||
              third === '#')
          );
        };

        // https://url.spec.whatwg.org/#single-dot-path-segment
        var isSingleDot = function (segment) {
          return segment === '.' || toLowerCase(segment) === '%2e';
        };

        // https://url.spec.whatwg.org/#double-dot-path-segment
        var isDoubleDot = function (segment) {
          segment = toLowerCase(segment);
          return (
            segment === '..' ||
            segment === '%2e.' ||
            segment === '.%2e' ||
            segment === '%2e%2e'
          );
        };

        // States:
        var SCHEME_START = {};
        var SCHEME = {};
        var NO_SCHEME = {};
        var SPECIAL_RELATIVE_OR_AUTHORITY = {};
        var PATH_OR_AUTHORITY = {};
        var RELATIVE = {};
        var RELATIVE_SLASH = {};
        var SPECIAL_AUTHORITY_SLASHES = {};
        var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
        var AUTHORITY = {};
        var HOST = {};
        var HOSTNAME = {};
        var PORT = {};
        var FILE = {};
        var FILE_SLASH = {};
        var FILE_HOST = {};
        var PATH_START = {};
        var PATH = {};
        var CANNOT_BE_A_BASE_URL_PATH = {};
        var QUERY = {};
        var FRAGMENT = {};

        var URLState = function (url, isBase, base) {
          var urlString = $toString(url);
          var baseState, failure, searchParams;
          if (isBase) {
            failure = this.parse(urlString);
            if (failure) throw TypeError(failure);
            this.searchParams = null;
          } else {
            if (base !== undefined) baseState = new URLState(base, true);
            failure = this.parse(urlString, null, baseState);
            if (failure) throw TypeError(failure);
            searchParams = getInternalSearchParamsState(new URLSearchParams());
            searchParams.bindURL(this);
            this.searchParams = searchParams;
          }
        };

        URLState.prototype = {
          type: 'URL',
          // https://url.spec.whatwg.org/#url-parsing
          // eslint-disable-next-line max-statements -- TODO
          parse: function (input, stateOverride, base) {
            var url = this;
            var state = stateOverride || SCHEME_START;
            var pointer = 0;
            var buffer = '';
            var seenAt = false;
            var seenBracket = false;
            var seenPasswordToken = false;
            var codePoints, chr, bufferCodePoints, failure;

            input = $toString(input);

            if (!stateOverride) {
              url.scheme = '';
              url.username = '';
              url.password = '';
              url.host = null;
              url.port = null;
              url.path = [];
              url.query = null;
              url.fragment = null;
              url.cannotBeABaseURL = false;
              input = replace(input, LEADING_C0_CONTROL_OR_SPACE, '');
              input = replace(input, TRAILING_C0_CONTROL_OR_SPACE, '$1');
            }

            input = replace(input, TAB_AND_NEW_LINE, '');

            codePoints = arrayFrom(input);

            while (pointer <= codePoints.length) {
              chr = codePoints[pointer];
              switch (state) {
                case SCHEME_START:
                  if (chr && exec(ALPHA, chr)) {
                    buffer += toLowerCase(chr);
                    state = SCHEME;
                  } else if (!stateOverride) {
                    state = NO_SCHEME;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case SCHEME:
                  if (
                    chr &&
                    (exec(ALPHANUMERIC, chr) ||
                      chr === '+' ||
                      chr === '-' ||
                      chr === '.')
                  ) {
                    buffer += toLowerCase(chr);
                  } else if (chr === ':') {
                    if (
                      stateOverride &&
                      (url.isSpecial() !== hasOwn(specialSchemes, buffer) ||
                        (buffer === 'file' &&
                          (url.includesCredentials() || url.port !== null)) ||
                        (url.scheme === 'file' && !url.host))
                    )
                      return;
                    url.scheme = buffer;
                    if (stateOverride) {
                      if (
                        url.isSpecial() &&
                        specialSchemes[url.scheme] === url.port
                      )
                        url.port = null;
                      return;
                    }
                    buffer = '';
                    if (url.scheme === 'file') {
                      state = FILE;
                    } else if (
                      url.isSpecial() &&
                      base &&
                      base.scheme === url.scheme
                    ) {
                      state = SPECIAL_RELATIVE_OR_AUTHORITY;
                    } else if (url.isSpecial()) {
                      state = SPECIAL_AUTHORITY_SLASHES;
                    } else if (codePoints[pointer + 1] === '/') {
                      state = PATH_OR_AUTHORITY;
                      pointer++;
                    } else {
                      url.cannotBeABaseURL = true;
                      push(url.path, '');
                      state = CANNOT_BE_A_BASE_URL_PATH;
                    }
                  } else if (!stateOverride) {
                    buffer = '';
                    state = NO_SCHEME;
                    pointer = 0;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case NO_SCHEME:
                  if (!base || (base.cannotBeABaseURL && chr !== '#'))
                    return INVALID_SCHEME;
                  if (base.cannotBeABaseURL && chr === '#') {
                    url.scheme = base.scheme;
                    url.path = arraySlice(base.path);
                    url.query = base.query;
                    url.fragment = '';
                    url.cannotBeABaseURL = true;
                    state = FRAGMENT;
                    break;
                  }
                  state = base.scheme === 'file' ? FILE : RELATIVE;
                  continue;

                case SPECIAL_RELATIVE_OR_AUTHORITY:
                  if (chr === '/' && codePoints[pointer + 1] === '/') {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    pointer++;
                  } else {
                    state = RELATIVE;
                    continue;
                  }
                  break;

                case PATH_OR_AUTHORITY:
                  if (chr === '/') {
                    state = AUTHORITY;
                    break;
                  } else {
                    state = PATH;
                    continue;
                  }

                case RELATIVE:
                  url.scheme = base.scheme;
                  if (chr === EOF) {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = arraySlice(base.path);
                    url.query = base.query;
                  } else if (chr === '/' || (chr === '\\' && url.isSpecial())) {
                    state = RELATIVE_SLASH;
                  } else if (chr === '?') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = arraySlice(base.path);
                    url.query = '';
                    state = QUERY;
                  } else if (chr === '#') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = arraySlice(base.path);
                    url.query = base.query;
                    url.fragment = '';
                    state = FRAGMENT;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = arraySlice(base.path);
                    url.path.length--;
                    state = PATH;
                    continue;
                  }
                  break;

                case RELATIVE_SLASH:
                  if (url.isSpecial() && (chr === '/' || chr === '\\')) {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  } else if (chr === '/') {
                    state = AUTHORITY;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    state = PATH;
                    continue;
                  }
                  break;

                case SPECIAL_AUTHORITY_SLASHES:
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  if (chr !== '/' || charAt(buffer, pointer + 1) !== '/')
                    continue;
                  pointer++;
                  break;

                case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                  if (chr !== '/' && chr !== '\\') {
                    state = AUTHORITY;
                    continue;
                  }
                  break;

                case AUTHORITY:
                  if (chr === '@') {
                    if (seenAt) buffer = '%40' + buffer;
                    seenAt = true;
                    bufferCodePoints = arrayFrom(buffer);
                    for (var i = 0; i < bufferCodePoints.length; i++) {
                      var codePoint = bufferCodePoints[i];
                      if (codePoint === ':' && !seenPasswordToken) {
                        seenPasswordToken = true;
                        continue;
                      }
                      var encodedCodePoints = percentEncode(
                        codePoint,
                        userinfoPercentEncodeSet
                      );
                      if (seenPasswordToken) url.password += encodedCodePoints;
                      else url.username += encodedCodePoints;
                    }
                    buffer = '';
                  } else if (
                    chr === EOF ||
                    chr === '/' ||
                    chr === '?' ||
                    chr === '#' ||
                    (chr === '\\' && url.isSpecial())
                  ) {
                    if (seenAt && buffer === '') return INVALID_AUTHORITY;
                    pointer -= arrayFrom(buffer).length + 1;
                    buffer = '';
                    state = HOST;
                  } else buffer += chr;
                  break;

                case HOST:
                case HOSTNAME:
                  if (stateOverride && url.scheme === 'file') {
                    state = FILE_HOST;
                    continue;
                  } else if (chr === ':' && !seenBracket) {
                    if (buffer === '') return INVALID_HOST;
                    failure = url.parseHost(buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PORT;
                    if (stateOverride === HOSTNAME) return;
                  } else if (
                    chr === EOF ||
                    chr === '/' ||
                    chr === '?' ||
                    chr === '#' ||
                    (chr === '\\' && url.isSpecial())
                  ) {
                    if (url.isSpecial() && buffer === '') return INVALID_HOST;
                    if (
                      stateOverride &&
                      buffer === '' &&
                      (url.includesCredentials() || url.port !== null)
                    )
                      return;
                    failure = url.parseHost(buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PATH_START;
                    if (stateOverride) return;
                    continue;
                  } else {
                    if (chr === '[') seenBracket = true;
                    else if (chr === ']') seenBracket = false;
                    buffer += chr;
                  }
                  break;

                case PORT:
                  if (exec(DIGIT, chr)) {
                    buffer += chr;
                  } else if (
                    chr === EOF ||
                    chr === '/' ||
                    chr === '?' ||
                    chr === '#' ||
                    (chr === '\\' && url.isSpecial()) ||
                    stateOverride
                  ) {
                    if (buffer !== '') {
                      var port = parseInt(buffer, 10);
                      if (port > 0xffff) return INVALID_PORT;
                      url.port =
                        url.isSpecial() && port === specialSchemes[url.scheme]
                          ? null
                          : port;
                      buffer = '';
                    }
                    if (stateOverride) return;
                    state = PATH_START;
                    continue;
                  } else return INVALID_PORT;
                  break;

                case FILE:
                  url.scheme = 'file';
                  if (chr === '/' || chr === '\\') state = FILE_SLASH;
                  else if (base && base.scheme === 'file') {
                    switch (chr) {
                      case EOF:
                        url.host = base.host;
                        url.path = arraySlice(base.path);
                        url.query = base.query;
                        break;
                      case '?':
                        url.host = base.host;
                        url.path = arraySlice(base.path);
                        url.query = '';
                        state = QUERY;
                        break;
                      case '#':
                        url.host = base.host;
                        url.path = arraySlice(base.path);
                        url.query = base.query;
                        url.fragment = '';
                        state = FRAGMENT;
                        break;
                      default:
                        if (
                          !startsWithWindowsDriveLetter(
                            join(arraySlice(codePoints, pointer), '')
                          )
                        ) {
                          url.host = base.host;
                          url.path = arraySlice(base.path);
                          url.shortenPath();
                        }
                        state = PATH;
                        continue;
                    }
                  } else {
                    state = PATH;
                    continue;
                  }
                  break;

                case FILE_SLASH:
                  if (chr === '/' || chr === '\\') {
                    state = FILE_HOST;
                    break;
                  }
                  if (
                    base &&
                    base.scheme === 'file' &&
                    !startsWithWindowsDriveLetter(
                      join(arraySlice(codePoints, pointer), '')
                    )
                  ) {
                    if (isWindowsDriveLetter(base.path[0], true))
                      push(url.path, base.path[0]);
                    else url.host = base.host;
                  }
                  state = PATH;
                  continue;

                case FILE_HOST:
                  if (
                    chr === EOF ||
                    chr === '/' ||
                    chr === '\\' ||
                    chr === '?' ||
                    chr === '#'
                  ) {
                    if (!stateOverride && isWindowsDriveLetter(buffer)) {
                      state = PATH;
                    } else if (buffer === '') {
                      url.host = '';
                      if (stateOverride) return;
                      state = PATH_START;
                    } else {
                      failure = url.parseHost(buffer);
                      if (failure) return failure;
                      if (url.host === 'localhost') url.host = '';
                      if (stateOverride) return;
                      buffer = '';
                      state = PATH_START;
                    }
                    continue;
                  } else buffer += chr;
                  break;

                case PATH_START:
                  if (url.isSpecial()) {
                    state = PATH;
                    if (chr !== '/' && chr !== '\\') continue;
                  } else if (!stateOverride && chr === '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (!stateOverride && chr === '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (chr !== EOF) {
                    state = PATH;
                    if (chr !== '/') continue;
                  }
                  break;

                case PATH:
                  if (
                    chr === EOF ||
                    chr === '/' ||
                    (chr === '\\' && url.isSpecial()) ||
                    (!stateOverride && (chr === '?' || chr === '#'))
                  ) {
                    if (isDoubleDot(buffer)) {
                      url.shortenPath();
                      if (chr !== '/' && !(chr === '\\' && url.isSpecial())) {
                        push(url.path, '');
                      }
                    } else if (isSingleDot(buffer)) {
                      if (chr !== '/' && !(chr === '\\' && url.isSpecial())) {
                        push(url.path, '');
                      }
                    } else {
                      if (
                        url.scheme === 'file' &&
                        !url.path.length &&
                        isWindowsDriveLetter(buffer)
                      ) {
                        if (url.host) url.host = '';
                        buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
                      }
                      push(url.path, buffer);
                    }
                    buffer = '';
                    if (
                      url.scheme === 'file' &&
                      (chr === EOF || chr === '?' || chr === '#')
                    ) {
                      while (url.path.length > 1 && url.path[0] === '') {
                        shift(url.path);
                      }
                    }
                    if (chr === '?') {
                      url.query = '';
                      state = QUERY;
                    } else if (chr === '#') {
                      url.fragment = '';
                      state = FRAGMENT;
                    }
                  } else {
                    buffer += percentEncode(chr, pathPercentEncodeSet);
                  }
                  break;

                case CANNOT_BE_A_BASE_URL_PATH:
                  if (chr === '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (chr === '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (chr !== EOF) {
                    url.path[0] += percentEncode(
                      chr,
                      C0ControlPercentEncodeSet
                    );
                  }
                  break;

                case QUERY:
                  if (!stateOverride && chr === '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (chr !== EOF) {
                    if (chr === "'" && url.isSpecial()) url.query += '%27';
                    else if (chr === '#') url.query += '%23';
                    else
                      url.query += percentEncode(
                        chr,
                        C0ControlPercentEncodeSet
                      );
                  }
                  break;

                case FRAGMENT:
                  if (chr !== EOF)
                    url.fragment += percentEncode(
                      chr,
                      fragmentPercentEncodeSet
                    );
                  break;
              }

              pointer++;
            }
          },
          // https://url.spec.whatwg.org/#host-parsing
          parseHost: function (input) {
            var result, codePoints, index;
            if (charAt(input, 0) === '[') {
              if (charAt(input, input.length - 1) !== ']') return INVALID_HOST;
              result = parseIPv6(stringSlice(input, 1, -1));
              if (!result) return INVALID_HOST;
              this.host = result;
              // opaque host
            } else if (!this.isSpecial()) {
              if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
                return INVALID_HOST;
              result = '';
              codePoints = arrayFrom(input);
              for (index = 0; index < codePoints.length; index++) {
                result += percentEncode(
                  codePoints[index],
                  C0ControlPercentEncodeSet
                );
              }
              this.host = result;
            } else {
              input = toASCII(input);
              if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
              result = parseIPv4(input);
              if (result === null) return INVALID_HOST;
              this.host = result;
            }
          },
          // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
          cannotHaveUsernamePasswordPort: function () {
            return (
              !this.host || this.cannotBeABaseURL || this.scheme === 'file'
            );
          },
          // https://url.spec.whatwg.org/#include-credentials
          includesCredentials: function () {
            return this.username !== '' || this.password !== '';
          },
          // https://url.spec.whatwg.org/#is-special
          isSpecial: function () {
            return hasOwn(specialSchemes, this.scheme);
          },
          // https://url.spec.whatwg.org/#shorten-a-urls-path
          shortenPath: function () {
            var path = this.path;
            var pathSize = path.length;
            if (
              pathSize &&
              (this.scheme !== 'file' ||
                pathSize !== 1 ||
                !isWindowsDriveLetter(path[0], true))
            ) {
              path.length--;
            }
          },
          // https://url.spec.whatwg.org/#concept-url-serializer
          serialize: function () {
            var url = this;
            var scheme = url.scheme;
            var username = url.username;
            var password = url.password;
            var host = url.host;
            var port = url.port;
            var path = url.path;
            var query = url.query;
            var fragment = url.fragment;
            var output = scheme + ':';
            if (host !== null) {
              output += '//';
              if (url.includesCredentials()) {
                output += username + (password ? ':' + password : '') + '@';
              }
              output += serializeHost(host);
              if (port !== null) output += ':' + port;
            } else if (scheme === 'file') output += '//';
            output += url.cannotBeABaseURL
              ? path[0]
              : path.length
              ? '/' + join(path, '/')
              : '';
            if (query !== null) output += '?' + query;
            if (fragment !== null) output += '#' + fragment;
            return output;
          },
          // https://url.spec.whatwg.org/#dom-url-href
          setHref: function (href) {
            var failure = this.parse(href);
            if (failure) throw TypeError(failure);
            this.searchParams.update();
          },
          // https://url.spec.whatwg.org/#dom-url-origin
          getOrigin: function () {
            var scheme = this.scheme;
            var port = this.port;
            if (scheme === 'blob')
              try {
                return new URLConstructor(scheme.path[0]).origin;
              } catch (error) {
                return 'null';
              }
            if (scheme === 'file' || !this.isSpecial()) return 'null';
            return (
              scheme +
              '://' +
              serializeHost(this.host) +
              (port !== null ? ':' + port : '')
            );
          },
          // https://url.spec.whatwg.org/#dom-url-protocol
          getProtocol: function () {
            return this.scheme + ':';
          },
          setProtocol: function (protocol) {
            this.parse($toString(protocol) + ':', SCHEME_START);
          },
          // https://url.spec.whatwg.org/#dom-url-username
          getUserNamePostAuthor: function () {
            return this.username;
          },
          setUsername: function (username) {
            var codePoints = arrayFrom($toString(username));
            if (this.cannotHaveUsernamePasswordPort()) return;
            this.username = '';
            for (var i = 0; i < codePoints.length; i++) {
              this.username += percentEncode(
                codePoints[i],
                userinfoPercentEncodeSet
              );
            }
          },
          // https://url.spec.whatwg.org/#dom-url-password
          getPassword: function () {
            return this.password;
          },
          setPassword: function (password) {
            var codePoints = arrayFrom($toString(password));
            if (this.cannotHaveUsernamePasswordPort()) return;
            this.password = '';
            for (var i = 0; i < codePoints.length; i++) {
              this.password += percentEncode(
                codePoints[i],
                userinfoPercentEncodeSet
              );
            }
          },
          // https://url.spec.whatwg.org/#dom-url-host
          getHost: function () {
            var host = this.host;
            var port = this.port;
            return host === null
              ? ''
              : port === null
              ? serializeHost(host)
              : serializeHost(host) + ':' + port;
          },
          setHost: function (host) {
            if (this.cannotBeABaseURL) return;
            this.parse(host, HOST);
          },
          // https://url.spec.whatwg.org/#dom-url-hostname
          getHostname: function () {
            var host = this.host;
            return host === null ? '' : serializeHost(host);
          },
          setHostname: function (hostname) {
            if (this.cannotBeABaseURL) return;
            this.parse(hostname, HOSTNAME);
          },
          // https://url.spec.whatwg.org/#dom-url-port
          getPort: function () {
            var port = this.port;
            return port === null ? '' : $toString(port);
          },
          setPort: function (port) {
            if (this.cannotHaveUsernamePasswordPort()) return;
            port = $toString(port);
            if (port === '') this.port = null;
            else this.parse(port, PORT);
          },
          // https://url.spec.whatwg.org/#dom-url-pathname
          getPathname: function () {
            var path = this.path;
            return this.cannotBeABaseURL
              ? path[0]
              : path.length
              ? '/' + join(path, '/')
              : '';
          },
          setPathname: function (pathname) {
            if (this.cannotBeABaseURL) return;
            this.path = [];
            this.parse(pathname, PATH_START);
          },
          // https://url.spec.whatwg.org/#dom-url-search
          getSearch: function () {
            var query = this.query;
            return query ? '?' + query : '';
          },
          setSearch: function (search) {
            search = $toString(search);
            if (search === '') {
              this.query = null;
            } else {
              if (charAt(search, 0) === '?') search = stringSlice(search, 1);
              this.query = '';
              this.parse(search, QUERY);
            }
            this.searchParams.update();
          },
          // https://url.spec.whatwg.org/#dom-url-searchparams
          getSearchParams: function () {
            return this.searchParams.facade;
          },
          // https://url.spec.whatwg.org/#dom-url-hash
          getHash: function () {
            var fragment = this.fragment;
            return fragment ? '#' + fragment : '';
          },
          setHash: function (hash) {
            hash = $toString(hash);
            if (hash === '') {
              this.fragment = null;
              return;
            }
            if (charAt(hash, 0) === '#') hash = stringSlice(hash, 1);
            this.fragment = '';
            this.parse(hash, FRAGMENT);
          },
          update: function () {
            this.query = this.searchParams.serialize() || null;
          },
        };

        // `URL` constructor
        // https://url.spec.whatwg.org/#url-class
        var URLConstructor = function URL(url /* , base */) {
          var that = anInstance(this, URLPrototype);
          var base =
            validateArgumentsLength(arguments.length, 1) > 1
              ? arguments[1]
              : undefined;
          var state = setInternalState(that, new URLState(url, false, base));
          if (!DESCRIPTORS) {
            that.href = state.serialize();
            that.origin = state.getOrigin();
            that.protocol = state.getProtocol();
            that.username = state.getUserNamePostAuthor();
            that.password = state.getPassword();
            that.host = state.getHost();
            that.hostname = state.getHostname();
            that.port = state.getPort();
            that.pathname = state.getPathname();
            that.search = state.getSearch();
            that.searchParams = state.getSearchParams();
            that.hash = state.getHash();
          }
        };

        var URLPrototype = URLConstructor.prototype;

        var accessorDescriptor = function (getter, setter) {
          return {
            get: function () {
              return getInternalURLState(this)[getter]();
            },
            set:
              setter &&
              function (value) {
                return getInternalURLState(this)[setter](value);
              },
            configurable: true,
            enumerable: true,
          };
        };

        if (DESCRIPTORS) {
          // `URL.prototype.href` accessors pair
          // https://url.spec.whatwg.org/#dom-url-href
          defineBuiltInAccessor(
            URLPrototype,
            'href',
            accessorDescriptor('serialize', 'setHref')
          );
          // `URL.prototype.origin` getter
          // https://url.spec.whatwg.org/#dom-url-origin
          defineBuiltInAccessor(
            URLPrototype,
            'origin',
            accessorDescriptor('getOrigin')
          );
          // `URL.prototype.protocol` accessors pair
          // https://url.spec.whatwg.org/#dom-url-protocol
          defineBuiltInAccessor(
            URLPrototype,
            'protocol',
            accessorDescriptor('getProtocol', 'setProtocol')
          );
          // `URL.prototype.username` accessors pair
          // https://url.spec.whatwg.org/#dom-url-username
          defineBuiltInAccessor(
            URLPrototype,
            'username',
            accessorDescriptor('getUserNamePostAuthor', 'setUsername')
          );
          // `URL.prototype.password` accessors pair
          // https://url.spec.whatwg.org/#dom-url-password
          defineBuiltInAccessor(
            URLPrototype,
            'password',
            accessorDescriptor('getPassword', 'setPassword')
          );
          // `URL.prototype.host` accessors pair
          // https://url.spec.whatwg.org/#dom-url-host
          defineBuiltInAccessor(
            URLPrototype,
            'host',
            accessorDescriptor('getHost', 'setHost')
          );
          // `URL.prototype.hostname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hostname
          defineBuiltInAccessor(
            URLPrototype,
            'hostname',
            accessorDescriptor('getHostname', 'setHostname')
          );
          // `URL.prototype.port` accessors pair
          // https://url.spec.whatwg.org/#dom-url-port
          defineBuiltInAccessor(
            URLPrototype,
            'port',
            accessorDescriptor('getPort', 'setPort')
          );
          // `URL.prototype.pathname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-pathname
          defineBuiltInAccessor(
            URLPrototype,
            'pathname',
            accessorDescriptor('getPathname', 'setPathname')
          );
          // `URL.prototype.search` accessors pair
          // https://url.spec.whatwg.org/#dom-url-search
          defineBuiltInAccessor(
            URLPrototype,
            'search',
            accessorDescriptor('getSearch', 'setSearch')
          );
          // `URL.prototype.searchParams` getter
          // https://url.spec.whatwg.org/#dom-url-searchparams
          defineBuiltInAccessor(
            URLPrototype,
            'searchParams',
            accessorDescriptor('getSearchParams')
          );
          // `URL.prototype.hash` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hash
          defineBuiltInAccessor(
            URLPrototype,
            'hash',
            accessorDescriptor('getHash', 'setHash')
          );
        }

        // `URL.prototype.toJSON` method
        // https://url.spec.whatwg.org/#dom-url-tojson
        defineBuiltIn(
          URLPrototype,
          'toJSON',
          function toJSON() {
            return getInternalURLState(this).serialize();
          },
          { enumerable: true }
        );

        // `URL.prototype.toString` method
        // https://url.spec.whatwg.org/#URL-stringification-behavior
        defineBuiltIn(
          URLPrototype,
          'toString',
          function toString() {
            return getInternalURLState(this).serialize();
          },
          { enumerable: true }
        );

        if (NativeURL) {
          var nativeCreateObjectURL = NativeURL.createObjectURL;
          var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
          // `URL.createObjectURL` method
          // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
          if (nativeCreateObjectURL)
            defineBuiltIn(
              URLConstructor,
              'createObjectURL',
              bind(nativeCreateObjectURL, NativeURL)
            );
          // `URL.revokeObjectURL` method
          // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
          if (nativeRevokeObjectURL)
            defineBuiltIn(
              URLConstructor,
              'revokeObjectURL',
              bind(nativeRevokeObjectURL, NativeURL)
            );
        }

        setToStringTag(URLConstructor, 'URL');

        $(
          {
            global: true,
            constructor: true,
            forced: !USE_NATIVE_URL,
            sham: !DESCRIPTORS,
          },
          {
            URL: URLConstructor,
          }
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url.js':
      /*!******************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url.js ***!
  \******************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        'use strict';

        // TODO: Remove this module from `core-js@4` since it's replaced to module below
        __webpack_require__(
          /*! ../modules/web.url.constructor */ './node_modules/core-js-pure/modules/web.url.constructor.js'
        );

        /***/
      },

    /***/ './node_modules/core-js-pure/modules/web.url.to-json.js':
      /*!**************************************************************!*\
  !*** ./node_modules/core-js-pure/modules/web.url.to-json.js ***!
  \**************************************************************/
      /***/ () => {
        // empty
        /***/
      },

    /***/ './node_modules/core-js-pure/stable/global-this.js':
      /*!*********************************************************!*\
  !*** ./node_modules/core-js-pure/stable/global-this.js ***!
  \*********************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        var parent = __webpack_require__(
          /*! ../es/global-this */ './node_modules/core-js-pure/es/global-this.js'
        );

        module.exports = parent;

        /***/
      },

    /***/ './node_modules/core-js-pure/web/url-search-params.js':
      /*!************************************************************!*\
  !*** ./node_modules/core-js-pure/web/url-search-params.js ***!
  \************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        __webpack_require__(
          /*! ../modules/web.url-search-params */ './node_modules/core-js-pure/modules/web.url-search-params.js'
        );
        __webpack_require__(
          /*! ../modules/web.url-search-params.delete */ './node_modules/core-js-pure/modules/web.url-search-params.delete.js'
        );
        __webpack_require__(
          /*! ../modules/web.url-search-params.has */ './node_modules/core-js-pure/modules/web.url-search-params.has.js'
        );
        __webpack_require__(
          /*! ../modules/web.url-search-params.size */ './node_modules/core-js-pure/modules/web.url-search-params.size.js'
        );
        var path = __webpack_require__(
          /*! ../internals/path */ './node_modules/core-js-pure/internals/path.js'
        );

        module.exports = path.URLSearchParams;

        /***/
      },

    /***/ './node_modules/core-js-pure/web/url.js':
      /*!**********************************************!*\
  !*** ./node_modules/core-js-pure/web/url.js ***!
  \**********************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        __webpack_require__(
          /*! ./url-search-params */ './node_modules/core-js-pure/web/url-search-params.js'
        );
        __webpack_require__(
          /*! ../modules/web.url */ './node_modules/core-js-pure/modules/web.url.js'
        );
        __webpack_require__(
          /*! ../modules/web.url.can-parse */ './node_modules/core-js-pure/modules/web.url.can-parse.js'
        );
        __webpack_require__(
          /*! ../modules/web.url.to-json */ './node_modules/core-js-pure/modules/web.url.to-json.js'
        );
        var path = __webpack_require__(
          /*! ../internals/path */ './node_modules/core-js-pure/internals/path.js'
        );

        module.exports = path.URL;

        /***/
      },

    /***/ './node_modules/diff-match-patch/index.js':
      /*!************************************************!*\
  !*** ./node_modules/diff-match-patch/index.js ***!
  \************************************************/
      /***/ (module) => {
        /**
         * Diff Match and Patch
         * Copyright 2018 The diff-match-patch Authors.
         * https://github.com/google/diff-match-patch
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         *   http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         */

        /**
         * @fileoverview Computes the difference between two texts to create a patch.
         * Applies the patch onto another text, allowing for errors.
         * @author fraser@google.com (Neil Fraser)
         */

        /**
         * Class containing the diff, match and patch methods.
         * @constructor
         */
        var diff_match_patch = function () {
          // Defaults.
          // Redefine these in your program to override the defaults.

          // Number of seconds to map a diff before giving up (0 for infinity).
          this.Diff_Timeout = 1.0;
          // Cost of an empty edit operation in terms of edit characters.
          this.Diff_EditCost = 4;
          // At what point is no match declared (0.0 = perfection, 1.0 = very loose).
          this.Match_Threshold = 0.5;
          // How far to search for a match (0 = exact location, 1000+ = broad match).
          // A match this many characters away from the expected location will add
          // 1.0 to the score (0.0 is a perfect match).
          this.Match_Distance = 1000;
          // When deleting a large block of text (over ~64 characters), how close do
          // the contents have to be to match the expected contents. (0.0 = perfection,
          // 1.0 = very loose).  Note that Match_Threshold controls how closely the
          // end points of a delete need to match.
          this.Patch_DeleteThreshold = 0.5;
          // Chunk size for context length.
          this.Patch_Margin = 4;

          // The number of bits in an int.
          this.Match_MaxBits = 32;
        };

        //  DIFF FUNCTIONS

        /**
         * The data structure representing a diff is an array of tuples:
         * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
         * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
         */
        var DIFF_DELETE = -1;
        var DIFF_INSERT = 1;
        var DIFF_EQUAL = 0;

        /**
         * Class representing one diff tuple.
         * ~Attempts to look like a two-element array (which is what this used to be).~
         * Constructor returns an actual two-element array, to allow destructing @JackuB
         * See https://github.com/JackuB/diff-match-patch/issues/14 for details
         * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.
         * @param {string} text Text to be deleted, inserted, or retained.
         * @constructor
         */
        diff_match_patch.Diff = function (op, text) {
          return [op, text];
        };

        /**
         * Find the differences between two texts.  Simplifies the problem by stripping
         * any common prefix or suffix off the texts before diffing.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {boolean=} opt_checklines Optional speedup flag. If present and false,
         *     then don't run a line-level diff first to identify the changed areas.
         *     Defaults to true, which does a faster, slightly less optimal diff.
         * @param {number=} opt_deadline Optional time when the diff should be complete
         *     by.  Used internally for recursive calls.  Users should set DiffTimeout
         *     instead.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         */
        diff_match_patch.prototype.diff_main = function (
          text1,
          text2,
          opt_checklines,
          opt_deadline
        ) {
          // Set a deadline by which time the diff must be complete.
          if (typeof opt_deadline == 'undefined') {
            if (this.Diff_Timeout <= 0) {
              opt_deadline = Number.MAX_VALUE;
            } else {
              opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;
            }
          }
          var deadline = opt_deadline;

          // Check for null inputs.
          if (text1 == null || text2 == null) {
            throw new Error('Null input. (diff_main)');
          }

          // Check for equality (speedup).
          if (text1 == text2) {
            if (text1) {
              return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];
            }
            return [];
          }

          if (typeof opt_checklines == 'undefined') {
            opt_checklines = true;
          }
          var checklines = opt_checklines;

          // Trim off common prefix (speedup).
          var commonlength = this.diff_commonPrefix(text1, text2);
          var commonprefix = text1.substring(0, commonlength);
          text1 = text1.substring(commonlength);
          text2 = text2.substring(commonlength);

          // Trim off common suffix (speedup).
          commonlength = this.diff_commonSuffix(text1, text2);
          var commonsuffix = text1.substring(text1.length - commonlength);
          text1 = text1.substring(0, text1.length - commonlength);
          text2 = text2.substring(0, text2.length - commonlength);

          // Compute the diff on the middle block.
          var diffs = this.diff_compute_(text1, text2, checklines, deadline);

          // Restore the prefix and suffix.
          if (commonprefix) {
            diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));
          }
          if (commonsuffix) {
            diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));
          }
          this.diff_cleanupMerge(diffs);
          return diffs;
        };

        /**
         * Find the differences between two texts.  Assumes that the texts do not
         * have any common prefix or suffix.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {boolean} checklines Speedup flag.  If false, then don't run a
         *     line-level diff first to identify the changed areas.
         *     If true, then run a faster, slightly less optimal diff.
         * @param {number} deadline Time when the diff should be complete by.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_match_patch.prototype.diff_compute_ = function (
          text1,
          text2,
          checklines,
          deadline
        ) {
          var diffs;

          if (!text1) {
            // Just add some text (speedup).
            return [new diff_match_patch.Diff(DIFF_INSERT, text2)];
          }

          if (!text2) {
            // Just delete some text (speedup).
            return [new diff_match_patch.Diff(DIFF_DELETE, text1)];
          }

          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          var i = longtext.indexOf(shorttext);
          if (i != -1) {
            // Shorter text is inside the longer text (speedup).
            diffs = [
              new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),
              new diff_match_patch.Diff(DIFF_EQUAL, shorttext),
              new diff_match_patch.Diff(
                DIFF_INSERT,
                longtext.substring(i + shorttext.length)
              ),
            ];
            // Swap insertions for deletions if diff is reversed.
            if (text1.length > text2.length) {
              diffs[0][0] = diffs[2][0] = DIFF_DELETE;
            }
            return diffs;
          }

          if (shorttext.length == 1) {
            // Single character string.
            // After the previous speedup, the character can't be an equality.
            return [
              new diff_match_patch.Diff(DIFF_DELETE, text1),
              new diff_match_patch.Diff(DIFF_INSERT, text2),
            ];
          }

          // Check to see if the problem can be split in two.
          var hm = this.diff_halfMatch_(text1, text2);
          if (hm) {
            // A half-match was found, sort out the return data.
            var text1_a = hm[0];
            var text1_b = hm[1];
            var text2_a = hm[2];
            var text2_b = hm[3];
            var mid_common = hm[4];
            // Send both pairs off for separate processing.
            var diffs_a = this.diff_main(
              text1_a,
              text2_a,
              checklines,
              deadline
            );
            var diffs_b = this.diff_main(
              text1_b,
              text2_b,
              checklines,
              deadline
            );
            // Merge the results.
            return diffs_a.concat(
              [new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],
              diffs_b
            );
          }

          if (checklines && text1.length > 100 && text2.length > 100) {
            return this.diff_lineMode_(text1, text2, deadline);
          }

          return this.diff_bisect_(text1, text2, deadline);
        };

        /**
         * Do a quick line-level diff on both strings, then rediff the parts for
         * greater accuracy.
         * This speedup can produce non-minimal diffs.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} deadline Time when the diff should be complete by.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_match_patch.prototype.diff_lineMode_ = function (
          text1,
          text2,
          deadline
        ) {
          // Scan the text on a line-by-line basis first.
          var a = this.diff_linesToChars_(text1, text2);
          text1 = a.chars1;
          text2 = a.chars2;
          var linearray = a.lineArray;

          var diffs = this.diff_main(text1, text2, false, deadline);

          // Convert the diff back to original text.
          this.diff_charsToLines_(diffs, linearray);
          // Eliminate freak matches (e.g. blank lines)
          this.diff_cleanupSemantic(diffs);

          // Rediff any replacement blocks, this time character-by-character.
          // Add a dummy entry at the end.
          diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));
          var pointer = 0;
          var count_delete = 0;
          var count_insert = 0;
          var text_delete = '';
          var text_insert = '';
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                break;
              case DIFF_EQUAL:
                // Upon reaching an equality, check for prior redundancies.
                if (count_delete >= 1 && count_insert >= 1) {
                  // Delete the offending records and add the merged ones.
                  diffs.splice(
                    pointer - count_delete - count_insert,
                    count_delete + count_insert
                  );
                  pointer = pointer - count_delete - count_insert;
                  var subDiff = this.diff_main(
                    text_delete,
                    text_insert,
                    false,
                    deadline
                  );
                  for (var j = subDiff.length - 1; j >= 0; j--) {
                    diffs.splice(pointer, 0, subDiff[j]);
                  }
                  pointer = pointer + subDiff.length;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = '';
                text_insert = '';
                break;
            }
            pointer++;
          }
          diffs.pop(); // Remove the dummy entry at the end.

          return diffs;
        };

        /**
         * Find the 'middle snake' of a diff, split the problem in two
         * and return the recursively constructed diff.
         * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} deadline Time at which to bail if not yet complete.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_match_patch.prototype.diff_bisect_ = function (
          text1,
          text2,
          deadline
        ) {
          // Cache the text lengths to prevent multiple calls.
          var text1_length = text1.length;
          var text2_length = text2.length;
          var max_d = Math.ceil((text1_length + text2_length) / 2);
          var v_offset = max_d;
          var v_length = 2 * max_d;
          var v1 = new Array(v_length);
          var v2 = new Array(v_length);
          // Setting all elements to -1 is faster in Chrome & Firefox than mixing
          // integers and undefined.
          for (var x = 0; x < v_length; x++) {
            v1[x] = -1;
            v2[x] = -1;
          }
          v1[v_offset + 1] = 0;
          v2[v_offset + 1] = 0;
          var delta = text1_length - text2_length;
          // If the total number of characters is odd, then the front path will collide
          // with the reverse path.
          var front = delta % 2 != 0;
          // Offsets for start and end of k loop.
          // Prevents mapping of space beyond the grid.
          var k1start = 0;
          var k1end = 0;
          var k2start = 0;
          var k2end = 0;
          for (var d = 0; d < max_d; d++) {
            // Bail out if deadline is reached.
            if (new Date().getTime() > deadline) {
              break;
            }

            // Walk the front path one step.
            for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
              var k1_offset = v_offset + k1;
              var x1;
              if (
                k1 == -d ||
                (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])
              ) {
                x1 = v1[k1_offset + 1];
              } else {
                x1 = v1[k1_offset - 1] + 1;
              }
              var y1 = x1 - k1;
              while (
                x1 < text1_length &&
                y1 < text2_length &&
                text1.charAt(x1) == text2.charAt(y1)
              ) {
                x1++;
                y1++;
              }
              v1[k1_offset] = x1;
              if (x1 > text1_length) {
                // Ran off the right of the graph.
                k1end += 2;
              } else if (y1 > text2_length) {
                // Ran off the bottom of the graph.
                k1start += 2;
              } else if (front) {
                var k2_offset = v_offset + delta - k1;
                if (
                  k2_offset >= 0 &&
                  k2_offset < v_length &&
                  v2[k2_offset] != -1
                ) {
                  // Mirror x2 onto top-left coordinate system.
                  var x2 = text1_length - v2[k2_offset];
                  if (x1 >= x2) {
                    // Overlap detected.
                    return this.diff_bisectSplit_(
                      text1,
                      text2,
                      x1,
                      y1,
                      deadline
                    );
                  }
                }
              }
            }

            // Walk the reverse path one step.
            for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
              var k2_offset = v_offset + k2;
              var x2;
              if (
                k2 == -d ||
                (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])
              ) {
                x2 = v2[k2_offset + 1];
              } else {
                x2 = v2[k2_offset - 1] + 1;
              }
              var y2 = x2 - k2;
              while (
                x2 < text1_length &&
                y2 < text2_length &&
                text1.charAt(text1_length - x2 - 1) ==
                  text2.charAt(text2_length - y2 - 1)
              ) {
                x2++;
                y2++;
              }
              v2[k2_offset] = x2;
              if (x2 > text1_length) {
                // Ran off the left of the graph.
                k2end += 2;
              } else if (y2 > text2_length) {
                // Ran off the top of the graph.
                k2start += 2;
              } else if (!front) {
                var k1_offset = v_offset + delta - k2;
                if (
                  k1_offset >= 0 &&
                  k1_offset < v_length &&
                  v1[k1_offset] != -1
                ) {
                  var x1 = v1[k1_offset];
                  var y1 = v_offset + x1 - k1_offset;
                  // Mirror x2 onto top-left coordinate system.
                  x2 = text1_length - x2;
                  if (x1 >= x2) {
                    // Overlap detected.
                    return this.diff_bisectSplit_(
                      text1,
                      text2,
                      x1,
                      y1,
                      deadline
                    );
                  }
                }
              }
            }
          }
          // Diff took too long and hit the deadline or
          // number of diffs equals number of characters, no commonality at all.
          return [
            new diff_match_patch.Diff(DIFF_DELETE, text1),
            new diff_match_patch.Diff(DIFF_INSERT, text2),
          ];
        };

        /**
         * Given the location of the 'middle snake', split the diff in two parts
         * and recurse.
         * @param {string} text1 Old string to be diffed.
         * @param {string} text2 New string to be diffed.
         * @param {number} x Index of split point in text1.
         * @param {number} y Index of split point in text2.
         * @param {number} deadline Time at which to bail if not yet complete.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @private
         */
        diff_match_patch.prototype.diff_bisectSplit_ = function (
          text1,
          text2,
          x,
          y,
          deadline
        ) {
          var text1a = text1.substring(0, x);
          var text2a = text2.substring(0, y);
          var text1b = text1.substring(x);
          var text2b = text2.substring(y);

          // Compute both diffs serially.
          var diffs = this.diff_main(text1a, text2a, false, deadline);
          var diffsb = this.diff_main(text1b, text2b, false, deadline);

          return diffs.concat(diffsb);
        };

        /**
         * Split two texts into an array of strings.  Reduce the texts to a string of
         * hashes where each Unicode character represents one line.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}
         *     An object containing the encoded text1, the encoded text2 and
         *     the array of unique strings.
         *     The zeroth element of the array of unique strings is intentionally blank.
         * @private
         */
        diff_match_patch.prototype.diff_linesToChars_ = function (
          text1,
          text2
        ) {
          var lineArray = []; // e.g. lineArray[4] == 'Hello\n'
          var lineHash = {}; // e.g. lineHash['Hello\n'] == 4

          // '\x00' is a valid character, but various debuggers don't like it.
          // So we'll insert a junk entry to avoid generating a null character.
          lineArray[0] = '';

          /**
           * Split a text into an array of strings.  Reduce the texts to a string of
           * hashes where each Unicode character represents one line.
           * Modifies linearray and linehash through being a closure.
           * @param {string} text String to encode.
           * @return {string} Encoded string.
           * @private
           */
          function diff_linesToCharsMunge_(text) {
            var chars = '';
            // Walk the text, pulling out a substring for each line.
            // text.split('\n') would would temporarily double our memory footprint.
            // Modifying text would create many large strings to garbage collect.
            var lineStart = 0;
            var lineEnd = -1;
            // Keeping our own length variable is faster than looking it up.
            var lineArrayLength = lineArray.length;
            while (lineEnd < text.length - 1) {
              lineEnd = text.indexOf('\n', lineStart);
              if (lineEnd == -1) {
                lineEnd = text.length - 1;
              }
              var line = text.substring(lineStart, lineEnd + 1);

              if (
                lineHash.hasOwnProperty
                  ? lineHash.hasOwnProperty(line)
                  : lineHash[line] !== undefined
              ) {
                chars += String.fromCharCode(lineHash[line]);
              } else {
                if (lineArrayLength == maxLines) {
                  // Bail out at 65535 because
                  // String.fromCharCode(65536) == String.fromCharCode(0)
                  line = text.substring(lineStart);
                  lineEnd = text.length;
                }
                chars += String.fromCharCode(lineArrayLength);
                lineHash[line] = lineArrayLength;
                lineArray[lineArrayLength++] = line;
              }
              lineStart = lineEnd + 1;
            }
            return chars;
          }
          // Allocate 2/3rds of the space for text1, the rest for text2.
          var maxLines = 40000;
          var chars1 = diff_linesToCharsMunge_(text1);
          maxLines = 65535;
          var chars2 = diff_linesToCharsMunge_(text2);
          return { chars1: chars1, chars2: chars2, lineArray: lineArray };
        };

        /**
         * Rehydrate the text in a diff from a string of line hashes to real lines of
         * text.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @param {!Array.<string>} lineArray Array of unique strings.
         * @private
         */
        diff_match_patch.prototype.diff_charsToLines_ = function (
          diffs,
          lineArray
        ) {
          for (var i = 0; i < diffs.length; i++) {
            var chars = diffs[i][1];
            var text = [];
            for (var j = 0; j < chars.length; j++) {
              text[j] = lineArray[chars.charCodeAt(j)];
            }
            diffs[i][1] = text.join('');
          }
        };

        /**
         * Determine the common prefix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the start of each
         *     string.
         */
        diff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {
          // Quick check for common null cases.
          if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
            return 0;
          }
          // Binary search.
          // Performance analysis: https://neil.fraser.name/news/2007/10/09/
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerstart = 0;
          while (pointermin < pointermid) {
            if (
              text1.substring(pointerstart, pointermid) ==
              text2.substring(pointerstart, pointermid)
            ) {
              pointermin = pointermid;
              pointerstart = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        };

        /**
         * Determine the common suffix of two strings.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the end of each string.
         */
        diff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {
          // Quick check for common null cases.
          if (
            !text1 ||
            !text2 ||
            text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)
          ) {
            return 0;
          }
          // Binary search.
          // Performance analysis: https://neil.fraser.name/news/2007/10/09/
          var pointermin = 0;
          var pointermax = Math.min(text1.length, text2.length);
          var pointermid = pointermax;
          var pointerend = 0;
          while (pointermin < pointermid) {
            if (
              text1.substring(
                text1.length - pointermid,
                text1.length - pointerend
              ) ==
              text2.substring(
                text2.length - pointermid,
                text2.length - pointerend
              )
            ) {
              pointermin = pointermid;
              pointerend = pointermin;
            } else {
              pointermax = pointermid;
            }
            pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
          }
          return pointermid;
        };

        /**
         * Determine if the suffix of one string is the prefix of another.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {number} The number of characters common to the end of the first
         *     string and the start of the second string.
         * @private
         */
        diff_match_patch.prototype.diff_commonOverlap_ = function (
          text1,
          text2
        ) {
          // Cache the text lengths to prevent multiple calls.
          var text1_length = text1.length;
          var text2_length = text2.length;
          // Eliminate the null case.
          if (text1_length == 0 || text2_length == 0) {
            return 0;
          }
          // Truncate the longer string.
          if (text1_length > text2_length) {
            text1 = text1.substring(text1_length - text2_length);
          } else if (text1_length < text2_length) {
            text2 = text2.substring(0, text1_length);
          }
          var text_length = Math.min(text1_length, text2_length);
          // Quick check for the worst case.
          if (text1 == text2) {
            return text_length;
          }

          // Start by looking for a single character match
          // and increase length until no match is found.
          // Performance analysis: https://neil.fraser.name/news/2010/11/04/
          var best = 0;
          var length = 1;
          while (true) {
            var pattern = text1.substring(text_length - length);
            var found = text2.indexOf(pattern);
            if (found == -1) {
              return best;
            }
            length += found;
            if (
              found == 0 ||
              text1.substring(text_length - length) ==
                text2.substring(0, length)
            ) {
              best = length;
              length++;
            }
          }
        };

        /**
         * Do the two texts share a substring which is at least half the length of the
         * longer text?
         * This speedup can produce non-minimal diffs.
         * @param {string} text1 First string.
         * @param {string} text2 Second string.
         * @return {Array.<string>} Five element Array, containing the prefix of
         *     text1, the suffix of text1, the prefix of text2, the suffix of
         *     text2 and the common middle.  Or null if there was no match.
         * @private
         */
        diff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {
          if (this.Diff_Timeout <= 0) {
            // Don't risk returning a non-optimal diff if we have unlimited time.
            return null;
          }
          var longtext = text1.length > text2.length ? text1 : text2;
          var shorttext = text1.length > text2.length ? text2 : text1;
          if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
            return null; // Pointless.
          }
          var dmp = this; // 'this' becomes 'window' in a closure.

          /**
           * Does a substring of shorttext exist within longtext such that the substring
           * is at least half the length of longtext?
           * Closure, but does not reference any external variables.
           * @param {string} longtext Longer string.
           * @param {string} shorttext Shorter string.
           * @param {number} i Start index of quarter length substring within longtext.
           * @return {Array.<string>} Five element Array, containing the prefix of
           *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
           *     of shorttext and the common middle.  Or null if there was no match.
           * @private
           */
          function diff_halfMatchI_(longtext, shorttext, i) {
            // Start with a 1/4 length substring at position i as a seed.
            var seed = longtext.substring(
              i,
              i + Math.floor(longtext.length / 4)
            );
            var j = -1;
            var best_common = '';
            var best_longtext_a,
              best_longtext_b,
              best_shorttext_a,
              best_shorttext_b;
            while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
              var prefixLength = dmp.diff_commonPrefix(
                longtext.substring(i),
                shorttext.substring(j)
              );
              var suffixLength = dmp.diff_commonSuffix(
                longtext.substring(0, i),
                shorttext.substring(0, j)
              );
              if (best_common.length < suffixLength + prefixLength) {
                best_common =
                  shorttext.substring(j - suffixLength, j) +
                  shorttext.substring(j, j + prefixLength);
                best_longtext_a = longtext.substring(0, i - suffixLength);
                best_longtext_b = longtext.substring(i + prefixLength);
                best_shorttext_a = shorttext.substring(0, j - suffixLength);
                best_shorttext_b = shorttext.substring(j + prefixLength);
              }
            }
            if (best_common.length * 2 >= longtext.length) {
              return [
                best_longtext_a,
                best_longtext_b,
                best_shorttext_a,
                best_shorttext_b,
                best_common,
              ];
            } else {
              return null;
            }
          }

          // First check if the second quarter is the seed for a half-match.
          var hm1 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 4)
          );
          // Check again based on the third quarter.
          var hm2 = diff_halfMatchI_(
            longtext,
            shorttext,
            Math.ceil(longtext.length / 2)
          );
          var hm;
          if (!hm1 && !hm2) {
            return null;
          } else if (!hm2) {
            hm = hm1;
          } else if (!hm1) {
            hm = hm2;
          } else {
            // Both matched.  Select the longest.
            hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
          }

          // A half-match was found, sort out the return data.
          var text1_a, text1_b, text2_a, text2_b;
          if (text1.length > text2.length) {
            text1_a = hm[0];
            text1_b = hm[1];
            text2_a = hm[2];
            text2_b = hm[3];
          } else {
            text2_a = hm[0];
            text2_b = hm[1];
            text1_a = hm[2];
            text1_b = hm[3];
          }
          var mid_common = hm[4];
          return [text1_a, text1_b, text2_a, text2_b, mid_common];
        };

        /**
         * Reduce the number of edits by eliminating semantically trivial equalities.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {
          var changes = false;
          var equalities = []; // Stack of indices where equalities are found.
          var equalitiesLength = 0; // Keeping our own length var is faster in JS.
          /** @type {?string} */
          var lastEquality = null;
          // Always equal to diffs[equalities[equalitiesLength - 1]][1]
          var pointer = 0; // Index of current position.
          // Number of characters that changed prior to the equality.
          var length_insertions1 = 0;
          var length_deletions1 = 0;
          // Number of characters that changed after the equality.
          var length_insertions2 = 0;
          var length_deletions2 = 0;
          while (pointer < diffs.length) {
            if (diffs[pointer][0] == DIFF_EQUAL) {
              // Equality found.
              equalities[equalitiesLength++] = pointer;
              length_insertions1 = length_insertions2;
              length_deletions1 = length_deletions2;
              length_insertions2 = 0;
              length_deletions2 = 0;
              lastEquality = diffs[pointer][1];
            } else {
              // An insertion or deletion.
              if (diffs[pointer][0] == DIFF_INSERT) {
                length_insertions2 += diffs[pointer][1].length;
              } else {
                length_deletions2 += diffs[pointer][1].length;
              }
              // Eliminate an equality that is smaller or equal to the edits on both
              // sides of it.
              if (
                lastEquality &&
                lastEquality.length <=
                  Math.max(length_insertions1, length_deletions1) &&
                lastEquality.length <=
                  Math.max(length_insertions2, length_deletions2)
              ) {
                // Duplicate record.
                diffs.splice(
                  equalities[equalitiesLength - 1],
                  0,
                  new diff_match_patch.Diff(DIFF_DELETE, lastEquality)
                );
                // Change second copy to insert.
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                // Throw away the equality we just deleted.
                equalitiesLength--;
                // Throw away the previous equality (it needs to be reevaluated).
                equalitiesLength--;
                pointer =
                  equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                length_insertions1 = 0; // Reset the counters.
                length_deletions1 = 0;
                length_insertions2 = 0;
                length_deletions2 = 0;
                lastEquality = null;
                changes = true;
              }
            }
            pointer++;
          }

          // Normalize the diff.
          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
          this.diff_cleanupSemanticLossless(diffs);

          // Find any overlaps between deletions and insertions.
          // e.g: <del>abcxxx</del><ins>xxxdef</ins>
          //   -> <del>abc</del>xxx<ins>def</ins>
          // e.g: <del>xxxabc</del><ins>defxxx</ins>
          //   -> <ins>def</ins>xxx<del>abc</del>
          // Only extract an overlap if it is as big as the edit ahead or behind it.
          pointer = 1;
          while (pointer < diffs.length) {
            if (
              diffs[pointer - 1][0] == DIFF_DELETE &&
              diffs[pointer][0] == DIFF_INSERT
            ) {
              var deletion = diffs[pointer - 1][1];
              var insertion = diffs[pointer][1];
              var overlap_length1 = this.diff_commonOverlap_(
                deletion,
                insertion
              );
              var overlap_length2 = this.diff_commonOverlap_(
                insertion,
                deletion
              );
              if (overlap_length1 >= overlap_length2) {
                if (
                  overlap_length1 >= deletion.length / 2 ||
                  overlap_length1 >= insertion.length / 2
                ) {
                  // Overlap found.  Insert an equality and trim the surrounding edits.
                  diffs.splice(
                    pointer,
                    0,
                    new diff_match_patch.Diff(
                      DIFF_EQUAL,
                      insertion.substring(0, overlap_length1)
                    )
                  );
                  diffs[pointer - 1][1] = deletion.substring(
                    0,
                    deletion.length - overlap_length1
                  );
                  diffs[pointer + 1][1] = insertion.substring(overlap_length1);
                  pointer++;
                }
              } else {
                if (
                  overlap_length2 >= deletion.length / 2 ||
                  overlap_length2 >= insertion.length / 2
                ) {
                  // Reverse overlap found.
                  // Insert an equality and swap and trim the surrounding edits.
                  diffs.splice(
                    pointer,
                    0,
                    new diff_match_patch.Diff(
                      DIFF_EQUAL,
                      deletion.substring(0, overlap_length2)
                    )
                  );
                  diffs[pointer - 1][0] = DIFF_INSERT;
                  diffs[pointer - 1][1] = insertion.substring(
                    0,
                    insertion.length - overlap_length2
                  );
                  diffs[pointer + 1][0] = DIFF_DELETE;
                  diffs[pointer + 1][1] = deletion.substring(overlap_length2);
                  pointer++;
                }
              }
              pointer++;
            }
            pointer++;
          }
        };

        /**
         * Look for single edits surrounded on both sides by equalities
         * which can be shifted sideways to align the edit to a word boundary.
         * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_match_patch.prototype.diff_cleanupSemanticLossless = function (
          diffs
        ) {
          /**
           * Given two strings, compute a score representing whether the internal
           * boundary falls on logical boundaries.
           * Scores range from 6 (best) to 0 (worst).
           * Closure, but does not reference any external variables.
           * @param {string} one First string.
           * @param {string} two Second string.
           * @return {number} The score.
           * @private
           */
          function diff_cleanupSemanticScore_(one, two) {
            if (!one || !two) {
              // Edges are the best.
              return 6;
            }

            // Each port of this function behaves slightly differently due to
            // subtle differences in each language's definition of things like
            // 'whitespace'.  Since this function's purpose is largely cosmetic,
            // the choice has been made to use each language's native features
            // rather than force total conformity.
            var char1 = one.charAt(one.length - 1);
            var char2 = two.charAt(0);
            var nonAlphaNumeric1 = char1.match(
              diff_match_patch.nonAlphaNumericRegex_
            );
            var nonAlphaNumeric2 = char2.match(
              diff_match_patch.nonAlphaNumericRegex_
            );
            var whitespace1 =
              nonAlphaNumeric1 &&
              char1.match(diff_match_patch.whitespaceRegex_);
            var whitespace2 =
              nonAlphaNumeric2 &&
              char2.match(diff_match_patch.whitespaceRegex_);
            var lineBreak1 =
              whitespace1 && char1.match(diff_match_patch.linebreakRegex_);
            var lineBreak2 =
              whitespace2 && char2.match(diff_match_patch.linebreakRegex_);
            var blankLine1 =
              lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);
            var blankLine2 =
              lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);

            if (blankLine1 || blankLine2) {
              // Five points for blank lines.
              return 5;
            } else if (lineBreak1 || lineBreak2) {
              // Four points for line breaks.
              return 4;
            } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
              // Three points for end of sentences.
              return 3;
            } else if (whitespace1 || whitespace2) {
              // Two points for whitespace.
              return 2;
            } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
              // One point for non-alphanumeric.
              return 1;
            }
            return 0;
          }

          var pointer = 1;
          // Intentionally ignore the first and last element (don't need checking).
          while (pointer < diffs.length - 1) {
            if (
              diffs[pointer - 1][0] == DIFF_EQUAL &&
              diffs[pointer + 1][0] == DIFF_EQUAL
            ) {
              // This is a single edit surrounded by equalities.
              var equality1 = diffs[pointer - 1][1];
              var edit = diffs[pointer][1];
              var equality2 = diffs[pointer + 1][1];

              // First, shift the edit as far left as possible.
              var commonOffset = this.diff_commonSuffix(equality1, edit);
              if (commonOffset) {
                var commonString = edit.substring(edit.length - commonOffset);
                equality1 = equality1.substring(
                  0,
                  equality1.length - commonOffset
                );
                edit =
                  commonString + edit.substring(0, edit.length - commonOffset);
                equality2 = commonString + equality2;
              }

              // Second, step character by character right, looking for the best fit.
              var bestEquality1 = equality1;
              var bestEdit = edit;
              var bestEquality2 = equality2;
              var bestScore =
                diff_cleanupSemanticScore_(equality1, edit) +
                diff_cleanupSemanticScore_(edit, equality2);
              while (edit.charAt(0) === equality2.charAt(0)) {
                equality1 += edit.charAt(0);
                edit = edit.substring(1) + equality2.charAt(0);
                equality2 = equality2.substring(1);
                var score =
                  diff_cleanupSemanticScore_(equality1, edit) +
                  diff_cleanupSemanticScore_(edit, equality2);
                // The >= encourages trailing rather than leading whitespace on edits.
                if (score >= bestScore) {
                  bestScore = score;
                  bestEquality1 = equality1;
                  bestEdit = edit;
                  bestEquality2 = equality2;
                }
              }

              if (diffs[pointer - 1][1] != bestEquality1) {
                // We have an improvement, save it back to the diff.
                if (bestEquality1) {
                  diffs[pointer - 1][1] = bestEquality1;
                } else {
                  diffs.splice(pointer - 1, 1);
                  pointer--;
                }
                diffs[pointer][1] = bestEdit;
                if (bestEquality2) {
                  diffs[pointer + 1][1] = bestEquality2;
                } else {
                  diffs.splice(pointer + 1, 1);
                  pointer--;
                }
              }
            }
            pointer++;
          }
        };

        // Define some regex patterns for matching boundaries.
        diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
        diff_match_patch.whitespaceRegex_ = /\s/;
        diff_match_patch.linebreakRegex_ = /[\r\n]/;
        diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
        diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;

        /**
         * Reduce the number of edits by eliminating operationally trivial equalities.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {
          var changes = false;
          var equalities = []; // Stack of indices where equalities are found.
          var equalitiesLength = 0; // Keeping our own length var is faster in JS.
          /** @type {?string} */
          var lastEquality = null;
          // Always equal to diffs[equalities[equalitiesLength - 1]][1]
          var pointer = 0; // Index of current position.
          // Is there an insertion operation before the last equality.
          var pre_ins = false;
          // Is there a deletion operation before the last equality.
          var pre_del = false;
          // Is there an insertion operation after the last equality.
          var post_ins = false;
          // Is there a deletion operation after the last equality.
          var post_del = false;
          while (pointer < diffs.length) {
            if (diffs[pointer][0] == DIFF_EQUAL) {
              // Equality found.
              if (
                diffs[pointer][1].length < this.Diff_EditCost &&
                (post_ins || post_del)
              ) {
                // Candidate found.
                equalities[equalitiesLength++] = pointer;
                pre_ins = post_ins;
                pre_del = post_del;
                lastEquality = diffs[pointer][1];
              } else {
                // Not a candidate, and can never become one.
                equalitiesLength = 0;
                lastEquality = null;
              }
              post_ins = post_del = false;
            } else {
              // An insertion or deletion.
              if (diffs[pointer][0] == DIFF_DELETE) {
                post_del = true;
              } else {
                post_ins = true;
              }
              /*
               * Five types to be split:
               * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
               * <ins>A</ins>X<ins>C</ins><del>D</del>
               * <ins>A</ins><del>B</del>X<ins>C</ins>
               * <ins>A</del>X<ins>C</ins><del>D</del>
               * <ins>A</ins><del>B</del>X<del>C</del>
               */
              if (
                lastEquality &&
                ((pre_ins && pre_del && post_ins && post_del) ||
                  (lastEquality.length < this.Diff_EditCost / 2 &&
                    pre_ins + pre_del + post_ins + post_del == 3))
              ) {
                // Duplicate record.
                diffs.splice(
                  equalities[equalitiesLength - 1],
                  0,
                  new diff_match_patch.Diff(DIFF_DELETE, lastEquality)
                );
                // Change second copy to insert.
                diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                equalitiesLength--; // Throw away the equality we just deleted;
                lastEquality = null;
                if (pre_ins && pre_del) {
                  // No changes made which could affect previous entry, keep going.
                  post_ins = post_del = true;
                  equalitiesLength = 0;
                } else {
                  equalitiesLength--; // Throw away the previous equality.
                  pointer =
                    equalitiesLength > 0
                      ? equalities[equalitiesLength - 1]
                      : -1;
                  post_ins = post_del = false;
                }
                changes = true;
              }
            }
            pointer++;
          }

          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
        };

        /**
         * Reorder and merge like edit sections.  Merge equalities.
         * Any edit section can move as long as it doesn't cross an equality.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         */
        diff_match_patch.prototype.diff_cleanupMerge = function (diffs) {
          // Add a dummy entry at the end.
          diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));
          var pointer = 0;
          var count_delete = 0;
          var count_insert = 0;
          var text_delete = '';
          var text_insert = '';
          var commonlength;
          while (pointer < diffs.length) {
            switch (diffs[pointer][0]) {
              case DIFF_INSERT:
                count_insert++;
                text_insert += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_DELETE:
                count_delete++;
                text_delete += diffs[pointer][1];
                pointer++;
                break;
              case DIFF_EQUAL:
                // Upon reaching an equality, check for prior redundancies.
                if (count_delete + count_insert > 1) {
                  if (count_delete !== 0 && count_insert !== 0) {
                    // Factor out any common prefixies.
                    commonlength = this.diff_commonPrefix(
                      text_insert,
                      text_delete
                    );
                    if (commonlength !== 0) {
                      if (
                        pointer - count_delete - count_insert > 0 &&
                        diffs[pointer - count_delete - count_insert - 1][0] ==
                          DIFF_EQUAL
                      ) {
                        diffs[pointer - count_delete - count_insert - 1][1] +=
                          text_insert.substring(0, commonlength);
                      } else {
                        diffs.splice(
                          0,
                          0,
                          new diff_match_patch.Diff(
                            DIFF_EQUAL,
                            text_insert.substring(0, commonlength)
                          )
                        );
                        pointer++;
                      }
                      text_insert = text_insert.substring(commonlength);
                      text_delete = text_delete.substring(commonlength);
                    }
                    // Factor out any common suffixies.
                    commonlength = this.diff_commonSuffix(
                      text_insert,
                      text_delete
                    );
                    if (commonlength !== 0) {
                      diffs[pointer][1] =
                        text_insert.substring(
                          text_insert.length - commonlength
                        ) + diffs[pointer][1];
                      text_insert = text_insert.substring(
                        0,
                        text_insert.length - commonlength
                      );
                      text_delete = text_delete.substring(
                        0,
                        text_delete.length - commonlength
                      );
                    }
                  }
                  // Delete the offending records and add the merged ones.
                  pointer -= count_delete + count_insert;
                  diffs.splice(pointer, count_delete + count_insert);
                  if (text_delete.length) {
                    diffs.splice(
                      pointer,
                      0,
                      new diff_match_patch.Diff(DIFF_DELETE, text_delete)
                    );
                    pointer++;
                  }
                  if (text_insert.length) {
                    diffs.splice(
                      pointer,
                      0,
                      new diff_match_patch.Diff(DIFF_INSERT, text_insert)
                    );
                    pointer++;
                  }
                  pointer++;
                } else if (
                  pointer !== 0 &&
                  diffs[pointer - 1][0] == DIFF_EQUAL
                ) {
                  // Merge this equality with the previous one.
                  diffs[pointer - 1][1] += diffs[pointer][1];
                  diffs.splice(pointer, 1);
                } else {
                  pointer++;
                }
                count_insert = 0;
                count_delete = 0;
                text_delete = '';
                text_insert = '';
                break;
            }
          }
          if (diffs[diffs.length - 1][1] === '') {
            diffs.pop(); // Remove the dummy entry at the end.
          }

          // Second pass: look for single edits surrounded on both sides by equalities
          // which can be shifted sideways to eliminate an equality.
          // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
          var changes = false;
          pointer = 1;
          // Intentionally ignore the first and last element (don't need checking).
          while (pointer < diffs.length - 1) {
            if (
              diffs[pointer - 1][0] == DIFF_EQUAL &&
              diffs[pointer + 1][0] == DIFF_EQUAL
            ) {
              // This is a single edit surrounded by equalities.
              if (
                diffs[pointer][1].substring(
                  diffs[pointer][1].length - diffs[pointer - 1][1].length
                ) == diffs[pointer - 1][1]
              ) {
                // Shift the edit over the previous equality.
                diffs[pointer][1] =
                  diffs[pointer - 1][1] +
                  diffs[pointer][1].substring(
                    0,
                    diffs[pointer][1].length - diffs[pointer - 1][1].length
                  );
                diffs[pointer + 1][1] =
                  diffs[pointer - 1][1] + diffs[pointer + 1][1];
                diffs.splice(pointer - 1, 1);
                changes = true;
              } else if (
                diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==
                diffs[pointer + 1][1]
              ) {
                // Shift the edit over the next equality.
                diffs[pointer - 1][1] += diffs[pointer + 1][1];
                diffs[pointer][1] =
                  diffs[pointer][1].substring(diffs[pointer + 1][1].length) +
                  diffs[pointer + 1][1];
                diffs.splice(pointer + 1, 1);
                changes = true;
              }
            }
            pointer++;
          }
          // If shifts were made, the diff needs reordering and another shift sweep.
          if (changes) {
            this.diff_cleanupMerge(diffs);
          }
        };

        /**
         * loc is a location in text1, compute and return the equivalent location in
         * text2.
         * e.g. 'The cat' vs 'The big cat', 1->1, 5->8
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @param {number} loc Location within text1.
         * @return {number} Location within text2.
         */
        diff_match_patch.prototype.diff_xIndex = function (diffs, loc) {
          var chars1 = 0;
          var chars2 = 0;
          var last_chars1 = 0;
          var last_chars2 = 0;
          var x;
          for (x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_INSERT) {
              // Equality or deletion.
              chars1 += diffs[x][1].length;
            }
            if (diffs[x][0] !== DIFF_DELETE) {
              // Equality or insertion.
              chars2 += diffs[x][1].length;
            }
            if (chars1 > loc) {
              // Overshot the location.
              break;
            }
            last_chars1 = chars1;
            last_chars2 = chars2;
          }
          // Was the location was deleted?
          if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
            return last_chars2;
          }
          // Add the remaining character length.
          return last_chars2 + (loc - last_chars1);
        };

        /**
         * Convert a diff array into a pretty HTML report.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} HTML representation.
         */
        diff_match_patch.prototype.diff_prettyHtml = function (diffs) {
          var html = [];
          var pattern_amp = /&/g;
          var pattern_lt = /</g;
          var pattern_gt = />/g;
          var pattern_para = /\n/g;
          for (var x = 0; x < diffs.length; x++) {
            var op = diffs[x][0]; // Operation (insert, delete, equal)
            var data = diffs[x][1]; // Text of change.
            var text = data
              .replace(pattern_amp, '&amp;')
              .replace(pattern_lt, '&lt;')
              .replace(pattern_gt, '&gt;')
              .replace(pattern_para, '&para;<br>');
            switch (op) {
              case DIFF_INSERT:
                html[x] = '<ins style="background:#e6ffe6;">' + text + '</ins>';
                break;
              case DIFF_DELETE:
                html[x] = '<del style="background:#ffe6e6;">' + text + '</del>';
                break;
              case DIFF_EQUAL:
                html[x] = '<span>' + text + '</span>';
                break;
            }
          }
          return html.join('');
        };

        /**
         * Compute and return the source text (all equalities and deletions).
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Source text.
         */
        diff_match_patch.prototype.diff_text1 = function (diffs) {
          var text = [];
          for (var x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_INSERT) {
              text[x] = diffs[x][1];
            }
          }
          return text.join('');
        };

        /**
         * Compute and return the destination text (all equalities and insertions).
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Destination text.
         */
        diff_match_patch.prototype.diff_text2 = function (diffs) {
          var text = [];
          for (var x = 0; x < diffs.length; x++) {
            if (diffs[x][0] !== DIFF_DELETE) {
              text[x] = diffs[x][1];
            }
          }
          return text.join('');
        };

        /**
         * Compute the Levenshtein distance; the number of inserted, deleted or
         * substituted characters.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {number} Number of changes.
         */
        diff_match_patch.prototype.diff_levenshtein = function (diffs) {
          var levenshtein = 0;
          var insertions = 0;
          var deletions = 0;
          for (var x = 0; x < diffs.length; x++) {
            var op = diffs[x][0];
            var data = diffs[x][1];
            switch (op) {
              case DIFF_INSERT:
                insertions += data.length;
                break;
              case DIFF_DELETE:
                deletions += data.length;
                break;
              case DIFF_EQUAL:
                // A deletion and an insertion is one substitution.
                levenshtein += Math.max(insertions, deletions);
                insertions = 0;
                deletions = 0;
                break;
            }
          }
          levenshtein += Math.max(insertions, deletions);
          return levenshtein;
        };

        /**
         * Crush the diff into an encoded string which describes the operations
         * required to transform text1 into text2.
         * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
         * Operations are tab-separated.  Inserted text is escaped using %xx notation.
         * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.
         * @return {string} Delta text.
         */
        diff_match_patch.prototype.diff_toDelta = function (diffs) {
          var text = [];
          for (var x = 0; x < diffs.length; x++) {
            switch (diffs[x][0]) {
              case DIFF_INSERT:
                text[x] = '+' + encodeURI(diffs[x][1]);
                break;
              case DIFF_DELETE:
                text[x] = '-' + diffs[x][1].length;
                break;
              case DIFF_EQUAL:
                text[x] = '=' + diffs[x][1].length;
                break;
            }
          }
          return text.join('\t').replace(/%20/g, ' ');
        };

        /**
         * Given the original text1, and an encoded string which describes the
         * operations required to transform text1 into text2, compute the full diff.
         * @param {string} text1 Source string for the diff.
         * @param {string} delta Delta text.
         * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.
         * @throws {!Error} If invalid input.
         */
        diff_match_patch.prototype.diff_fromDelta = function (text1, delta) {
          var diffs = [];
          var diffsLength = 0; // Keeping our own length var is faster in JS.
          var pointer = 0; // Cursor in text1
          var tokens = delta.split(/\t/g);
          for (var x = 0; x < tokens.length; x++) {
            // Each token begins with a one character parameter which specifies the
            // operation of this token (delete, insert, equality).
            var param = tokens[x].substring(1);
            switch (tokens[x].charAt(0)) {
              case '+':
                try {
                  diffs[diffsLength++] = new diff_match_patch.Diff(
                    DIFF_INSERT,
                    decodeURI(param)
                  );
                } catch (ex) {
                  // Malformed URI sequence.
                  throw new Error('Illegal escape in diff_fromDelta: ' + param);
                }
                break;
              case '-':
              // Fall through.
              case '=':
                var n = parseInt(param, 10);
                if (isNaN(n) || n < 0) {
                  throw new Error('Invalid number in diff_fromDelta: ' + param);
                }
                var text = text1.substring(pointer, (pointer += n));
                if (tokens[x].charAt(0) == '=') {
                  diffs[diffsLength++] = new diff_match_patch.Diff(
                    DIFF_EQUAL,
                    text
                  );
                } else {
                  diffs[diffsLength++] = new diff_match_patch.Diff(
                    DIFF_DELETE,
                    text
                  );
                }
                break;
              default:
                // Blank tokens are ok (from a trailing \t).
                // Anything else is an error.
                if (tokens[x]) {
                  throw new Error(
                    'Invalid diff operation in diff_fromDelta: ' + tokens[x]
                  );
                }
            }
          }
          if (pointer != text1.length) {
            throw new Error(
              'Delta length (' +
                pointer +
                ') does not equal source text length (' +
                text1.length +
                ').'
            );
          }
          return diffs;
        };

        //  MATCH FUNCTIONS

        /**
         * Locate the best instance of 'pattern' in 'text' near 'loc'.
         * @param {string} text The text to search.
         * @param {string} pattern The pattern to search for.
         * @param {number} loc The location to search around.
         * @return {number} Best match index or -1.
         */
        diff_match_patch.prototype.match_main = function (text, pattern, loc) {
          // Check for null inputs.
          if (text == null || pattern == null || loc == null) {
            throw new Error('Null input. (match_main)');
          }

          loc = Math.max(0, Math.min(loc, text.length));
          if (text == pattern) {
            // Shortcut (potentially not guaranteed by the algorithm)
            return 0;
          } else if (!text.length) {
            // Nothing to match.
            return -1;
          } else if (text.substring(loc, loc + pattern.length) == pattern) {
            // Perfect match at the perfect spot!  (Includes case of null pattern)
            return loc;
          } else {
            // Do a fuzzy compare.
            return this.match_bitap_(text, pattern, loc);
          }
        };

        /**
         * Locate the best instance of 'pattern' in 'text' near 'loc' using the
         * Bitap algorithm.
         * @param {string} text The text to search.
         * @param {string} pattern The pattern to search for.
         * @param {number} loc The location to search around.
         * @return {number} Best match index or -1.
         * @private
         */
        diff_match_patch.prototype.match_bitap_ = function (
          text,
          pattern,
          loc
        ) {
          if (pattern.length > this.Match_MaxBits) {
            throw new Error('Pattern too long for this browser.');
          }

          // Initialise the alphabet.
          var s = this.match_alphabet_(pattern);

          var dmp = this; // 'this' becomes 'window' in a closure.

          /**
           * Compute and return the score for a match with e errors and x location.
           * Accesses loc and pattern through being a closure.
           * @param {number} e Number of errors in match.
           * @param {number} x Location of match.
           * @return {number} Overall score for match (0.0 = good, 1.0 = bad).
           * @private
           */
          function match_bitapScore_(e, x) {
            var accuracy = e / pattern.length;
            var proximity = Math.abs(loc - x);
            if (!dmp.Match_Distance) {
              // Dodge divide by zero error.
              return proximity ? 1.0 : accuracy;
            }
            return accuracy + proximity / dmp.Match_Distance;
          }

          // Highest score beyond which we give up.
          var score_threshold = this.Match_Threshold;
          // Is there a nearby exact match? (speedup)
          var best_loc = text.indexOf(pattern, loc);
          if (best_loc != -1) {
            score_threshold = Math.min(
              match_bitapScore_(0, best_loc),
              score_threshold
            );
            // What about in the other direction? (speedup)
            best_loc = text.lastIndexOf(pattern, loc + pattern.length);
            if (best_loc != -1) {
              score_threshold = Math.min(
                match_bitapScore_(0, best_loc),
                score_threshold
              );
            }
          }

          // Initialise the bit arrays.
          var matchmask = 1 << (pattern.length - 1);
          best_loc = -1;

          var bin_min, bin_mid;
          var bin_max = pattern.length + text.length;
          var last_rd;
          for (var d = 0; d < pattern.length; d++) {
            // Scan for the best match; each iteration allows for one more error.
            // Run a binary search to determine how far from 'loc' we can stray at this
            // error level.
            bin_min = 0;
            bin_mid = bin_max;
            while (bin_min < bin_mid) {
              if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
                bin_min = bin_mid;
              } else {
                bin_max = bin_mid;
              }
              bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
            }
            // Use the result from this iteration as the maximum for the next.
            bin_max = bin_mid;
            var start = Math.max(1, loc - bin_mid + 1);
            var finish = Math.min(loc + bin_mid, text.length) + pattern.length;

            var rd = Array(finish + 2);
            rd[finish + 1] = (1 << d) - 1;
            for (var j = finish; j >= start; j--) {
              // The alphabet (s) is a sparse hash, so the following line generates
              // warnings.
              var charMatch = s[text.charAt(j - 1)];
              if (d === 0) {
                // First pass: exact match.
                rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
              } else {
                // Subsequent passes: fuzzy match.
                rd[j] =
                  (((rd[j + 1] << 1) | 1) & charMatch) |
                  (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |
                  last_rd[j + 1];
              }
              if (rd[j] & matchmask) {
                var score = match_bitapScore_(d, j - 1);
                // This match will almost certainly be better than any existing match.
                // But check anyway.
                if (score <= score_threshold) {
                  // Told you so.
                  score_threshold = score;
                  best_loc = j - 1;
                  if (best_loc > loc) {
                    // When passing loc, don't exceed our current distance from loc.
                    start = Math.max(1, 2 * loc - best_loc);
                  } else {
                    // Already passed loc, downhill from here on in.
                    break;
                  }
                }
              }
            }
            // No hope for a (better) match at greater error levels.
            if (match_bitapScore_(d + 1, loc) > score_threshold) {
              break;
            }
            last_rd = rd;
          }
          return best_loc;
        };

        /**
         * Initialise the alphabet for the Bitap algorithm.
         * @param {string} pattern The text to encode.
         * @return {!Object} Hash of character locations.
         * @private
         */
        diff_match_patch.prototype.match_alphabet_ = function (pattern) {
          var s = {};
          for (var i = 0; i < pattern.length; i++) {
            s[pattern.charAt(i)] = 0;
          }
          for (var i = 0; i < pattern.length; i++) {
            s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);
          }
          return s;
        };

        //  PATCH FUNCTIONS

        /**
         * Increase the context until it is unique,
         * but don't let the pattern expand beyond Match_MaxBits.
         * @param {!diff_match_patch.patch_obj} patch The patch to grow.
         * @param {string} text Source text.
         * @private
         */
        diff_match_patch.prototype.patch_addContext_ = function (patch, text) {
          if (text.length == 0) {
            return;
          }
          if (patch.start2 === null) {
            throw Error('patch not initialized');
          }
          var pattern = text.substring(
            patch.start2,
            patch.start2 + patch.length1
          );
          var padding = 0;

          // Look for the first and last matches of pattern in text.  If two different
          // matches are found, increase the pattern length.
          while (
            text.indexOf(pattern) != text.lastIndexOf(pattern) &&
            pattern.length <
              this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin
          ) {
            padding += this.Patch_Margin;
            pattern = text.substring(
              patch.start2 - padding,
              patch.start2 + patch.length1 + padding
            );
          }
          // Add one chunk for good luck.
          padding += this.Patch_Margin;

          // Add the prefix.
          var prefix = text.substring(patch.start2 - padding, patch.start2);
          if (prefix) {
            patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));
          }
          // Add the suffix.
          var suffix = text.substring(
            patch.start2 + patch.length1,
            patch.start2 + patch.length1 + padding
          );
          if (suffix) {
            patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));
          }

          // Roll back the start points.
          patch.start1 -= prefix.length;
          patch.start2 -= prefix.length;
          // Extend the lengths.
          patch.length1 += prefix.length + suffix.length;
          patch.length2 += prefix.length + suffix.length;
        };

        /**
         * Compute a list of patches to turn text1 into text2.
         * Use diffs if provided, otherwise compute it ourselves.
         * There are four ways to call this function, depending on what data is
         * available to the caller:
         * Method 1:
         * a = text1, b = text2
         * Method 2:
         * a = diffs
         * Method 3 (optimal):
         * a = text1, b = diffs
         * Method 4 (deprecated, use method 3):
         * a = text1, b = text2, c = diffs
         *
         * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or
         * Array of diff tuples for text1 to text2 (method 2).
         * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or
         * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).
         * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples
         * for text1 to text2 (method 4) or undefined (methods 1,2,3).
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         */
        diff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {
          var text1, diffs;
          if (
            typeof a == 'string' &&
            typeof opt_b == 'string' &&
            typeof opt_c == 'undefined'
          ) {
            // Method 1: text1, text2
            // Compute diffs from text1 and text2.
            text1 = /** @type {string} */ (a);
            diffs = this.diff_main(text1, /** @type {string} */ (opt_b), true);
            if (diffs.length > 2) {
              this.diff_cleanupSemantic(diffs);
              this.diff_cleanupEfficiency(diffs);
            }
          } else if (
            a &&
            typeof a == 'object' &&
            typeof opt_b == 'undefined' &&
            typeof opt_c == 'undefined'
          ) {
            // Method 2: diffs
            // Compute text1 from diffs.
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (a);
            text1 = this.diff_text1(diffs);
          } else if (
            typeof a == 'string' &&
            opt_b &&
            typeof opt_b == 'object' &&
            typeof opt_c == 'undefined'
          ) {
            // Method 3: text1, diffs
            text1 = /** @type {string} */ (a);
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (opt_b);
          } else if (
            typeof a == 'string' &&
            typeof opt_b == 'string' &&
            opt_c &&
            typeof opt_c == 'object'
          ) {
            // Method 4: text1, text2, diffs
            // text2 is not used.
            text1 = /** @type {string} */ (a);
            diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ (opt_c);
          } else {
            throw new Error('Unknown call format to patch_make.');
          }

          if (diffs.length === 0) {
            return []; // Get rid of the null case.
          }
          var patches = [];
          var patch = new diff_match_patch.patch_obj();
          var patchDiffLength = 0; // Keeping our own length var is faster in JS.
          var char_count1 = 0; // Number of characters into the text1 string.
          var char_count2 = 0; // Number of characters into the text2 string.
          // Start with text1 (prepatch_text) and apply the diffs until we arrive at
          // text2 (postpatch_text).  We recreate the patches one by one to determine
          // context info.
          var prepatch_text = text1;
          var postpatch_text = text1;
          for (var x = 0; x < diffs.length; x++) {
            var diff_type = diffs[x][0];
            var diff_text = diffs[x][1];

            if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
              // A new patch starts here.
              patch.start1 = char_count1;
              patch.start2 = char_count2;
            }

            switch (diff_type) {
              case DIFF_INSERT:
                patch.diffs[patchDiffLength++] = diffs[x];
                patch.length2 += diff_text.length;
                postpatch_text =
                  postpatch_text.substring(0, char_count2) +
                  diff_text +
                  postpatch_text.substring(char_count2);
                break;
              case DIFF_DELETE:
                patch.length1 += diff_text.length;
                patch.diffs[patchDiffLength++] = diffs[x];
                postpatch_text =
                  postpatch_text.substring(0, char_count2) +
                  postpatch_text.substring(char_count2 + diff_text.length);
                break;
              case DIFF_EQUAL:
                if (
                  diff_text.length <= 2 * this.Patch_Margin &&
                  patchDiffLength &&
                  diffs.length != x + 1
                ) {
                  // Small equality inside a patch.
                  patch.diffs[patchDiffLength++] = diffs[x];
                  patch.length1 += diff_text.length;
                  patch.length2 += diff_text.length;
                } else if (diff_text.length >= 2 * this.Patch_Margin) {
                  // Time for a new patch.
                  if (patchDiffLength) {
                    this.patch_addContext_(patch, prepatch_text);
                    patches.push(patch);
                    patch = new diff_match_patch.patch_obj();
                    patchDiffLength = 0;
                    // Unlike Unidiff, our patch lists have a rolling context.
                    // https://github.com/google/diff-match-patch/wiki/Unidiff
                    // Update prepatch text & pos to reflect the application of the
                    // just completed patch.
                    prepatch_text = postpatch_text;
                    char_count1 = char_count2;
                  }
                }
                break;
            }

            // Update the current character count.
            if (diff_type !== DIFF_INSERT) {
              char_count1 += diff_text.length;
            }
            if (diff_type !== DIFF_DELETE) {
              char_count2 += diff_text.length;
            }
          }
          // Pick up the leftover patch if not empty.
          if (patchDiffLength) {
            this.patch_addContext_(patch, prepatch_text);
            patches.push(patch);
          }

          return patches;
        };

        /**
         * Given an array of patches, return another array that is identical.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         */
        diff_match_patch.prototype.patch_deepCopy = function (patches) {
          // Making deep copies is hard in JavaScript.
          var patchesCopy = [];
          for (var x = 0; x < patches.length; x++) {
            var patch = patches[x];
            var patchCopy = new diff_match_patch.patch_obj();
            patchCopy.diffs = [];
            for (var y = 0; y < patch.diffs.length; y++) {
              patchCopy.diffs[y] = new diff_match_patch.Diff(
                patch.diffs[y][0],
                patch.diffs[y][1]
              );
            }
            patchCopy.start1 = patch.start1;
            patchCopy.start2 = patch.start2;
            patchCopy.length1 = patch.length1;
            patchCopy.length2 = patch.length2;
            patchesCopy[x] = patchCopy;
          }
          return patchesCopy;
        };

        /**
         * Merge a set of patches onto the text.  Return a patched text, as well
         * as a list of true/false values indicating which patches were applied.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @param {string} text Old text.
         * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the
         *      new text and an array of boolean values.
         */
        diff_match_patch.prototype.patch_apply = function (patches, text) {
          if (patches.length == 0) {
            return [text, []];
          }

          // Deep copy the patches so that no changes are made to originals.
          patches = this.patch_deepCopy(patches);

          var nullPadding = this.patch_addPadding(patches);
          text = nullPadding + text + nullPadding;

          this.patch_splitMax(patches);
          // delta keeps track of the offset between the expected and actual location
          // of the previous patch.  If there are patches expected at positions 10 and
          // 20, but the first patch was found at 12, delta is 2 and the second patch
          // has an effective expected position of 22.
          var delta = 0;
          var results = [];
          for (var x = 0; x < patches.length; x++) {
            var expected_loc = patches[x].start2 + delta;
            var text1 = this.diff_text1(patches[x].diffs);
            var start_loc;
            var end_loc = -1;
            if (text1.length > this.Match_MaxBits) {
              // patch_splitMax will only provide an oversized pattern in the case of
              // a monster delete.
              start_loc = this.match_main(
                text,
                text1.substring(0, this.Match_MaxBits),
                expected_loc
              );
              if (start_loc != -1) {
                end_loc = this.match_main(
                  text,
                  text1.substring(text1.length - this.Match_MaxBits),
                  expected_loc + text1.length - this.Match_MaxBits
                );
                if (end_loc == -1 || start_loc >= end_loc) {
                  // Can't find valid trailing context.  Drop this patch.
                  start_loc = -1;
                }
              }
            } else {
              start_loc = this.match_main(text, text1, expected_loc);
            }
            if (start_loc == -1) {
              // No match found.  :(
              results[x] = false;
              // Subtract the delta for this failed patch from subsequent patches.
              delta -= patches[x].length2 - patches[x].length1;
            } else {
              // Found a match.  :)
              results[x] = true;
              delta = start_loc - expected_loc;
              var text2;
              if (end_loc == -1) {
                text2 = text.substring(start_loc, start_loc + text1.length);
              } else {
                text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
              }
              if (text1 == text2) {
                // Perfect match, just shove the replacement text in.
                text =
                  text.substring(0, start_loc) +
                  this.diff_text2(patches[x].diffs) +
                  text.substring(start_loc + text1.length);
              } else {
                // Imperfect match.  Run a diff to get a framework of equivalent
                // indices.
                var diffs = this.diff_main(text1, text2, false);
                if (
                  text1.length > this.Match_MaxBits &&
                  this.diff_levenshtein(diffs) / text1.length >
                    this.Patch_DeleteThreshold
                ) {
                  // The end points match, but the content is unacceptably bad.
                  results[x] = false;
                } else {
                  this.diff_cleanupSemanticLossless(diffs);
                  var index1 = 0;
                  var index2;
                  for (var y = 0; y < patches[x].diffs.length; y++) {
                    var mod = patches[x].diffs[y];
                    if (mod[0] !== DIFF_EQUAL) {
                      index2 = this.diff_xIndex(diffs, index1);
                    }
                    if (mod[0] === DIFF_INSERT) {
                      // Insertion
                      text =
                        text.substring(0, start_loc + index2) +
                        mod[1] +
                        text.substring(start_loc + index2);
                    } else if (mod[0] === DIFF_DELETE) {
                      // Deletion
                      text =
                        text.substring(0, start_loc + index2) +
                        text.substring(
                          start_loc +
                            this.diff_xIndex(diffs, index1 + mod[1].length)
                        );
                    }
                    if (mod[0] !== DIFF_DELETE) {
                      index1 += mod[1].length;
                    }
                  }
                }
              }
            }
          }
          // Strip the padding off.
          text = text.substring(
            nullPadding.length,
            text.length - nullPadding.length
          );
          return [text, results];
        };

        /**
         * Add some padding on text start and end so that edges can match something.
         * Intended to be called only from within patch_apply.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {string} The padding string added to each side.
         */
        diff_match_patch.prototype.patch_addPadding = function (patches) {
          var paddingLength = this.Patch_Margin;
          var nullPadding = '';
          for (var x = 1; x <= paddingLength; x++) {
            nullPadding += String.fromCharCode(x);
          }

          // Bump all the patches forward.
          for (var x = 0; x < patches.length; x++) {
            patches[x].start1 += paddingLength;
            patches[x].start2 += paddingLength;
          }

          // Add some padding on start of first diff.
          var patch = patches[0];
          var diffs = patch.diffs;
          if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
            // Add nullPadding equality.
            diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
            patch.start1 -= paddingLength; // Should be 0.
            patch.start2 -= paddingLength; // Should be 0.
            patch.length1 += paddingLength;
            patch.length2 += paddingLength;
          } else if (paddingLength > diffs[0][1].length) {
            // Grow first equality.
            var extraLength = paddingLength - diffs[0][1].length;
            diffs[0][1] =
              nullPadding.substring(diffs[0][1].length) + diffs[0][1];
            patch.start1 -= extraLength;
            patch.start2 -= extraLength;
            patch.length1 += extraLength;
            patch.length2 += extraLength;
          }

          // Add some padding on end of last diff.
          patch = patches[patches.length - 1];
          diffs = patch.diffs;
          if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
            // Add nullPadding equality.
            diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));
            patch.length1 += paddingLength;
            patch.length2 += paddingLength;
          } else if (paddingLength > diffs[diffs.length - 1][1].length) {
            // Grow last equality.
            var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
            diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
            patch.length1 += extraLength;
            patch.length2 += extraLength;
          }

          return nullPadding;
        };

        /**
         * Look through the patches and break up any which are longer than the maximum
         * limit of the match algorithm.
         * Intended to be called only from within patch_apply.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         */
        diff_match_patch.prototype.patch_splitMax = function (patches) {
          var patch_size = this.Match_MaxBits;
          for (var x = 0; x < patches.length; x++) {
            if (patches[x].length1 <= patch_size) {
              continue;
            }
            var bigpatch = patches[x];
            // Remove the big old patch.
            patches.splice(x--, 1);
            var start1 = bigpatch.start1;
            var start2 = bigpatch.start2;
            var precontext = '';
            while (bigpatch.diffs.length !== 0) {
              // Create one of several smaller patches.
              var patch = new diff_match_patch.patch_obj();
              var empty = true;
              patch.start1 = start1 - precontext.length;
              patch.start2 = start2 - precontext.length;
              if (precontext !== '') {
                patch.length1 = patch.length2 = precontext.length;
                patch.diffs.push(
                  new diff_match_patch.Diff(DIFF_EQUAL, precontext)
                );
              }
              while (
                bigpatch.diffs.length !== 0 &&
                patch.length1 < patch_size - this.Patch_Margin
              ) {
                var diff_type = bigpatch.diffs[0][0];
                var diff_text = bigpatch.diffs[0][1];
                if (diff_type === DIFF_INSERT) {
                  // Insertions are harmless.
                  patch.length2 += diff_text.length;
                  start2 += diff_text.length;
                  patch.diffs.push(bigpatch.diffs.shift());
                  empty = false;
                } else if (
                  diff_type === DIFF_DELETE &&
                  patch.diffs.length == 1 &&
                  patch.diffs[0][0] == DIFF_EQUAL &&
                  diff_text.length > 2 * patch_size
                ) {
                  // This is a large deletion.  Let it pass in one chunk.
                  patch.length1 += diff_text.length;
                  start1 += diff_text.length;
                  empty = false;
                  patch.diffs.push(
                    new diff_match_patch.Diff(diff_type, diff_text)
                  );
                  bigpatch.diffs.shift();
                } else {
                  // Deletion or equality.  Only take as much as we can stomach.
                  diff_text = diff_text.substring(
                    0,
                    patch_size - patch.length1 - this.Patch_Margin
                  );
                  patch.length1 += diff_text.length;
                  start1 += diff_text.length;
                  if (diff_type === DIFF_EQUAL) {
                    patch.length2 += diff_text.length;
                    start2 += diff_text.length;
                  } else {
                    empty = false;
                  }
                  patch.diffs.push(
                    new diff_match_patch.Diff(diff_type, diff_text)
                  );
                  if (diff_text == bigpatch.diffs[0][1]) {
                    bigpatch.diffs.shift();
                  } else {
                    bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(
                      diff_text.length
                    );
                  }
                }
              }
              // Compute the head context for the next patch.
              precontext = this.diff_text2(patch.diffs);
              precontext = precontext.substring(
                precontext.length - this.Patch_Margin
              );
              // Append the end context for this patch.
              var postcontext = this.diff_text1(bigpatch.diffs).substring(
                0,
                this.Patch_Margin
              );
              if (postcontext !== '') {
                patch.length1 += postcontext.length;
                patch.length2 += postcontext.length;
                if (
                  patch.diffs.length !== 0 &&
                  patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL
                ) {
                  patch.diffs[patch.diffs.length - 1][1] += postcontext;
                } else {
                  patch.diffs.push(
                    new diff_match_patch.Diff(DIFF_EQUAL, postcontext)
                  );
                }
              }
              if (!empty) {
                patches.splice(++x, 0, patch);
              }
            }
          }
        };

        /**
         * Take a list of patches and return a textual representation.
         * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.
         * @return {string} Text representation of patches.
         */
        diff_match_patch.prototype.patch_toText = function (patches) {
          var text = [];
          for (var x = 0; x < patches.length; x++) {
            text[x] = patches[x];
          }
          return text.join('');
        };

        /**
         * Parse a textual representation of patches and return a list of Patch objects.
         * @param {string} textline Text representation of patches.
         * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.
         * @throws {!Error} If invalid input.
         */
        diff_match_patch.prototype.patch_fromText = function (textline) {
          var patches = [];
          if (!textline) {
            return patches;
          }
          var text = textline.split('\n');
          var textPointer = 0;
          var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
          while (textPointer < text.length) {
            var m = text[textPointer].match(patchHeader);
            if (!m) {
              throw new Error('Invalid patch string: ' + text[textPointer]);
            }
            var patch = new diff_match_patch.patch_obj();
            patches.push(patch);
            patch.start1 = parseInt(m[1], 10);
            if (m[2] === '') {
              patch.start1--;
              patch.length1 = 1;
            } else if (m[2] == '0') {
              patch.length1 = 0;
            } else {
              patch.start1--;
              patch.length1 = parseInt(m[2], 10);
            }

            patch.start2 = parseInt(m[3], 10);
            if (m[4] === '') {
              patch.start2--;
              patch.length2 = 1;
            } else if (m[4] == '0') {
              patch.length2 = 0;
            } else {
              patch.start2--;
              patch.length2 = parseInt(m[4], 10);
            }
            textPointer++;

            while (textPointer < text.length) {
              var sign = text[textPointer].charAt(0);
              try {
                var line = decodeURI(text[textPointer].substring(1));
              } catch (ex) {
                // Malformed URI sequence.
                throw new Error('Illegal escape in patch_fromText: ' + line);
              }
              if (sign == '-') {
                // Deletion.
                patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));
              } else if (sign == '+') {
                // Insertion.
                patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));
              } else if (sign == ' ') {
                // Minor equality.
                patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));
              } else if (sign == '@') {
                // Start of next patch.
                break;
              } else if (sign === '') {
                // Blank line?  Whatever.
              } else {
                // WTF?
                throw new Error(
                  'Invalid patch mode "' + sign + '" in: ' + line
                );
              }
              textPointer++;
            }
          }
          return patches;
        };

        /**
         * Class representing one patch operation.
         * @constructor
         */
        diff_match_patch.patch_obj = function () {
          /** @type {!Array.<!diff_match_patch.Diff>} */
          this.diffs = [];
          /** @type {?number} */
          this.start1 = null;
          /** @type {?number} */
          this.start2 = null;
          /** @type {number} */
          this.length1 = 0;
          /** @type {number} */
          this.length2 = 0;
        };

        /**
         * Emulate GNU diff's format.
         * Header: @@ -382,8 +481,9 @@
         * Indices are printed as 1-based, not 0-based.
         * @return {string} The GNU diff string.
         */
        diff_match_patch.patch_obj.prototype.toString = function () {
          var coords1, coords2;
          if (this.length1 === 0) {
            coords1 = this.start1 + ',0';
          } else if (this.length1 == 1) {
            coords1 = this.start1 + 1;
          } else {
            coords1 = this.start1 + 1 + ',' + this.length1;
          }
          if (this.length2 === 0) {
            coords2 = this.start2 + ',0';
          } else if (this.length2 == 1) {
            coords2 = this.start2 + 1;
          } else {
            coords2 = this.start2 + 1 + ',' + this.length2;
          }
          var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
          var op;
          // Escape the body of the patch with %xx notation.
          for (var x = 0; x < this.diffs.length; x++) {
            switch (this.diffs[x][0]) {
              case DIFF_INSERT:
                op = '+';
                break;
              case DIFF_DELETE:
                op = '-';
                break;
              case DIFF_EQUAL:
                op = ' ';
                break;
            }
            text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
          }
          return text.join('').replace(/%20/g, ' ');
        };

        // The following export code was added by @ForbesLindesay
        module.exports = diff_match_patch;
        module.exports.diff_match_patch = diff_match_patch;
        module.exports.DIFF_DELETE = DIFF_DELETE;
        module.exports.DIFF_INSERT = DIFF_INSERT;
        module.exports.DIFF_EQUAL = DIFF_EQUAL;

        /***/
      },

    /***/ './node_modules/error-stack-parser/error-stack-parser.js':
      /*!***************************************************************!*\
  !*** ./node_modules/error-stack-parser/error-stack-parser.js ***!
  \***************************************************************/
      /***/ function (module, exports, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_FACTORY__,
          __WEBPACK_AMD_DEFINE_ARRAY__,
          __WEBPACK_AMD_DEFINE_RESULT__;
        (function (root, factory) {
          'use strict';
          // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

          /* istanbul ignore next */
          if (true) {
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = [
              __webpack_require__(
                /*! stackframe */ './node_modules/stackframe/stackframe.js'
              ),
            ]),
            (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
            (__WEBPACK_AMD_DEFINE_RESULT__ =
              typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function'
                ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                    exports,
                    __WEBPACK_AMD_DEFINE_ARRAY__
                  )
                : __WEBPACK_AMD_DEFINE_FACTORY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(this, function ErrorStackParser(StackFrame) {
          'use strict';

          var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/;
          var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m;
          var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/;

          return {
            /**
             * Given an Error object, extract the most information from it.
             *
             * @param {Error} error object
             * @return {Array} of StackFrames
             */
            parse: function ErrorStackParser$$parse(error) {
              if (
                typeof error.stacktrace !== 'undefined' ||
                typeof error['opera#sourceloc'] !== 'undefined'
              ) {
                return this.parseOpera(error);
              } else if (
                error.stack &&
                error.stack.match(CHROME_IE_STACK_REGEXP)
              ) {
                return this.parseV8OrIE(error);
              } else if (error.stack) {
                return this.parseFFOrSafari(error);
              } else {
                throw new Error('Cannot parse given Error object');
              }
            },

            // Separate line and column numbers from a string of the form: (URI:Line:Column)
            extractLocation: function ErrorStackParser$$extractLocation(
              urlLike
            ) {
              // Fail-fast but return locations like "(native)"
              if (urlLike.indexOf(':') === -1) {
                return [urlLike];
              }

              var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/;
              var parts = regExp.exec(urlLike.replace(/[()]/g, ''));
              return [parts[1], parts[2] || undefined, parts[3] || undefined];
            },

            parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
              var filtered = error.stack.split('\n').filter(function (line) {
                return !!line.match(CHROME_IE_STACK_REGEXP);
              }, this);

              return filtered.map(function (line) {
                if (line.indexOf('(eval ') > -1) {
                  // Throw away eval information until we implement stacktrace.js/stackframe#8
                  line = line
                    .replace(/eval code/g, 'eval')
                    .replace(/(\(eval at [^()]*)|(,.*$)/g, '');
                }
                var sanitizedLine = line
                  .replace(/^\s+/, '')
                  .replace(/\(eval code/g, '(')
                  .replace(/^.*?\s+/, '');

                // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
                // case it has spaces in it, as the string is split on \s+ later on
                var location = sanitizedLine.match(/ (\(.+\)$)/);

                // remove the parenthesized location from the line, if it was matched
                sanitizedLine = location
                  ? sanitizedLine.replace(location[0], '')
                  : sanitizedLine;

                // if a location was matched, pass it to extractLocation() otherwise pass all sanitizedLine
                // because this line doesn't have function name
                var locationParts = this.extractLocation(
                  location ? location[1] : sanitizedLine
                );
                var functionName = (location && sanitizedLine) || undefined;
                var fileName =
                  ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1
                    ? undefined
                    : locationParts[0];

                return new StackFrame({
                  functionName: functionName,
                  fileName: fileName,
                  lineNumber: locationParts[1],
                  columnNumber: locationParts[2],
                  source: line,
                });
              }, this);
            },

            parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
              var filtered = error.stack.split('\n').filter(function (line) {
                return !line.match(SAFARI_NATIVE_CODE_REGEXP);
              }, this);

              return filtered.map(function (line) {
                // Throw away eval information until we implement stacktrace.js/stackframe#8
                if (line.indexOf(' > eval') > -1) {
                  line = line.replace(
                    / line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,
                    ':$1'
                  );
                }

                if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                  // Safari eval frames only have function names and nothing else
                  return new StackFrame({
                    functionName: line,
                  });
                } else {
                  var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                  var matches = line.match(functionNameRegex);
                  var functionName =
                    matches && matches[1] ? matches[1] : undefined;
                  var locationParts = this.extractLocation(
                    line.replace(functionNameRegex, '')
                  );

                  return new StackFrame({
                    functionName: functionName,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line,
                  });
                }
              }, this);
            },

            parseOpera: function ErrorStackParser$$parseOpera(e) {
              if (
                !e.stacktrace ||
                (e.message.indexOf('\n') > -1 &&
                  e.message.split('\n').length >
                    e.stacktrace.split('\n').length)
              ) {
                return this.parseOpera9(e);
              } else if (!e.stack) {
                return this.parseOpera10(e);
              } else {
                return this.parseOpera11(e);
              }
            },

            parseOpera9: function ErrorStackParser$$parseOpera9(e) {
              var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
              var lines = e.message.split('\n');
              var result = [];

              for (var i = 2, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                  result.push(
                    new StackFrame({
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i],
                    })
                  );
                }
              }

              return result;
            },

            parseOpera10: function ErrorStackParser$$parseOpera10(e) {
              var lineRE =
                /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
              var lines = e.stacktrace.split('\n');
              var result = [];

              for (var i = 0, len = lines.length; i < len; i += 2) {
                var match = lineRE.exec(lines[i]);
                if (match) {
                  result.push(
                    new StackFrame({
                      functionName: match[3] || undefined,
                      fileName: match[2],
                      lineNumber: match[1],
                      source: lines[i],
                    })
                  );
                }
              }

              return result;
            },

            // Opera 10.65+ Error.stack very similar to FF/Safari
            parseOpera11: function ErrorStackParser$$parseOpera11(error) {
              var filtered = error.stack.split('\n').filter(function (line) {
                return (
                  !!line.match(FIREFOX_SAFARI_STACK_REGEXP) &&
                  !line.match(/^Error created at/)
                );
              }, this);

              return filtered.map(function (line) {
                var tokens = line.split('@');
                var locationParts = this.extractLocation(tokens.pop());
                var functionCall = tokens.shift() || '';
                var functionName =
                  functionCall
                    .replace(/<anonymous function(: (\w+))?>/, '$2')
                    .replace(/\([^)]*\)/g, '') || undefined;
                var argsRaw;
                if (functionCall.match(/\(([^)]*)\)/)) {
                  argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1');
                }
                var args =
                  argsRaw === undefined ||
                  argsRaw === '[arguments not available]'
                    ? undefined
                    : argsRaw.split(',');

                return new StackFrame({
                  functionName: functionName,
                  args: args,
                  fileName: locationParts[0],
                  lineNumber: locationParts[1],
                  columnNumber: locationParts[2],
                  source: line,
                });
              }, this);
            },
          };
        });

        /***/
      },

    /***/ './node_modules/html-entities/lib/index.js':
      /*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';

        var __assign =
          (this && this.__assign) ||
          function () {
            __assign =
              Object.assign ||
              function (t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                  s = arguments[i];
                  for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                }
                return t;
              };
            return __assign.apply(this, arguments);
          };
        Object.defineProperty(exports, '__esModule', { value: true });
        var named_references_1 = __webpack_require__(
          /*! ./named-references */ './node_modules/html-entities/lib/named-references.js'
        );
        var numeric_unicode_map_1 = __webpack_require__(
          /*! ./numeric-unicode-map */ './node_modules/html-entities/lib/numeric-unicode-map.js'
        );
        var surrogate_pairs_1 = __webpack_require__(
          /*! ./surrogate-pairs */ './node_modules/html-entities/lib/surrogate-pairs.js'
        );
        var allNamedReferences = __assign(
          __assign({}, named_references_1.namedReferences),
          { all: named_references_1.namedReferences.html5 }
        );
        var encodeRegExps = {
          specialChars: /[<>'"&]/g,
          nonAscii:
            /[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
          nonAsciiPrintable:
            /[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
          nonAsciiPrintableOnly:
            /[\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
          extensive:
            /[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/g,
        };
        var defaultEncodeOptions = {
          mode: 'specialChars',
          level: 'all',
          numeric: 'decimal',
        };
        /** Encodes all the necessary (specified by `level`) characters in the text */
        function encode(text, _a) {
          var _b = _a === void 0 ? defaultEncodeOptions : _a,
            _c = _b.mode,
            mode = _c === void 0 ? 'specialChars' : _c,
            _d = _b.numeric,
            numeric = _d === void 0 ? 'decimal' : _d,
            _e = _b.level,
            level = _e === void 0 ? 'all' : _e;
          if (!text) {
            return '';
          }
          var encodeRegExp = encodeRegExps[mode];
          var references = allNamedReferences[level].characters;
          var isHex = numeric === 'hexadecimal';
          encodeRegExp.lastIndex = 0;
          var _b = encodeRegExp.exec(text);
          var _c;
          if (_b) {
            _c = '';
            var _d = 0;
            do {
              if (_d !== _b.index) {
                _c += text.substring(_d, _b.index);
              }
              var _e = _b[0];
              var result_1 = references[_e];
              if (!result_1) {
                var code_1 =
                  _e.length > 1
                    ? surrogate_pairs_1.getCodePoint(_e, 0)
                    : _e.charCodeAt(0);
                result_1 =
                  (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
              }
              _c += result_1;
              _d = _b.index + _e.length;
            } while ((_b = encodeRegExp.exec(text)));
            if (_d !== text.length) {
              _c += text.substring(_d);
            }
          } else {
            _c = text;
          }
          return _c;
        }
        exports.encode = encode;
        var defaultDecodeOptions = {
          scope: 'body',
          level: 'all',
        };
        var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
        var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
        var baseDecodeRegExps = {
          xml: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.xml,
          },
          html4: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.html4,
          },
          html5: {
            strict: strict,
            attribute: attribute,
            body: named_references_1.bodyRegExps.html5,
          },
        };
        var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), {
          all: baseDecodeRegExps.html5,
        });
        var fromCharCode = String.fromCharCode;
        var outOfBoundsChar = fromCharCode(65533);
        var defaultDecodeEntityOptions = {
          level: 'all',
        };
        /** Decodes a single entity */
        function decodeEntity(entity, _a) {
          var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level,
            level = _b === void 0 ? 'all' : _b;
          if (!entity) {
            return '';
          }
          var _b = entity;
          var decodeEntityLastChar_1 = entity[entity.length - 1];
          if (false) {
          } else if (false) {
          } else {
            var decodeResultByReference_1 =
              allNamedReferences[level].entities[entity];
            if (decodeResultByReference_1) {
              _b = decodeResultByReference_1;
            } else if (entity[0] === '&' && entity[1] === '#') {
              var decodeSecondChar_1 = entity[2];
              var decodeCode_1 =
                decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X'
                  ? parseInt(entity.substr(3), 16)
                  : parseInt(entity.substr(2));
              _b =
                decodeCode_1 >= 0x10ffff
                  ? outOfBoundsChar
                  : decodeCode_1 > 65535
                  ? surrogate_pairs_1.fromCodePoint(decodeCode_1)
                  : fromCharCode(
                      numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] ||
                        decodeCode_1
                    );
            }
          }
          return _b;
        }
        exports.decodeEntity = decodeEntity;
        /** Decodes all entities in the text */
        function decode(text, _a) {
          var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a,
            decodeCode_1 = decodeSecondChar_1.level,
            level = decodeCode_1 === void 0 ? 'all' : decodeCode_1,
            _b = decodeSecondChar_1.scope,
            scope = _b === void 0 ? (level === 'xml' ? 'strict' : 'body') : _b;
          if (!text) {
            return '';
          }
          var decodeRegExp = decodeRegExps[level][scope];
          var references = allNamedReferences[level].entities;
          var isAttribute = scope === 'attribute';
          var isStrict = scope === 'strict';
          decodeRegExp.lastIndex = 0;
          var replaceMatch_1 = decodeRegExp.exec(text);
          var replaceResult_1;
          if (replaceMatch_1) {
            replaceResult_1 = '';
            var replaceLastIndex_1 = 0;
            do {
              if (replaceLastIndex_1 !== replaceMatch_1.index) {
                replaceResult_1 += text.substring(
                  replaceLastIndex_1,
                  replaceMatch_1.index
                );
              }
              var replaceInput_1 = replaceMatch_1[0];
              var decodeResult_1 = replaceInput_1;
              var decodeEntityLastChar_2 =
                replaceInput_1[replaceInput_1.length - 1];
              if (isAttribute && decodeEntityLastChar_2 === '=') {
                decodeResult_1 = replaceInput_1;
              } else if (isStrict && decodeEntityLastChar_2 !== ';') {
                decodeResult_1 = replaceInput_1;
              } else {
                var decodeResultByReference_2 = references[replaceInput_1];
                if (decodeResultByReference_2) {
                  decodeResult_1 = decodeResultByReference_2;
                } else if (
                  replaceInput_1[0] === '&' &&
                  replaceInput_1[1] === '#'
                ) {
                  var decodeSecondChar_2 = replaceInput_1[2];
                  var decodeCode_2 =
                    decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X'
                      ? parseInt(replaceInput_1.substr(3), 16)
                      : parseInt(replaceInput_1.substr(2));
                  decodeResult_1 =
                    decodeCode_2 >= 0x10ffff
                      ? outOfBoundsChar
                      : decodeCode_2 > 65535
                      ? surrogate_pairs_1.fromCodePoint(decodeCode_2)
                      : fromCharCode(
                          numeric_unicode_map_1.numericUnicodeMap[
                            decodeCode_2
                          ] || decodeCode_2
                        );
                }
              }
              replaceResult_1 += decodeResult_1;
              replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
            } while ((replaceMatch_1 = decodeRegExp.exec(text)));
            if (replaceLastIndex_1 !== text.length) {
              replaceResult_1 += text.substring(replaceLastIndex_1);
            }
          } else {
            replaceResult_1 = text;
          }
          return replaceResult_1;
        }
        exports.decode = decode;

        /***/
      },

    /***/ './node_modules/html-entities/lib/named-references.js':
      /*!************************************************************!*\
  !*** ./node_modules/html-entities/lib/named-references.js ***!
  \************************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.bodyRegExps = {
          xml: /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
          html4:
            /&notin;|&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
          html5:
            /&centerdot;|&copysr;|&divideontimes;|&gtcc;|&gtcir;|&gtdot;|&gtlPar;|&gtquest;|&gtrapprox;|&gtrarr;|&gtrdot;|&gtreqless;|&gtreqqless;|&gtrless;|&gtrsim;|&ltcc;|&ltcir;|&ltdot;|&lthree;|&ltimes;|&ltlarr;|&ltquest;|&ltrPar;|&ltri;|&ltrie;|&ltrif;|&notin;|&notinE;|&notindot;|&notinva;|&notinvb;|&notinvc;|&notni;|&notniva;|&notnivb;|&notnivc;|&parallel;|&timesb;|&timesbar;|&timesd;|&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,
        };
        exports.namedReferences = {
          xml: {
            entities: {
              '&lt;': '<',
              '&gt;': '>',
              '&quot;': '"',
              '&apos;': "'",
              '&amp;': '&',
            },
            characters: {
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&apos;',
              '&': '&amp;',
            },
          },
          html4: {
            entities: {
              '&apos;': "'",
              '&nbsp': ' ',
              '&nbsp;': ' ',
              '&iexcl': '¡',
              '&iexcl;': '¡',
              '&cent': '¢',
              '&cent;': '¢',
              '&pound': '£',
              '&pound;': '£',
              '&curren': '¤',
              '&curren;': '¤',
              '&yen': '¥',
              '&yen;': '¥',
              '&brvbar': '¦',
              '&brvbar;': '¦',
              '&sect': '§',
              '&sect;': '§',
              '&uml': '¨',
              '&uml;': '¨',
              '&copy': '©',
              '&copy;': '©',
              '&ordf': 'ª',
              '&ordf;': 'ª',
              '&laquo': '«',
              '&laquo;': '«',
              '&not': '¬',
              '&not;': '¬',
              '&shy': '­',
              '&shy;': '­',
              '&reg': '®',
              '&reg;': '®',
              '&macr': '¯',
              '&macr;': '¯',
              '&deg': '°',
              '&deg;': '°',
              '&plusmn': '±',
              '&plusmn;': '±',
              '&sup2': '²',
              '&sup2;': '²',
              '&sup3': '³',
              '&sup3;': '³',
              '&acute': '´',
              '&acute;': '´',
              '&micro': 'µ',
              '&micro;': 'µ',
              '&para': '¶',
              '&para;': '¶',
              '&middot': '·',
              '&middot;': '·',
              '&cedil': '¸',
              '&cedil;': '¸',
              '&sup1': '¹',
              '&sup1;': '¹',
              '&ordm': 'º',
              '&ordm;': 'º',
              '&raquo': '»',
              '&raquo;': '»',
              '&frac14': '¼',
              '&frac14;': '¼',
              '&frac12': '½',
              '&frac12;': '½',
              '&frac34': '¾',
              '&frac34;': '¾',
              '&iquest': '¿',
              '&iquest;': '¿',
              '&Agrave': 'À',
              '&Agrave;': 'À',
              '&Aacute': 'Á',
              '&Aacute;': 'Á',
              '&Acirc': 'Â',
              '&Acirc;': 'Â',
              '&Atilde': 'Ã',
              '&Atilde;': 'Ã',
              '&Auml': 'Ä',
              '&Auml;': 'Ä',
              '&Aring': 'Å',
              '&Aring;': 'Å',
              '&AElig': 'Æ',
              '&AElig;': 'Æ',
              '&Ccedil': 'Ç',
              '&Ccedil;': 'Ç',
              '&Egrave': 'È',
              '&Egrave;': 'È',
              '&Eacute': 'É',
              '&Eacute;': 'É',
              '&Ecirc': 'Ê',
              '&Ecirc;': 'Ê',
              '&Euml': 'Ë',
              '&Euml;': 'Ë',
              '&Igrave': 'Ì',
              '&Igrave;': 'Ì',
              '&Iacute': 'Í',
              '&Iacute;': 'Í',
              '&Icirc': 'Î',
              '&Icirc;': 'Î',
              '&Iuml': 'Ï',
              '&Iuml;': 'Ï',
              '&ETH': 'Ð',
              '&ETH;': 'Ð',
              '&Ntilde': 'Ñ',
              '&Ntilde;': 'Ñ',
              '&Ograve': 'Ò',
              '&Ograve;': 'Ò',
              '&Oacute': 'Ó',
              '&Oacute;': 'Ó',
              '&Ocirc': 'Ô',
              '&Ocirc;': 'Ô',
              '&Otilde': 'Õ',
              '&Otilde;': 'Õ',
              '&Ouml': 'Ö',
              '&Ouml;': 'Ö',
              '&times': '×',
              '&times;': '×',
              '&Oslash': 'Ø',
              '&Oslash;': 'Ø',
              '&Ugrave': 'Ù',
              '&Ugrave;': 'Ù',
              '&Uacute': 'Ú',
              '&Uacute;': 'Ú',
              '&Ucirc': 'Û',
              '&Ucirc;': 'Û',
              '&Uuml': 'Ü',
              '&Uuml;': 'Ü',
              '&Yacute': 'Ý',
              '&Yacute;': 'Ý',
              '&THORN': 'Þ',
              '&THORN;': 'Þ',
              '&szlig': 'ß',
              '&szlig;': 'ß',
              '&agrave': 'à',
              '&agrave;': 'à',
              '&aacute': 'á',
              '&aacute;': 'á',
              '&acirc': 'â',
              '&acirc;': 'â',
              '&atilde': 'ã',
              '&atilde;': 'ã',
              '&auml': 'ä',
              '&auml;': 'ä',
              '&aring': 'å',
              '&aring;': 'å',
              '&aelig': 'æ',
              '&aelig;': 'æ',
              '&ccedil': 'ç',
              '&ccedil;': 'ç',
              '&egrave': 'è',
              '&egrave;': 'è',
              '&eacute': 'é',
              '&eacute;': 'é',
              '&ecirc': 'ê',
              '&ecirc;': 'ê',
              '&euml': 'ë',
              '&euml;': 'ë',
              '&igrave': 'ì',
              '&igrave;': 'ì',
              '&iacute': 'í',
              '&iacute;': 'í',
              '&icirc': 'î',
              '&icirc;': 'î',
              '&iuml': 'ï',
              '&iuml;': 'ï',
              '&eth': 'ð',
              '&eth;': 'ð',
              '&ntilde': 'ñ',
              '&ntilde;': 'ñ',
              '&ograve': 'ò',
              '&ograve;': 'ò',
              '&oacute': 'ó',
              '&oacute;': 'ó',
              '&ocirc': 'ô',
              '&ocirc;': 'ô',
              '&otilde': 'õ',
              '&otilde;': 'õ',
              '&ouml': 'ö',
              '&ouml;': 'ö',
              '&divide': '÷',
              '&divide;': '÷',
              '&oslash': 'ø',
              '&oslash;': 'ø',
              '&ugrave': 'ù',
              '&ugrave;': 'ù',
              '&uacute': 'ú',
              '&uacute;': 'ú',
              '&ucirc': 'û',
              '&ucirc;': 'û',
              '&uuml': 'ü',
              '&uuml;': 'ü',
              '&yacute': 'ý',
              '&yacute;': 'ý',
              '&thorn': 'þ',
              '&thorn;': 'þ',
              '&yuml': 'ÿ',
              '&yuml;': 'ÿ',
              '&quot': '"',
              '&quot;': '"',
              '&amp': '&',
              '&amp;': '&',
              '&lt': '<',
              '&lt;': '<',
              '&gt': '>',
              '&gt;': '>',
              '&OElig;': 'Œ',
              '&oelig;': 'œ',
              '&Scaron;': 'Š',
              '&scaron;': 'š',
              '&Yuml;': 'Ÿ',
              '&circ;': 'ˆ',
              '&tilde;': '˜',
              '&ensp;': ' ',
              '&emsp;': ' ',
              '&thinsp;': ' ',
              '&zwnj;': '‌',
              '&zwj;': '‍',
              '&lrm;': '‎',
              '&rlm;': '‏',
              '&ndash;': '–',
              '&mdash;': '—',
              '&lsquo;': '‘',
              '&rsquo;': '’',
              '&sbquo;': '‚',
              '&ldquo;': '“',
              '&rdquo;': '”',
              '&bdquo;': '„',
              '&dagger;': '†',
              '&Dagger;': '‡',
              '&permil;': '‰',
              '&lsaquo;': '‹',
              '&rsaquo;': '›',
              '&euro;': '€',
              '&fnof;': 'ƒ',
              '&Alpha;': 'Α',
              '&Beta;': 'Β',
              '&Gamma;': 'Γ',
              '&Delta;': 'Δ',
              '&Epsilon;': 'Ε',
              '&Zeta;': 'Ζ',
              '&Eta;': 'Η',
              '&Theta;': 'Θ',
              '&Iota;': 'Ι',
              '&Kappa;': 'Κ',
              '&Lambda;': 'Λ',
              '&Mu;': 'Μ',
              '&Nu;': 'Ν',
              '&Xi;': 'Ξ',
              '&Omicron;': 'Ο',
              '&Pi;': 'Π',
              '&Rho;': 'Ρ',
              '&Sigma;': 'Σ',
              '&Tau;': 'Τ',
              '&Upsilon;': 'Υ',
              '&Phi;': 'Φ',
              '&Chi;': 'Χ',
              '&Psi;': 'Ψ',
              '&Omega;': 'Ω',
              '&alpha;': 'α',
              '&beta;': 'β',
              '&gamma;': 'γ',
              '&delta;': 'δ',
              '&epsilon;': 'ε',
              '&zeta;': 'ζ',
              '&eta;': 'η',
              '&theta;': 'θ',
              '&iota;': 'ι',
              '&kappa;': 'κ',
              '&lambda;': 'λ',
              '&mu;': 'μ',
              '&nu;': 'ν',
              '&xi;': 'ξ',
              '&omicron;': 'ο',
              '&pi;': 'π',
              '&rho;': 'ρ',
              '&sigmaf;': 'ς',
              '&sigma;': 'σ',
              '&tau;': 'τ',
              '&upsilon;': 'υ',
              '&phi;': 'φ',
              '&chi;': 'χ',
              '&psi;': 'ψ',
              '&omega;': 'ω',
              '&thetasym;': 'ϑ',
              '&upsih;': 'ϒ',
              '&piv;': 'ϖ',
              '&bull;': '•',
              '&hellip;': '…',
              '&prime;': '′',
              '&Prime;': '″',
              '&oline;': '‾',
              '&frasl;': '⁄',
              '&weierp;': '℘',
              '&image;': 'ℑ',
              '&real;': 'ℜ',
              '&trade;': '™',
              '&alefsym;': 'ℵ',
              '&larr;': '←',
              '&uarr;': '↑',
              '&rarr;': '→',
              '&darr;': '↓',
              '&harr;': '↔',
              '&crarr;': '↵',
              '&lArr;': '⇐',
              '&uArr;': '⇑',
              '&rArr;': '⇒',
              '&dArr;': '⇓',
              '&hArr;': '⇔',
              '&forall;': '∀',
              '&part;': '∂',
              '&exist;': '∃',
              '&empty;': '∅',
              '&nabla;': '∇',
              '&isin;': '∈',
              '&notin;': '∉',
              '&ni;': '∋',
              '&prod;': '∏',
              '&sum;': '∑',
              '&minus;': '−',
              '&lowast;': '∗',
              '&radic;': '√',
              '&prop;': '∝',
              '&infin;': '∞',
              '&ang;': '∠',
              '&and;': '∧',
              '&or;': '∨',
              '&cap;': '∩',
              '&cup;': '∪',
              '&int;': '∫',
              '&there4;': '∴',
              '&sim;': '∼',
              '&cong;': '≅',
              '&asymp;': '≈',
              '&ne;': '≠',
              '&equiv;': '≡',
              '&le;': '≤',
              '&ge;': '≥',
              '&sub;': '⊂',
              '&sup;': '⊃',
              '&nsub;': '⊄',
              '&sube;': '⊆',
              '&supe;': '⊇',
              '&oplus;': '⊕',
              '&otimes;': '⊗',
              '&perp;': '⊥',
              '&sdot;': '⋅',
              '&lceil;': '⌈',
              '&rceil;': '⌉',
              '&lfloor;': '⌊',
              '&rfloor;': '⌋',
              '&lang;': '〈',
              '&rang;': '〉',
              '&loz;': '◊',
              '&spades;': '♠',
              '&clubs;': '♣',
              '&hearts;': '♥',
              '&diams;': '♦',
            },
            characters: {
              "'": '&apos;',
              ' ': '&nbsp;',
              '¡': '&iexcl;',
              '¢': '&cent;',
              '£': '&pound;',
              '¤': '&curren;',
              '¥': '&yen;',
              '¦': '&brvbar;',
              '§': '&sect;',
              '¨': '&uml;',
              '©': '&copy;',
              ª: '&ordf;',
              '«': '&laquo;',
              '¬': '&not;',
              '­': '&shy;',
              '®': '&reg;',
              '¯': '&macr;',
              '°': '&deg;',
              '±': '&plusmn;',
              '²': '&sup2;',
              '³': '&sup3;',
              '´': '&acute;',
              µ: '&micro;',
              '¶': '&para;',
              '·': '&middot;',
              '¸': '&cedil;',
              '¹': '&sup1;',
              º: '&ordm;',
              '»': '&raquo;',
              '¼': '&frac14;',
              '½': '&frac12;',
              '¾': '&frac34;',
              '¿': '&iquest;',
              À: '&Agrave;',
              Á: '&Aacute;',
              Â: '&Acirc;',
              Ã: '&Atilde;',
              Ä: '&Auml;',
              Å: '&Aring;',
              Æ: '&AElig;',
              Ç: '&Ccedil;',
              È: '&Egrave;',
              É: '&Eacute;',
              Ê: '&Ecirc;',
              Ë: '&Euml;',
              Ì: '&Igrave;',
              Í: '&Iacute;',
              Î: '&Icirc;',
              Ï: '&Iuml;',
              Ð: '&ETH;',
              Ñ: '&Ntilde;',
              Ò: '&Ograve;',
              Ó: '&Oacute;',
              Ô: '&Ocirc;',
              Õ: '&Otilde;',
              Ö: '&Ouml;',
              '×': '&times;',
              Ø: '&Oslash;',
              Ù: '&Ugrave;',
              Ú: '&Uacute;',
              Û: '&Ucirc;',
              Ü: '&Uuml;',
              Ý: '&Yacute;',
              Þ: '&THORN;',
              ß: '&szlig;',
              à: '&agrave;',
              á: '&aacute;',
              â: '&acirc;',
              ã: '&atilde;',
              ä: '&auml;',
              å: '&aring;',
              æ: '&aelig;',
              ç: '&ccedil;',
              è: '&egrave;',
              é: '&eacute;',
              ê: '&ecirc;',
              ë: '&euml;',
              ì: '&igrave;',
              í: '&iacute;',
              î: '&icirc;',
              ï: '&iuml;',
              ð: '&eth;',
              ñ: '&ntilde;',
              ò: '&ograve;',
              ó: '&oacute;',
              ô: '&ocirc;',
              õ: '&otilde;',
              ö: '&ouml;',
              '÷': '&divide;',
              ø: '&oslash;',
              ù: '&ugrave;',
              ú: '&uacute;',
              û: '&ucirc;',
              ü: '&uuml;',
              ý: '&yacute;',
              þ: '&thorn;',
              ÿ: '&yuml;',
              '"': '&quot;',
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              Œ: '&OElig;',
              œ: '&oelig;',
              Š: '&Scaron;',
              š: '&scaron;',
              Ÿ: '&Yuml;',
              ˆ: '&circ;',
              '˜': '&tilde;',
              ' ': '&ensp;',
              ' ': '&emsp;',
              ' ': '&thinsp;',
              '‌': '&zwnj;',
              '‍': '&zwj;',
              '‎': '&lrm;',
              '‏': '&rlm;',
              '–': '&ndash;',
              '—': '&mdash;',
              '‘': '&lsquo;',
              '’': '&rsquo;',
              '‚': '&sbquo;',
              '“': '&ldquo;',
              '”': '&rdquo;',
              '„': '&bdquo;',
              '†': '&dagger;',
              '‡': '&Dagger;',
              '‰': '&permil;',
              '‹': '&lsaquo;',
              '›': '&rsaquo;',
              '€': '&euro;',
              ƒ: '&fnof;',
              Α: '&Alpha;',
              Β: '&Beta;',
              Γ: '&Gamma;',
              Δ: '&Delta;',
              Ε: '&Epsilon;',
              Ζ: '&Zeta;',
              Η: '&Eta;',
              Θ: '&Theta;',
              Ι: '&Iota;',
              Κ: '&Kappa;',
              Λ: '&Lambda;',
              Μ: '&Mu;',
              Ν: '&Nu;',
              Ξ: '&Xi;',
              Ο: '&Omicron;',
              Π: '&Pi;',
              Ρ: '&Rho;',
              Σ: '&Sigma;',
              Τ: '&Tau;',
              Υ: '&Upsilon;',
              Φ: '&Phi;',
              Χ: '&Chi;',
              Ψ: '&Psi;',
              Ω: '&Omega;',
              α: '&alpha;',
              β: '&beta;',
              γ: '&gamma;',
              δ: '&delta;',
              ε: '&epsilon;',
              ζ: '&zeta;',
              η: '&eta;',
              θ: '&theta;',
              ι: '&iota;',
              κ: '&kappa;',
              λ: '&lambda;',
              μ: '&mu;',
              ν: '&nu;',
              ξ: '&xi;',
              ο: '&omicron;',
              π: '&pi;',
              ρ: '&rho;',
              ς: '&sigmaf;',
              σ: '&sigma;',
              τ: '&tau;',
              υ: '&upsilon;',
              φ: '&phi;',
              χ: '&chi;',
              ψ: '&psi;',
              ω: '&omega;',
              ϑ: '&thetasym;',
              ϒ: '&upsih;',
              ϖ: '&piv;',
              '•': '&bull;',
              '…': '&hellip;',
              '′': '&prime;',
              '″': '&Prime;',
              '‾': '&oline;',
              '⁄': '&frasl;',
              '℘': '&weierp;',
              ℑ: '&image;',
              ℜ: '&real;',
              '™': '&trade;',
              ℵ: '&alefsym;',
              '←': '&larr;',
              '↑': '&uarr;',
              '→': '&rarr;',
              '↓': '&darr;',
              '↔': '&harr;',
              '↵': '&crarr;',
              '⇐': '&lArr;',
              '⇑': '&uArr;',
              '⇒': '&rArr;',
              '⇓': '&dArr;',
              '⇔': '&hArr;',
              '∀': '&forall;',
              '∂': '&part;',
              '∃': '&exist;',
              '∅': '&empty;',
              '∇': '&nabla;',
              '∈': '&isin;',
              '∉': '&notin;',
              '∋': '&ni;',
              '∏': '&prod;',
              '∑': '&sum;',
              '−': '&minus;',
              '∗': '&lowast;',
              '√': '&radic;',
              '∝': '&prop;',
              '∞': '&infin;',
              '∠': '&ang;',
              '∧': '&and;',
              '∨': '&or;',
              '∩': '&cap;',
              '∪': '&cup;',
              '∫': '&int;',
              '∴': '&there4;',
              '∼': '&sim;',
              '≅': '&cong;',
              '≈': '&asymp;',
              '≠': '&ne;',
              '≡': '&equiv;',
              '≤': '&le;',
              '≥': '&ge;',
              '⊂': '&sub;',
              '⊃': '&sup;',
              '⊄': '&nsub;',
              '⊆': '&sube;',
              '⊇': '&supe;',
              '⊕': '&oplus;',
              '⊗': '&otimes;',
              '⊥': '&perp;',
              '⋅': '&sdot;',
              '⌈': '&lceil;',
              '⌉': '&rceil;',
              '⌊': '&lfloor;',
              '⌋': '&rfloor;',
              '〈': '&lang;',
              '〉': '&rang;',
              '◊': '&loz;',
              '♠': '&spades;',
              '♣': '&clubs;',
              '♥': '&hearts;',
              '♦': '&diams;',
            },
          },
          html5: {
            entities: {
              '&AElig': 'Æ',
              '&AElig;': 'Æ',
              '&AMP': '&',
              '&AMP;': '&',
              '&Aacute': 'Á',
              '&Aacute;': 'Á',
              '&Abreve;': 'Ă',
              '&Acirc': 'Â',
              '&Acirc;': 'Â',
              '&Acy;': 'А',
              '&Afr;': '𝔄',
              '&Agrave': 'À',
              '&Agrave;': 'À',
              '&Alpha;': 'Α',
              '&Amacr;': 'Ā',
              '&And;': '⩓',
              '&Aogon;': 'Ą',
              '&Aopf;': '𝔸',
              '&ApplyFunction;': '⁡',
              '&Aring': 'Å',
              '&Aring;': 'Å',
              '&Ascr;': '𝒜',
              '&Assign;': '≔',
              '&Atilde': 'Ã',
              '&Atilde;': 'Ã',
              '&Auml': 'Ä',
              '&Auml;': 'Ä',
              '&Backslash;': '∖',
              '&Barv;': '⫧',
              '&Barwed;': '⌆',
              '&Bcy;': 'Б',
              '&Because;': '∵',
              '&Bernoullis;': 'ℬ',
              '&Beta;': 'Β',
              '&Bfr;': '𝔅',
              '&Bopf;': '𝔹',
              '&Breve;': '˘',
              '&Bscr;': 'ℬ',
              '&Bumpeq;': '≎',
              '&CHcy;': 'Ч',
              '&COPY': '©',
              '&COPY;': '©',
              '&Cacute;': 'Ć',
              '&Cap;': '⋒',
              '&CapitalDifferentialD;': 'ⅅ',
              '&Cayleys;': 'ℭ',
              '&Ccaron;': 'Č',
              '&Ccedil': 'Ç',
              '&Ccedil;': 'Ç',
              '&Ccirc;': 'Ĉ',
              '&Cconint;': '∰',
              '&Cdot;': 'Ċ',
              '&Cedilla;': '¸',
              '&CenterDot;': '·',
              '&Cfr;': 'ℭ',
              '&Chi;': 'Χ',
              '&CircleDot;': '⊙',
              '&CircleMinus;': '⊖',
              '&CirclePlus;': '⊕',
              '&CircleTimes;': '⊗',
              '&ClockwiseContourIntegral;': '∲',
              '&CloseCurlyDoubleQuote;': '”',
              '&CloseCurlyQuote;': '’',
              '&Colon;': '∷',
              '&Colone;': '⩴',
              '&Congruent;': '≡',
              '&Conint;': '∯',
              '&ContourIntegral;': '∮',
              '&Copf;': 'ℂ',
              '&Coproduct;': '∐',
              '&CounterClockwiseContourIntegral;': '∳',
              '&Cross;': '⨯',
              '&Cscr;': '𝒞',
              '&Cup;': '⋓',
              '&CupCap;': '≍',
              '&DD;': 'ⅅ',
              '&DDotrahd;': '⤑',
              '&DJcy;': 'Ђ',
              '&DScy;': 'Ѕ',
              '&DZcy;': 'Џ',
              '&Dagger;': '‡',
              '&Darr;': '↡',
              '&Dashv;': '⫤',
              '&Dcaron;': 'Ď',
              '&Dcy;': 'Д',
              '&Del;': '∇',
              '&Delta;': 'Δ',
              '&Dfr;': '𝔇',
              '&DiacriticalAcute;': '´',
              '&DiacriticalDot;': '˙',
              '&DiacriticalDoubleAcute;': '˝',
              '&DiacriticalGrave;': '`',
              '&DiacriticalTilde;': '˜',
              '&Diamond;': '⋄',
              '&DifferentialD;': 'ⅆ',
              '&Dopf;': '𝔻',
              '&Dot;': '¨',
              '&DotDot;': '⃜',
              '&DotEqual;': '≐',
              '&DoubleContourIntegral;': '∯',
              '&DoubleDot;': '¨',
              '&DoubleDownArrow;': '⇓',
              '&DoubleLeftArrow;': '⇐',
              '&DoubleLeftRightArrow;': '⇔',
              '&DoubleLeftTee;': '⫤',
              '&DoubleLongLeftArrow;': '⟸',
              '&DoubleLongLeftRightArrow;': '⟺',
              '&DoubleLongRightArrow;': '⟹',
              '&DoubleRightArrow;': '⇒',
              '&DoubleRightTee;': '⊨',
              '&DoubleUpArrow;': '⇑',
              '&DoubleUpDownArrow;': '⇕',
              '&DoubleVerticalBar;': '∥',
              '&DownArrow;': '↓',
              '&DownArrowBar;': '⤓',
              '&DownArrowUpArrow;': '⇵',
              '&DownBreve;': '̑',
              '&DownLeftRightVector;': '⥐',
              '&DownLeftTeeVector;': '⥞',
              '&DownLeftVector;': '↽',
              '&DownLeftVectorBar;': '⥖',
              '&DownRightTeeVector;': '⥟',
              '&DownRightVector;': '⇁',
              '&DownRightVectorBar;': '⥗',
              '&DownTee;': '⊤',
              '&DownTeeArrow;': '↧',
              '&Downarrow;': '⇓',
              '&Dscr;': '𝒟',
              '&Dstrok;': 'Đ',
              '&ENG;': 'Ŋ',
              '&ETH': 'Ð',
              '&ETH;': 'Ð',
              '&Eacute': 'É',
              '&Eacute;': 'É',
              '&Ecaron;': 'Ě',
              '&Ecirc': 'Ê',
              '&Ecirc;': 'Ê',
              '&Ecy;': 'Э',
              '&Edot;': 'Ė',
              '&Efr;': '𝔈',
              '&Egrave': 'È',
              '&Egrave;': 'È',
              '&Element;': '∈',
              '&Emacr;': 'Ē',
              '&EmptySmallSquare;': '◻',
              '&EmptyVerySmallSquare;': '▫',
              '&Eogon;': 'Ę',
              '&Eopf;': '𝔼',
              '&Epsilon;': 'Ε',
              '&Equal;': '⩵',
              '&EqualTilde;': '≂',
              '&Equilibrium;': '⇌',
              '&Escr;': 'ℰ',
              '&Esim;': '⩳',
              '&Eta;': 'Η',
              '&Euml': 'Ë',
              '&Euml;': 'Ë',
              '&Exists;': '∃',
              '&ExponentialE;': 'ⅇ',
              '&Fcy;': 'Ф',
              '&Ffr;': '𝔉',
              '&FilledSmallSquare;': '◼',
              '&FilledVerySmallSquare;': '▪',
              '&Fopf;': '𝔽',
              '&ForAll;': '∀',
              '&Fouriertrf;': 'ℱ',
              '&Fscr;': 'ℱ',
              '&GJcy;': 'Ѓ',
              '&GT': '>',
              '&GT;': '>',
              '&Gamma;': 'Γ',
              '&Gammad;': 'Ϝ',
              '&Gbreve;': 'Ğ',
              '&Gcedil;': 'Ģ',
              '&Gcirc;': 'Ĝ',
              '&Gcy;': 'Г',
              '&Gdot;': 'Ġ',
              '&Gfr;': '𝔊',
              '&Gg;': '⋙',
              '&Gopf;': '𝔾',
              '&GreaterEqual;': '≥',
              '&GreaterEqualLess;': '⋛',
              '&GreaterFullEqual;': '≧',
              '&GreaterGreater;': '⪢',
              '&GreaterLess;': '≷',
              '&GreaterSlantEqual;': '⩾',
              '&GreaterTilde;': '≳',
              '&Gscr;': '𝒢',
              '&Gt;': '≫',
              '&HARDcy;': 'Ъ',
              '&Hacek;': 'ˇ',
              '&Hat;': '^',
              '&Hcirc;': 'Ĥ',
              '&Hfr;': 'ℌ',
              '&HilbertSpace;': 'ℋ',
              '&Hopf;': 'ℍ',
              '&HorizontalLine;': '─',
              '&Hscr;': 'ℋ',
              '&Hstrok;': 'Ħ',
              '&HumpDownHump;': '≎',
              '&HumpEqual;': '≏',
              '&IEcy;': 'Е',
              '&IJlig;': 'Ĳ',
              '&IOcy;': 'Ё',
              '&Iacute': 'Í',
              '&Iacute;': 'Í',
              '&Icirc': 'Î',
              '&Icirc;': 'Î',
              '&Icy;': 'И',
              '&Idot;': 'İ',
              '&Ifr;': 'ℑ',
              '&Igrave': 'Ì',
              '&Igrave;': 'Ì',
              '&Im;': 'ℑ',
              '&Imacr;': 'Ī',
              '&ImaginaryI;': 'ⅈ',
              '&Implies;': '⇒',
              '&Int;': '∬',
              '&Integral;': '∫',
              '&Intersection;': '⋂',
              '&InvisibleComma;': '⁣',
              '&InvisibleTimes;': '⁢',
              '&Iogon;': 'Į',
              '&Iopf;': '𝕀',
              '&Iota;': 'Ι',
              '&Iscr;': 'ℐ',
              '&Itilde;': 'Ĩ',
              '&Iukcy;': 'І',
              '&Iuml': 'Ï',
              '&Iuml;': 'Ï',
              '&Jcirc;': 'Ĵ',
              '&Jcy;': 'Й',
              '&Jfr;': '𝔍',
              '&Jopf;': '𝕁',
              '&Jscr;': '𝒥',
              '&Jsercy;': 'Ј',
              '&Jukcy;': 'Є',
              '&KHcy;': 'Х',
              '&KJcy;': 'Ќ',
              '&Kappa;': 'Κ',
              '&Kcedil;': 'Ķ',
              '&Kcy;': 'К',
              '&Kfr;': '𝔎',
              '&Kopf;': '𝕂',
              '&Kscr;': '𝒦',
              '&LJcy;': 'Љ',
              '&LT': '<',
              '&LT;': '<',
              '&Lacute;': 'Ĺ',
              '&Lambda;': 'Λ',
              '&Lang;': '⟪',
              '&Laplacetrf;': 'ℒ',
              '&Larr;': '↞',
              '&Lcaron;': 'Ľ',
              '&Lcedil;': 'Ļ',
              '&Lcy;': 'Л',
              '&LeftAngleBracket;': '⟨',
              '&LeftArrow;': '←',
              '&LeftArrowBar;': '⇤',
              '&LeftArrowRightArrow;': '⇆',
              '&LeftCeiling;': '⌈',
              '&LeftDoubleBracket;': '⟦',
              '&LeftDownTeeVector;': '⥡',
              '&LeftDownVector;': '⇃',
              '&LeftDownVectorBar;': '⥙',
              '&LeftFloor;': '⌊',
              '&LeftRightArrow;': '↔',
              '&LeftRightVector;': '⥎',
              '&LeftTee;': '⊣',
              '&LeftTeeArrow;': '↤',
              '&LeftTeeVector;': '⥚',
              '&LeftTriangle;': '⊲',
              '&LeftTriangleBar;': '⧏',
              '&LeftTriangleEqual;': '⊴',
              '&LeftUpDownVector;': '⥑',
              '&LeftUpTeeVector;': '⥠',
              '&LeftUpVector;': '↿',
              '&LeftUpVectorBar;': '⥘',
              '&LeftVector;': '↼',
              '&LeftVectorBar;': '⥒',
              '&Leftarrow;': '⇐',
              '&Leftrightarrow;': '⇔',
              '&LessEqualGreater;': '⋚',
              '&LessFullEqual;': '≦',
              '&LessGreater;': '≶',
              '&LessLess;': '⪡',
              '&LessSlantEqual;': '⩽',
              '&LessTilde;': '≲',
              '&Lfr;': '𝔏',
              '&Ll;': '⋘',
              '&Lleftarrow;': '⇚',
              '&Lmidot;': 'Ŀ',
              '&LongLeftArrow;': '⟵',
              '&LongLeftRightArrow;': '⟷',
              '&LongRightArrow;': '⟶',
              '&Longleftarrow;': '⟸',
              '&Longleftrightarrow;': '⟺',
              '&Longrightarrow;': '⟹',
              '&Lopf;': '𝕃',
              '&LowerLeftArrow;': '↙',
              '&LowerRightArrow;': '↘',
              '&Lscr;': 'ℒ',
              '&Lsh;': '↰',
              '&Lstrok;': 'Ł',
              '&Lt;': '≪',
              '&Map;': '⤅',
              '&Mcy;': 'М',
              '&MediumSpace;': ' ',
              '&Mellintrf;': 'ℳ',
              '&Mfr;': '𝔐',
              '&MinusPlus;': '∓',
              '&Mopf;': '𝕄',
              '&Mscr;': 'ℳ',
              '&Mu;': 'Μ',
              '&NJcy;': 'Њ',
              '&Nacute;': 'Ń',
              '&Ncaron;': 'Ň',
              '&Ncedil;': 'Ņ',
              '&Ncy;': 'Н',
              '&NegativeMediumSpace;': '​',
              '&NegativeThickSpace;': '​',
              '&NegativeThinSpace;': '​',
              '&NegativeVeryThinSpace;': '​',
              '&NestedGreaterGreater;': '≫',
              '&NestedLessLess;': '≪',
              '&NewLine;': '\n',
              '&Nfr;': '𝔑',
              '&NoBreak;': '⁠',
              '&NonBreakingSpace;': ' ',
              '&Nopf;': 'ℕ',
              '&Not;': '⫬',
              '&NotCongruent;': '≢',
              '&NotCupCap;': '≭',
              '&NotDoubleVerticalBar;': '∦',
              '&NotElement;': '∉',
              '&NotEqual;': '≠',
              '&NotEqualTilde;': '≂̸',
              '&NotExists;': '∄',
              '&NotGreater;': '≯',
              '&NotGreaterEqual;': '≱',
              '&NotGreaterFullEqual;': '≧̸',
              '&NotGreaterGreater;': '≫̸',
              '&NotGreaterLess;': '≹',
              '&NotGreaterSlantEqual;': '⩾̸',
              '&NotGreaterTilde;': '≵',
              '&NotHumpDownHump;': '≎̸',
              '&NotHumpEqual;': '≏̸',
              '&NotLeftTriangle;': '⋪',
              '&NotLeftTriangleBar;': '⧏̸',
              '&NotLeftTriangleEqual;': '⋬',
              '&NotLess;': '≮',
              '&NotLessEqual;': '≰',
              '&NotLessGreater;': '≸',
              '&NotLessLess;': '≪̸',
              '&NotLessSlantEqual;': '⩽̸',
              '&NotLessTilde;': '≴',
              '&NotNestedGreaterGreater;': '⪢̸',
              '&NotNestedLessLess;': '⪡̸',
              '&NotPrecedes;': '⊀',
              '&NotPrecedesEqual;': '⪯̸',
              '&NotPrecedesSlantEqual;': '⋠',
              '&NotReverseElement;': '∌',
              '&NotRightTriangle;': '⋫',
              '&NotRightTriangleBar;': '⧐̸',
              '&NotRightTriangleEqual;': '⋭',
              '&NotSquareSubset;': '⊏̸',
              '&NotSquareSubsetEqual;': '⋢',
              '&NotSquareSuperset;': '⊐̸',
              '&NotSquareSupersetEqual;': '⋣',
              '&NotSubset;': '⊂⃒',
              '&NotSubsetEqual;': '⊈',
              '&NotSucceeds;': '⊁',
              '&NotSucceedsEqual;': '⪰̸',
              '&NotSucceedsSlantEqual;': '⋡',
              '&NotSucceedsTilde;': '≿̸',
              '&NotSuperset;': '⊃⃒',
              '&NotSupersetEqual;': '⊉',
              '&NotTilde;': '≁',
              '&NotTildeEqual;': '≄',
              '&NotTildeFullEqual;': '≇',
              '&NotTildeTilde;': '≉',
              '&NotVerticalBar;': '∤',
              '&Nscr;': '𝒩',
              '&Ntilde': 'Ñ',
              '&Ntilde;': 'Ñ',
              '&Nu;': 'Ν',
              '&OElig;': 'Œ',
              '&Oacute': 'Ó',
              '&Oacute;': 'Ó',
              '&Ocirc': 'Ô',
              '&Ocirc;': 'Ô',
              '&Ocy;': 'О',
              '&Odblac;': 'Ő',
              '&Ofr;': '𝔒',
              '&Ograve': 'Ò',
              '&Ograve;': 'Ò',
              '&Omacr;': 'Ō',
              '&Omega;': 'Ω',
              '&Omicron;': 'Ο',
              '&Oopf;': '𝕆',
              '&OpenCurlyDoubleQuote;': '“',
              '&OpenCurlyQuote;': '‘',
              '&Or;': '⩔',
              '&Oscr;': '𝒪',
              '&Oslash': 'Ø',
              '&Oslash;': 'Ø',
              '&Otilde': 'Õ',
              '&Otilde;': 'Õ',
              '&Otimes;': '⨷',
              '&Ouml': 'Ö',
              '&Ouml;': 'Ö',
              '&OverBar;': '‾',
              '&OverBrace;': '⏞',
              '&OverBracket;': '⎴',
              '&OverParenthesis;': '⏜',
              '&PartialD;': '∂',
              '&Pcy;': 'П',
              '&Pfr;': '𝔓',
              '&Phi;': 'Φ',
              '&Pi;': 'Π',
              '&PlusMinus;': '±',
              '&Poincareplane;': 'ℌ',
              '&Popf;': 'ℙ',
              '&Pr;': '⪻',
              '&Precedes;': '≺',
              '&PrecedesEqual;': '⪯',
              '&PrecedesSlantEqual;': '≼',
              '&PrecedesTilde;': '≾',
              '&Prime;': '″',
              '&Product;': '∏',
              '&Proportion;': '∷',
              '&Proportional;': '∝',
              '&Pscr;': '𝒫',
              '&Psi;': 'Ψ',
              '&QUOT': '"',
              '&QUOT;': '"',
              '&Qfr;': '𝔔',
              '&Qopf;': 'ℚ',
              '&Qscr;': '𝒬',
              '&RBarr;': '⤐',
              '&REG': '®',
              '&REG;': '®',
              '&Racute;': 'Ŕ',
              '&Rang;': '⟫',
              '&Rarr;': '↠',
              '&Rarrtl;': '⤖',
              '&Rcaron;': 'Ř',
              '&Rcedil;': 'Ŗ',
              '&Rcy;': 'Р',
              '&Re;': 'ℜ',
              '&ReverseElement;': '∋',
              '&ReverseEquilibrium;': '⇋',
              '&ReverseUpEquilibrium;': '⥯',
              '&Rfr;': 'ℜ',
              '&Rho;': 'Ρ',
              '&RightAngleBracket;': '⟩',
              '&RightArrow;': '→',
              '&RightArrowBar;': '⇥',
              '&RightArrowLeftArrow;': '⇄',
              '&RightCeiling;': '⌉',
              '&RightDoubleBracket;': '⟧',
              '&RightDownTeeVector;': '⥝',
              '&RightDownVector;': '⇂',
              '&RightDownVectorBar;': '⥕',
              '&RightFloor;': '⌋',
              '&RightTee;': '⊢',
              '&RightTeeArrow;': '↦',
              '&RightTeeVector;': '⥛',
              '&RightTriangle;': '⊳',
              '&RightTriangleBar;': '⧐',
              '&RightTriangleEqual;': '⊵',
              '&RightUpDownVector;': '⥏',
              '&RightUpTeeVector;': '⥜',
              '&RightUpVector;': '↾',
              '&RightUpVectorBar;': '⥔',
              '&RightVector;': '⇀',
              '&RightVectorBar;': '⥓',
              '&Rightarrow;': '⇒',
              '&Ropf;': 'ℝ',
              '&RoundImplies;': '⥰',
              '&Rrightarrow;': '⇛',
              '&Rscr;': 'ℛ',
              '&Rsh;': '↱',
              '&RuleDelayed;': '⧴',
              '&SHCHcy;': 'Щ',
              '&SHcy;': 'Ш',
              '&SOFTcy;': 'Ь',
              '&Sacute;': 'Ś',
              '&Sc;': '⪼',
              '&Scaron;': 'Š',
              '&Scedil;': 'Ş',
              '&Scirc;': 'Ŝ',
              '&Scy;': 'С',
              '&Sfr;': '𝔖',
              '&ShortDownArrow;': '↓',
              '&ShortLeftArrow;': '←',
              '&ShortRightArrow;': '→',
              '&ShortUpArrow;': '↑',
              '&Sigma;': 'Σ',
              '&SmallCircle;': '∘',
              '&Sopf;': '𝕊',
              '&Sqrt;': '√',
              '&Square;': '□',
              '&SquareIntersection;': '⊓',
              '&SquareSubset;': '⊏',
              '&SquareSubsetEqual;': '⊑',
              '&SquareSuperset;': '⊐',
              '&SquareSupersetEqual;': '⊒',
              '&SquareUnion;': '⊔',
              '&Sscr;': '𝒮',
              '&Star;': '⋆',
              '&Sub;': '⋐',
              '&Subset;': '⋐',
              '&SubsetEqual;': '⊆',
              '&Succeeds;': '≻',
              '&SucceedsEqual;': '⪰',
              '&SucceedsSlantEqual;': '≽',
              '&SucceedsTilde;': '≿',
              '&SuchThat;': '∋',
              '&Sum;': '∑',
              '&Sup;': '⋑',
              '&Superset;': '⊃',
              '&SupersetEqual;': '⊇',
              '&Supset;': '⋑',
              '&THORN': 'Þ',
              '&THORN;': 'Þ',
              '&TRADE;': '™',
              '&TSHcy;': 'Ћ',
              '&TScy;': 'Ц',
              '&Tab;': '\t',
              '&Tau;': 'Τ',
              '&Tcaron;': 'Ť',
              '&Tcedil;': 'Ţ',
              '&Tcy;': 'Т',
              '&Tfr;': '𝔗',
              '&Therefore;': '∴',
              '&Theta;': 'Θ',
              '&ThickSpace;': '  ',
              '&ThinSpace;': ' ',
              '&Tilde;': '∼',
              '&TildeEqual;': '≃',
              '&TildeFullEqual;': '≅',
              '&TildeTilde;': '≈',
              '&Topf;': '𝕋',
              '&TripleDot;': '⃛',
              '&Tscr;': '𝒯',
              '&Tstrok;': 'Ŧ',
              '&Uacute': 'Ú',
              '&Uacute;': 'Ú',
              '&Uarr;': '↟',
              '&Uarrocir;': '⥉',
              '&Ubrcy;': 'Ў',
              '&Ubreve;': 'Ŭ',
              '&Ucirc': 'Û',
              '&Ucirc;': 'Û',
              '&Ucy;': 'У',
              '&Udblac;': 'Ű',
              '&Ufr;': '𝔘',
              '&Ugrave': 'Ù',
              '&Ugrave;': 'Ù',
              '&Umacr;': 'Ū',
              '&UnderBar;': '_',
              '&UnderBrace;': '⏟',
              '&UnderBracket;': '⎵',
              '&UnderParenthesis;': '⏝',
              '&Union;': '⋃',
              '&UnionPlus;': '⊎',
              '&Uogon;': 'Ų',
              '&Uopf;': '𝕌',
              '&UpArrow;': '↑',
              '&UpArrowBar;': '⤒',
              '&UpArrowDownArrow;': '⇅',
              '&UpDownArrow;': '↕',
              '&UpEquilibrium;': '⥮',
              '&UpTee;': '⊥',
              '&UpTeeArrow;': '↥',
              '&Uparrow;': '⇑',
              '&Updownarrow;': '⇕',
              '&UpperLeftArrow;': '↖',
              '&UpperRightArrow;': '↗',
              '&Upsi;': 'ϒ',
              '&Upsilon;': 'Υ',
              '&Uring;': 'Ů',
              '&Uscr;': '𝒰',
              '&Utilde;': 'Ũ',
              '&Uuml': 'Ü',
              '&Uuml;': 'Ü',
              '&VDash;': '⊫',
              '&Vbar;': '⫫',
              '&Vcy;': 'В',
              '&Vdash;': '⊩',
              '&Vdashl;': '⫦',
              '&Vee;': '⋁',
              '&Verbar;': '‖',
              '&Vert;': '‖',
              '&VerticalBar;': '∣',
              '&VerticalLine;': '|',
              '&VerticalSeparator;': '❘',
              '&VerticalTilde;': '≀',
              '&VeryThinSpace;': ' ',
              '&Vfr;': '𝔙',
              '&Vopf;': '𝕍',
              '&Vscr;': '𝒱',
              '&Vvdash;': '⊪',
              '&Wcirc;': 'Ŵ',
              '&Wedge;': '⋀',
              '&Wfr;': '𝔚',
              '&Wopf;': '𝕎',
              '&Wscr;': '𝒲',
              '&Xfr;': '𝔛',
              '&Xi;': 'Ξ',
              '&Xopf;': '𝕏',
              '&Xscr;': '𝒳',
              '&YAcy;': 'Я',
              '&YIcy;': 'Ї',
              '&YUcy;': 'Ю',
              '&Yacute': 'Ý',
              '&Yacute;': 'Ý',
              '&Ycirc;': 'Ŷ',
              '&Ycy;': 'Ы',
              '&Yfr;': '𝔜',
              '&Yopf;': '𝕐',
              '&Yscr;': '𝒴',
              '&Yuml;': 'Ÿ',
              '&ZHcy;': 'Ж',
              '&Zacute;': 'Ź',
              '&Zcaron;': 'Ž',
              '&Zcy;': 'З',
              '&Zdot;': 'Ż',
              '&ZeroWidthSpace;': '​',
              '&Zeta;': 'Ζ',
              '&Zfr;': 'ℨ',
              '&Zopf;': 'ℤ',
              '&Zscr;': '𝒵',
              '&aacute': 'á',
              '&aacute;': 'á',
              '&abreve;': 'ă',
              '&ac;': '∾',
              '&acE;': '∾̳',
              '&acd;': '∿',
              '&acirc': 'â',
              '&acirc;': 'â',
              '&acute': '´',
              '&acute;': '´',
              '&acy;': 'а',
              '&aelig': 'æ',
              '&aelig;': 'æ',
              '&af;': '⁡',
              '&afr;': '𝔞',
              '&agrave': 'à',
              '&agrave;': 'à',
              '&alefsym;': 'ℵ',
              '&aleph;': 'ℵ',
              '&alpha;': 'α',
              '&amacr;': 'ā',
              '&amalg;': '⨿',
              '&amp': '&',
              '&amp;': '&',
              '&and;': '∧',
              '&andand;': '⩕',
              '&andd;': '⩜',
              '&andslope;': '⩘',
              '&andv;': '⩚',
              '&ang;': '∠',
              '&ange;': '⦤',
              '&angle;': '∠',
              '&angmsd;': '∡',
              '&angmsdaa;': '⦨',
              '&angmsdab;': '⦩',
              '&angmsdac;': '⦪',
              '&angmsdad;': '⦫',
              '&angmsdae;': '⦬',
              '&angmsdaf;': '⦭',
              '&angmsdag;': '⦮',
              '&angmsdah;': '⦯',
              '&angrt;': '∟',
              '&angrtvb;': '⊾',
              '&angrtvbd;': '⦝',
              '&angsph;': '∢',
              '&angst;': 'Å',
              '&angzarr;': '⍼',
              '&aogon;': 'ą',
              '&aopf;': '𝕒',
              '&ap;': '≈',
              '&apE;': '⩰',
              '&apacir;': '⩯',
              '&ape;': '≊',
              '&apid;': '≋',
              '&apos;': "'",
              '&approx;': '≈',
              '&approxeq;': '≊',
              '&aring': 'å',
              '&aring;': 'å',
              '&ascr;': '𝒶',
              '&ast;': '*',
              '&asymp;': '≈',
              '&asympeq;': '≍',
              '&atilde': 'ã',
              '&atilde;': 'ã',
              '&auml': 'ä',
              '&auml;': 'ä',
              '&awconint;': '∳',
              '&awint;': '⨑',
              '&bNot;': '⫭',
              '&backcong;': '≌',
              '&backepsilon;': '϶',
              '&backprime;': '‵',
              '&backsim;': '∽',
              '&backsimeq;': '⋍',
              '&barvee;': '⊽',
              '&barwed;': '⌅',
              '&barwedge;': '⌅',
              '&bbrk;': '⎵',
              '&bbrktbrk;': '⎶',
              '&bcong;': '≌',
              '&bcy;': 'б',
              '&bdquo;': '„',
              '&becaus;': '∵',
              '&because;': '∵',
              '&bemptyv;': '⦰',
              '&bepsi;': '϶',
              '&bernou;': 'ℬ',
              '&beta;': 'β',
              '&beth;': 'ℶ',
              '&between;': '≬',
              '&bfr;': '𝔟',
              '&bigcap;': '⋂',
              '&bigcirc;': '◯',
              '&bigcup;': '⋃',
              '&bigodot;': '⨀',
              '&bigoplus;': '⨁',
              '&bigotimes;': '⨂',
              '&bigsqcup;': '⨆',
              '&bigstar;': '★',
              '&bigtriangledown;': '▽',
              '&bigtriangleup;': '△',
              '&biguplus;': '⨄',
              '&bigvee;': '⋁',
              '&bigwedge;': '⋀',
              '&bkarow;': '⤍',
              '&blacklozenge;': '⧫',
              '&blacksquare;': '▪',
              '&blacktriangle;': '▴',
              '&blacktriangledown;': '▾',
              '&blacktriangleleft;': '◂',
              '&blacktriangleright;': '▸',
              '&blank;': '␣',
              '&blk12;': '▒',
              '&blk14;': '░',
              '&blk34;': '▓',
              '&block;': '█',
              '&bne;': '=⃥',
              '&bnequiv;': '≡⃥',
              '&bnot;': '⌐',
              '&bopf;': '𝕓',
              '&bot;': '⊥',
              '&bottom;': '⊥',
              '&bowtie;': '⋈',
              '&boxDL;': '╗',
              '&boxDR;': '╔',
              '&boxDl;': '╖',
              '&boxDr;': '╓',
              '&boxH;': '═',
              '&boxHD;': '╦',
              '&boxHU;': '╩',
              '&boxHd;': '╤',
              '&boxHu;': '╧',
              '&boxUL;': '╝',
              '&boxUR;': '╚',
              '&boxUl;': '╜',
              '&boxUr;': '╙',
              '&boxV;': '║',
              '&boxVH;': '╬',
              '&boxVL;': '╣',
              '&boxVR;': '╠',
              '&boxVh;': '╫',
              '&boxVl;': '╢',
              '&boxVr;': '╟',
              '&boxbox;': '⧉',
              '&boxdL;': '╕',
              '&boxdR;': '╒',
              '&boxdl;': '┐',
              '&boxdr;': '┌',
              '&boxh;': '─',
              '&boxhD;': '╥',
              '&boxhU;': '╨',
              '&boxhd;': '┬',
              '&boxhu;': '┴',
              '&boxminus;': '⊟',
              '&boxplus;': '⊞',
              '&boxtimes;': '⊠',
              '&boxuL;': '╛',
              '&boxuR;': '╘',
              '&boxul;': '┘',
              '&boxur;': '└',
              '&boxv;': '│',
              '&boxvH;': '╪',
              '&boxvL;': '╡',
              '&boxvR;': '╞',
              '&boxvh;': '┼',
              '&boxvl;': '┤',
              '&boxvr;': '├',
              '&bprime;': '‵',
              '&breve;': '˘',
              '&brvbar': '¦',
              '&brvbar;': '¦',
              '&bscr;': '𝒷',
              '&bsemi;': '⁏',
              '&bsim;': '∽',
              '&bsime;': '⋍',
              '&bsol;': '\\',
              '&bsolb;': '⧅',
              '&bsolhsub;': '⟈',
              '&bull;': '•',
              '&bullet;': '•',
              '&bump;': '≎',
              '&bumpE;': '⪮',
              '&bumpe;': '≏',
              '&bumpeq;': '≏',
              '&cacute;': 'ć',
              '&cap;': '∩',
              '&capand;': '⩄',
              '&capbrcup;': '⩉',
              '&capcap;': '⩋',
              '&capcup;': '⩇',
              '&capdot;': '⩀',
              '&caps;': '∩︀',
              '&caret;': '⁁',
              '&caron;': 'ˇ',
              '&ccaps;': '⩍',
              '&ccaron;': 'č',
              '&ccedil': 'ç',
              '&ccedil;': 'ç',
              '&ccirc;': 'ĉ',
              '&ccups;': '⩌',
              '&ccupssm;': '⩐',
              '&cdot;': 'ċ',
              '&cedil': '¸',
              '&cedil;': '¸',
              '&cemptyv;': '⦲',
              '&cent': '¢',
              '&cent;': '¢',
              '&centerdot;': '·',
              '&cfr;': '𝔠',
              '&chcy;': 'ч',
              '&check;': '✓',
              '&checkmark;': '✓',
              '&chi;': 'χ',
              '&cir;': '○',
              '&cirE;': '⧃',
              '&circ;': 'ˆ',
              '&circeq;': '≗',
              '&circlearrowleft;': '↺',
              '&circlearrowright;': '↻',
              '&circledR;': '®',
              '&circledS;': 'Ⓢ',
              '&circledast;': '⊛',
              '&circledcirc;': '⊚',
              '&circleddash;': '⊝',
              '&cire;': '≗',
              '&cirfnint;': '⨐',
              '&cirmid;': '⫯',
              '&cirscir;': '⧂',
              '&clubs;': '♣',
              '&clubsuit;': '♣',
              '&colon;': ':',
              '&colone;': '≔',
              '&coloneq;': '≔',
              '&comma;': ',',
              '&commat;': '@',
              '&comp;': '∁',
              '&compfn;': '∘',
              '&complement;': '∁',
              '&complexes;': 'ℂ',
              '&cong;': '≅',
              '&congdot;': '⩭',
              '&conint;': '∮',
              '&copf;': '𝕔',
              '&coprod;': '∐',
              '&copy': '©',
              '&copy;': '©',
              '&copysr;': '℗',
              '&crarr;': '↵',
              '&cross;': '✗',
              '&cscr;': '𝒸',
              '&csub;': '⫏',
              '&csube;': '⫑',
              '&csup;': '⫐',
              '&csupe;': '⫒',
              '&ctdot;': '⋯',
              '&cudarrl;': '⤸',
              '&cudarrr;': '⤵',
              '&cuepr;': '⋞',
              '&cuesc;': '⋟',
              '&cularr;': '↶',
              '&cularrp;': '⤽',
              '&cup;': '∪',
              '&cupbrcap;': '⩈',
              '&cupcap;': '⩆',
              '&cupcup;': '⩊',
              '&cupdot;': '⊍',
              '&cupor;': '⩅',
              '&cups;': '∪︀',
              '&curarr;': '↷',
              '&curarrm;': '⤼',
              '&curlyeqprec;': '⋞',
              '&curlyeqsucc;': '⋟',
              '&curlyvee;': '⋎',
              '&curlywedge;': '⋏',
              '&curren': '¤',
              '&curren;': '¤',
              '&curvearrowleft;': '↶',
              '&curvearrowright;': '↷',
              '&cuvee;': '⋎',
              '&cuwed;': '⋏',
              '&cwconint;': '∲',
              '&cwint;': '∱',
              '&cylcty;': '⌭',
              '&dArr;': '⇓',
              '&dHar;': '⥥',
              '&dagger;': '†',
              '&daleth;': 'ℸ',
              '&darr;': '↓',
              '&dash;': '‐',
              '&dashv;': '⊣',
              '&dbkarow;': '⤏',
              '&dblac;': '˝',
              '&dcaron;': 'ď',
              '&dcy;': 'д',
              '&dd;': 'ⅆ',
              '&ddagger;': '‡',
              '&ddarr;': '⇊',
              '&ddotseq;': '⩷',
              '&deg': '°',
              '&deg;': '°',
              '&delta;': 'δ',
              '&demptyv;': '⦱',
              '&dfisht;': '⥿',
              '&dfr;': '𝔡',
              '&dharl;': '⇃',
              '&dharr;': '⇂',
              '&diam;': '⋄',
              '&diamond;': '⋄',
              '&diamondsuit;': '♦',
              '&diams;': '♦',
              '&die;': '¨',
              '&digamma;': 'ϝ',
              '&disin;': '⋲',
              '&div;': '÷',
              '&divide': '÷',
              '&divide;': '÷',
              '&divideontimes;': '⋇',
              '&divonx;': '⋇',
              '&djcy;': 'ђ',
              '&dlcorn;': '⌞',
              '&dlcrop;': '⌍',
              '&dollar;': '$',
              '&dopf;': '𝕕',
              '&dot;': '˙',
              '&doteq;': '≐',
              '&doteqdot;': '≑',
              '&dotminus;': '∸',
              '&dotplus;': '∔',
              '&dotsquare;': '⊡',
              '&doublebarwedge;': '⌆',
              '&downarrow;': '↓',
              '&downdownarrows;': '⇊',
              '&downharpoonleft;': '⇃',
              '&downharpoonright;': '⇂',
              '&drbkarow;': '⤐',
              '&drcorn;': '⌟',
              '&drcrop;': '⌌',
              '&dscr;': '𝒹',
              '&dscy;': 'ѕ',
              '&dsol;': '⧶',
              '&dstrok;': 'đ',
              '&dtdot;': '⋱',
              '&dtri;': '▿',
              '&dtrif;': '▾',
              '&duarr;': '⇵',
              '&duhar;': '⥯',
              '&dwangle;': '⦦',
              '&dzcy;': 'џ',
              '&dzigrarr;': '⟿',
              '&eDDot;': '⩷',
              '&eDot;': '≑',
              '&eacute': 'é',
              '&eacute;': 'é',
              '&easter;': '⩮',
              '&ecaron;': 'ě',
              '&ecir;': '≖',
              '&ecirc': 'ê',
              '&ecirc;': 'ê',
              '&ecolon;': '≕',
              '&ecy;': 'э',
              '&edot;': 'ė',
              '&ee;': 'ⅇ',
              '&efDot;': '≒',
              '&efr;': '𝔢',
              '&eg;': '⪚',
              '&egrave': 'è',
              '&egrave;': 'è',
              '&egs;': '⪖',
              '&egsdot;': '⪘',
              '&el;': '⪙',
              '&elinters;': '⏧',
              '&ell;': 'ℓ',
              '&els;': '⪕',
              '&elsdot;': '⪗',
              '&emacr;': 'ē',
              '&empty;': '∅',
              '&emptyset;': '∅',
              '&emptyv;': '∅',
              '&emsp13;': ' ',
              '&emsp14;': ' ',
              '&emsp;': ' ',
              '&eng;': 'ŋ',
              '&ensp;': ' ',
              '&eogon;': 'ę',
              '&eopf;': '𝕖',
              '&epar;': '⋕',
              '&eparsl;': '⧣',
              '&eplus;': '⩱',
              '&epsi;': 'ε',
              '&epsilon;': 'ε',
              '&epsiv;': 'ϵ',
              '&eqcirc;': '≖',
              '&eqcolon;': '≕',
              '&eqsim;': '≂',
              '&eqslantgtr;': '⪖',
              '&eqslantless;': '⪕',
              '&equals;': '=',
              '&equest;': '≟',
              '&equiv;': '≡',
              '&equivDD;': '⩸',
              '&eqvparsl;': '⧥',
              '&erDot;': '≓',
              '&erarr;': '⥱',
              '&escr;': 'ℯ',
              '&esdot;': '≐',
              '&esim;': '≂',
              '&eta;': 'η',
              '&eth': 'ð',
              '&eth;': 'ð',
              '&euml': 'ë',
              '&euml;': 'ë',
              '&euro;': '€',
              '&excl;': '!',
              '&exist;': '∃',
              '&expectation;': 'ℰ',
              '&exponentiale;': 'ⅇ',
              '&fallingdotseq;': '≒',
              '&fcy;': 'ф',
              '&female;': '♀',
              '&ffilig;': 'ﬃ',
              '&fflig;': 'ﬀ',
              '&ffllig;': 'ﬄ',
              '&ffr;': '𝔣',
              '&filig;': 'ﬁ',
              '&fjlig;': 'fj',
              '&flat;': '♭',
              '&fllig;': 'ﬂ',
              '&fltns;': '▱',
              '&fnof;': 'ƒ',
              '&fopf;': '𝕗',
              '&forall;': '∀',
              '&fork;': '⋔',
              '&forkv;': '⫙',
              '&fpartint;': '⨍',
              '&frac12': '½',
              '&frac12;': '½',
              '&frac13;': '⅓',
              '&frac14': '¼',
              '&frac14;': '¼',
              '&frac15;': '⅕',
              '&frac16;': '⅙',
              '&frac18;': '⅛',
              '&frac23;': '⅔',
              '&frac25;': '⅖',
              '&frac34': '¾',
              '&frac34;': '¾',
              '&frac35;': '⅗',
              '&frac38;': '⅜',
              '&frac45;': '⅘',
              '&frac56;': '⅚',
              '&frac58;': '⅝',
              '&frac78;': '⅞',
              '&frasl;': '⁄',
              '&frown;': '⌢',
              '&fscr;': '𝒻',
              '&gE;': '≧',
              '&gEl;': '⪌',
              '&gacute;': 'ǵ',
              '&gamma;': 'γ',
              '&gammad;': 'ϝ',
              '&gap;': '⪆',
              '&gbreve;': 'ğ',
              '&gcirc;': 'ĝ',
              '&gcy;': 'г',
              '&gdot;': 'ġ',
              '&ge;': '≥',
              '&gel;': '⋛',
              '&geq;': '≥',
              '&geqq;': '≧',
              '&geqslant;': '⩾',
              '&ges;': '⩾',
              '&gescc;': '⪩',
              '&gesdot;': '⪀',
              '&gesdoto;': '⪂',
              '&gesdotol;': '⪄',
              '&gesl;': '⋛︀',
              '&gesles;': '⪔',
              '&gfr;': '𝔤',
              '&gg;': '≫',
              '&ggg;': '⋙',
              '&gimel;': 'ℷ',
              '&gjcy;': 'ѓ',
              '&gl;': '≷',
              '&glE;': '⪒',
              '&gla;': '⪥',
              '&glj;': '⪤',
              '&gnE;': '≩',
              '&gnap;': '⪊',
              '&gnapprox;': '⪊',
              '&gne;': '⪈',
              '&gneq;': '⪈',
              '&gneqq;': '≩',
              '&gnsim;': '⋧',
              '&gopf;': '𝕘',
              '&grave;': '`',
              '&gscr;': 'ℊ',
              '&gsim;': '≳',
              '&gsime;': '⪎',
              '&gsiml;': '⪐',
              '&gt': '>',
              '&gt;': '>',
              '&gtcc;': '⪧',
              '&gtcir;': '⩺',
              '&gtdot;': '⋗',
              '&gtlPar;': '⦕',
              '&gtquest;': '⩼',
              '&gtrapprox;': '⪆',
              '&gtrarr;': '⥸',
              '&gtrdot;': '⋗',
              '&gtreqless;': '⋛',
              '&gtreqqless;': '⪌',
              '&gtrless;': '≷',
              '&gtrsim;': '≳',
              '&gvertneqq;': '≩︀',
              '&gvnE;': '≩︀',
              '&hArr;': '⇔',
              '&hairsp;': ' ',
              '&half;': '½',
              '&hamilt;': 'ℋ',
              '&hardcy;': 'ъ',
              '&harr;': '↔',
              '&harrcir;': '⥈',
              '&harrw;': '↭',
              '&hbar;': 'ℏ',
              '&hcirc;': 'ĥ',
              '&hearts;': '♥',
              '&heartsuit;': '♥',
              '&hellip;': '…',
              '&hercon;': '⊹',
              '&hfr;': '𝔥',
              '&hksearow;': '⤥',
              '&hkswarow;': '⤦',
              '&hoarr;': '⇿',
              '&homtht;': '∻',
              '&hookleftarrow;': '↩',
              '&hookrightarrow;': '↪',
              '&hopf;': '𝕙',
              '&horbar;': '―',
              '&hscr;': '𝒽',
              '&hslash;': 'ℏ',
              '&hstrok;': 'ħ',
              '&hybull;': '⁃',
              '&hyphen;': '‐',
              '&iacute': 'í',
              '&iacute;': 'í',
              '&ic;': '⁣',
              '&icirc': 'î',
              '&icirc;': 'î',
              '&icy;': 'и',
              '&iecy;': 'е',
              '&iexcl': '¡',
              '&iexcl;': '¡',
              '&iff;': '⇔',
              '&ifr;': '𝔦',
              '&igrave': 'ì',
              '&igrave;': 'ì',
              '&ii;': 'ⅈ',
              '&iiiint;': '⨌',
              '&iiint;': '∭',
              '&iinfin;': '⧜',
              '&iiota;': '℩',
              '&ijlig;': 'ĳ',
              '&imacr;': 'ī',
              '&image;': 'ℑ',
              '&imagline;': 'ℐ',
              '&imagpart;': 'ℑ',
              '&imath;': 'ı',
              '&imof;': '⊷',
              '&imped;': 'Ƶ',
              '&in;': '∈',
              '&incare;': '℅',
              '&infin;': '∞',
              '&infintie;': '⧝',
              '&inodot;': 'ı',
              '&int;': '∫',
              '&intcal;': '⊺',
              '&integers;': 'ℤ',
              '&intercal;': '⊺',
              '&intlarhk;': '⨗',
              '&intprod;': '⨼',
              '&iocy;': 'ё',
              '&iogon;': 'į',
              '&iopf;': '𝕚',
              '&iota;': 'ι',
              '&iprod;': '⨼',
              '&iquest': '¿',
              '&iquest;': '¿',
              '&iscr;': '𝒾',
              '&isin;': '∈',
              '&isinE;': '⋹',
              '&isindot;': '⋵',
              '&isins;': '⋴',
              '&isinsv;': '⋳',
              '&isinv;': '∈',
              '&it;': '⁢',
              '&itilde;': 'ĩ',
              '&iukcy;': 'і',
              '&iuml': 'ï',
              '&iuml;': 'ï',
              '&jcirc;': 'ĵ',
              '&jcy;': 'й',
              '&jfr;': '𝔧',
              '&jmath;': 'ȷ',
              '&jopf;': '𝕛',
              '&jscr;': '𝒿',
              '&jsercy;': 'ј',
              '&jukcy;': 'є',
              '&kappa;': 'κ',
              '&kappav;': 'ϰ',
              '&kcedil;': 'ķ',
              '&kcy;': 'к',
              '&kfr;': '𝔨',
              '&kgreen;': 'ĸ',
              '&khcy;': 'х',
              '&kjcy;': 'ќ',
              '&kopf;': '𝕜',
              '&kscr;': '𝓀',
              '&lAarr;': '⇚',
              '&lArr;': '⇐',
              '&lAtail;': '⤛',
              '&lBarr;': '⤎',
              '&lE;': '≦',
              '&lEg;': '⪋',
              '&lHar;': '⥢',
              '&lacute;': 'ĺ',
              '&laemptyv;': '⦴',
              '&lagran;': 'ℒ',
              '&lambda;': 'λ',
              '&lang;': '⟨',
              '&langd;': '⦑',
              '&langle;': '⟨',
              '&lap;': '⪅',
              '&laquo': '«',
              '&laquo;': '«',
              '&larr;': '←',
              '&larrb;': '⇤',
              '&larrbfs;': '⤟',
              '&larrfs;': '⤝',
              '&larrhk;': '↩',
              '&larrlp;': '↫',
              '&larrpl;': '⤹',
              '&larrsim;': '⥳',
              '&larrtl;': '↢',
              '&lat;': '⪫',
              '&latail;': '⤙',
              '&late;': '⪭',
              '&lates;': '⪭︀',
              '&lbarr;': '⤌',
              '&lbbrk;': '❲',
              '&lbrace;': '{',
              '&lbrack;': '[',
              '&lbrke;': '⦋',
              '&lbrksld;': '⦏',
              '&lbrkslu;': '⦍',
              '&lcaron;': 'ľ',
              '&lcedil;': 'ļ',
              '&lceil;': '⌈',
              '&lcub;': '{',
              '&lcy;': 'л',
              '&ldca;': '⤶',
              '&ldquo;': '“',
              '&ldquor;': '„',
              '&ldrdhar;': '⥧',
              '&ldrushar;': '⥋',
              '&ldsh;': '↲',
              '&le;': '≤',
              '&leftarrow;': '←',
              '&leftarrowtail;': '↢',
              '&leftharpoondown;': '↽',
              '&leftharpoonup;': '↼',
              '&leftleftarrows;': '⇇',
              '&leftrightarrow;': '↔',
              '&leftrightarrows;': '⇆',
              '&leftrightharpoons;': '⇋',
              '&leftrightsquigarrow;': '↭',
              '&leftthreetimes;': '⋋',
              '&leg;': '⋚',
              '&leq;': '≤',
              '&leqq;': '≦',
              '&leqslant;': '⩽',
              '&les;': '⩽',
              '&lescc;': '⪨',
              '&lesdot;': '⩿',
              '&lesdoto;': '⪁',
              '&lesdotor;': '⪃',
              '&lesg;': '⋚︀',
              '&lesges;': '⪓',
              '&lessapprox;': '⪅',
              '&lessdot;': '⋖',
              '&lesseqgtr;': '⋚',
              '&lesseqqgtr;': '⪋',
              '&lessgtr;': '≶',
              '&lesssim;': '≲',
              '&lfisht;': '⥼',
              '&lfloor;': '⌊',
              '&lfr;': '𝔩',
              '&lg;': '≶',
              '&lgE;': '⪑',
              '&lhard;': '↽',
              '&lharu;': '↼',
              '&lharul;': '⥪',
              '&lhblk;': '▄',
              '&ljcy;': 'љ',
              '&ll;': '≪',
              '&llarr;': '⇇',
              '&llcorner;': '⌞',
              '&llhard;': '⥫',
              '&lltri;': '◺',
              '&lmidot;': 'ŀ',
              '&lmoust;': '⎰',
              '&lmoustache;': '⎰',
              '&lnE;': '≨',
              '&lnap;': '⪉',
              '&lnapprox;': '⪉',
              '&lne;': '⪇',
              '&lneq;': '⪇',
              '&lneqq;': '≨',
              '&lnsim;': '⋦',
              '&loang;': '⟬',
              '&loarr;': '⇽',
              '&lobrk;': '⟦',
              '&longleftarrow;': '⟵',
              '&longleftrightarrow;': '⟷',
              '&longmapsto;': '⟼',
              '&longrightarrow;': '⟶',
              '&looparrowleft;': '↫',
              '&looparrowright;': '↬',
              '&lopar;': '⦅',
              '&lopf;': '𝕝',
              '&loplus;': '⨭',
              '&lotimes;': '⨴',
              '&lowast;': '∗',
              '&lowbar;': '_',
              '&loz;': '◊',
              '&lozenge;': '◊',
              '&lozf;': '⧫',
              '&lpar;': '(',
              '&lparlt;': '⦓',
              '&lrarr;': '⇆',
              '&lrcorner;': '⌟',
              '&lrhar;': '⇋',
              '&lrhard;': '⥭',
              '&lrm;': '‎',
              '&lrtri;': '⊿',
              '&lsaquo;': '‹',
              '&lscr;': '𝓁',
              '&lsh;': '↰',
              '&lsim;': '≲',
              '&lsime;': '⪍',
              '&lsimg;': '⪏',
              '&lsqb;': '[',
              '&lsquo;': '‘',
              '&lsquor;': '‚',
              '&lstrok;': 'ł',
              '&lt': '<',
              '&lt;': '<',
              '&ltcc;': '⪦',
              '&ltcir;': '⩹',
              '&ltdot;': '⋖',
              '&lthree;': '⋋',
              '&ltimes;': '⋉',
              '&ltlarr;': '⥶',
              '&ltquest;': '⩻',
              '&ltrPar;': '⦖',
              '&ltri;': '◃',
              '&ltrie;': '⊴',
              '&ltrif;': '◂',
              '&lurdshar;': '⥊',
              '&luruhar;': '⥦',
              '&lvertneqq;': '≨︀',
              '&lvnE;': '≨︀',
              '&mDDot;': '∺',
              '&macr': '¯',
              '&macr;': '¯',
              '&male;': '♂',
              '&malt;': '✠',
              '&maltese;': '✠',
              '&map;': '↦',
              '&mapsto;': '↦',
              '&mapstodown;': '↧',
              '&mapstoleft;': '↤',
              '&mapstoup;': '↥',
              '&marker;': '▮',
              '&mcomma;': '⨩',
              '&mcy;': 'м',
              '&mdash;': '—',
              '&measuredangle;': '∡',
              '&mfr;': '𝔪',
              '&mho;': '℧',
              '&micro': 'µ',
              '&micro;': 'µ',
              '&mid;': '∣',
              '&midast;': '*',
              '&midcir;': '⫰',
              '&middot': '·',
              '&middot;': '·',
              '&minus;': '−',
              '&minusb;': '⊟',
              '&minusd;': '∸',
              '&minusdu;': '⨪',
              '&mlcp;': '⫛',
              '&mldr;': '…',
              '&mnplus;': '∓',
              '&models;': '⊧',
              '&mopf;': '𝕞',
              '&mp;': '∓',
              '&mscr;': '𝓂',
              '&mstpos;': '∾',
              '&mu;': 'μ',
              '&multimap;': '⊸',
              '&mumap;': '⊸',
              '&nGg;': '⋙̸',
              '&nGt;': '≫⃒',
              '&nGtv;': '≫̸',
              '&nLeftarrow;': '⇍',
              '&nLeftrightarrow;': '⇎',
              '&nLl;': '⋘̸',
              '&nLt;': '≪⃒',
              '&nLtv;': '≪̸',
              '&nRightarrow;': '⇏',
              '&nVDash;': '⊯',
              '&nVdash;': '⊮',
              '&nabla;': '∇',
              '&nacute;': 'ń',
              '&nang;': '∠⃒',
              '&nap;': '≉',
              '&napE;': '⩰̸',
              '&napid;': '≋̸',
              '&napos;': 'ŉ',
              '&napprox;': '≉',
              '&natur;': '♮',
              '&natural;': '♮',
              '&naturals;': 'ℕ',
              '&nbsp': ' ',
              '&nbsp;': ' ',
              '&nbump;': '≎̸',
              '&nbumpe;': '≏̸',
              '&ncap;': '⩃',
              '&ncaron;': 'ň',
              '&ncedil;': 'ņ',
              '&ncong;': '≇',
              '&ncongdot;': '⩭̸',
              '&ncup;': '⩂',
              '&ncy;': 'н',
              '&ndash;': '–',
              '&ne;': '≠',
              '&neArr;': '⇗',
              '&nearhk;': '⤤',
              '&nearr;': '↗',
              '&nearrow;': '↗',
              '&nedot;': '≐̸',
              '&nequiv;': '≢',
              '&nesear;': '⤨',
              '&nesim;': '≂̸',
              '&nexist;': '∄',
              '&nexists;': '∄',
              '&nfr;': '𝔫',
              '&ngE;': '≧̸',
              '&nge;': '≱',
              '&ngeq;': '≱',
              '&ngeqq;': '≧̸',
              '&ngeqslant;': '⩾̸',
              '&nges;': '⩾̸',
              '&ngsim;': '≵',
              '&ngt;': '≯',
              '&ngtr;': '≯',
              '&nhArr;': '⇎',
              '&nharr;': '↮',
              '&nhpar;': '⫲',
              '&ni;': '∋',
              '&nis;': '⋼',
              '&nisd;': '⋺',
              '&niv;': '∋',
              '&njcy;': 'њ',
              '&nlArr;': '⇍',
              '&nlE;': '≦̸',
              '&nlarr;': '↚',
              '&nldr;': '‥',
              '&nle;': '≰',
              '&nleftarrow;': '↚',
              '&nleftrightarrow;': '↮',
              '&nleq;': '≰',
              '&nleqq;': '≦̸',
              '&nleqslant;': '⩽̸',
              '&nles;': '⩽̸',
              '&nless;': '≮',
              '&nlsim;': '≴',
              '&nlt;': '≮',
              '&nltri;': '⋪',
              '&nltrie;': '⋬',
              '&nmid;': '∤',
              '&nopf;': '𝕟',
              '&not': '¬',
              '&not;': '¬',
              '&notin;': '∉',
              '&notinE;': '⋹̸',
              '&notindot;': '⋵̸',
              '&notinva;': '∉',
              '&notinvb;': '⋷',
              '&notinvc;': '⋶',
              '&notni;': '∌',
              '&notniva;': '∌',
              '&notnivb;': '⋾',
              '&notnivc;': '⋽',
              '&npar;': '∦',
              '&nparallel;': '∦',
              '&nparsl;': '⫽⃥',
              '&npart;': '∂̸',
              '&npolint;': '⨔',
              '&npr;': '⊀',
              '&nprcue;': '⋠',
              '&npre;': '⪯̸',
              '&nprec;': '⊀',
              '&npreceq;': '⪯̸',
              '&nrArr;': '⇏',
              '&nrarr;': '↛',
              '&nrarrc;': '⤳̸',
              '&nrarrw;': '↝̸',
              '&nrightarrow;': '↛',
              '&nrtri;': '⋫',
              '&nrtrie;': '⋭',
              '&nsc;': '⊁',
              '&nsccue;': '⋡',
              '&nsce;': '⪰̸',
              '&nscr;': '𝓃',
              '&nshortmid;': '∤',
              '&nshortparallel;': '∦',
              '&nsim;': '≁',
              '&nsime;': '≄',
              '&nsimeq;': '≄',
              '&nsmid;': '∤',
              '&nspar;': '∦',
              '&nsqsube;': '⋢',
              '&nsqsupe;': '⋣',
              '&nsub;': '⊄',
              '&nsubE;': '⫅̸',
              '&nsube;': '⊈',
              '&nsubset;': '⊂⃒',
              '&nsubseteq;': '⊈',
              '&nsubseteqq;': '⫅̸',
              '&nsucc;': '⊁',
              '&nsucceq;': '⪰̸',
              '&nsup;': '⊅',
              '&nsupE;': '⫆̸',
              '&nsupe;': '⊉',
              '&nsupset;': '⊃⃒',
              '&nsupseteq;': '⊉',
              '&nsupseteqq;': '⫆̸',
              '&ntgl;': '≹',
              '&ntilde': 'ñ',
              '&ntilde;': 'ñ',
              '&ntlg;': '≸',
              '&ntriangleleft;': '⋪',
              '&ntrianglelefteq;': '⋬',
              '&ntriangleright;': '⋫',
              '&ntrianglerighteq;': '⋭',
              '&nu;': 'ν',
              '&num;': '#',
              '&numero;': '№',
              '&numsp;': ' ',
              '&nvDash;': '⊭',
              '&nvHarr;': '⤄',
              '&nvap;': '≍⃒',
              '&nvdash;': '⊬',
              '&nvge;': '≥⃒',
              '&nvgt;': '>⃒',
              '&nvinfin;': '⧞',
              '&nvlArr;': '⤂',
              '&nvle;': '≤⃒',
              '&nvlt;': '<⃒',
              '&nvltrie;': '⊴⃒',
              '&nvrArr;': '⤃',
              '&nvrtrie;': '⊵⃒',
              '&nvsim;': '∼⃒',
              '&nwArr;': '⇖',
              '&nwarhk;': '⤣',
              '&nwarr;': '↖',
              '&nwarrow;': '↖',
              '&nwnear;': '⤧',
              '&oS;': 'Ⓢ',
              '&oacute': 'ó',
              '&oacute;': 'ó',
              '&oast;': '⊛',
              '&ocir;': '⊚',
              '&ocirc': 'ô',
              '&ocirc;': 'ô',
              '&ocy;': 'о',
              '&odash;': '⊝',
              '&odblac;': 'ő',
              '&odiv;': '⨸',
              '&odot;': '⊙',
              '&odsold;': '⦼',
              '&oelig;': 'œ',
              '&ofcir;': '⦿',
              '&ofr;': '𝔬',
              '&ogon;': '˛',
              '&ograve': 'ò',
              '&ograve;': 'ò',
              '&ogt;': '⧁',
              '&ohbar;': '⦵',
              '&ohm;': 'Ω',
              '&oint;': '∮',
              '&olarr;': '↺',
              '&olcir;': '⦾',
              '&olcross;': '⦻',
              '&oline;': '‾',
              '&olt;': '⧀',
              '&omacr;': 'ō',
              '&omega;': 'ω',
              '&omicron;': 'ο',
              '&omid;': '⦶',
              '&ominus;': '⊖',
              '&oopf;': '𝕠',
              '&opar;': '⦷',
              '&operp;': '⦹',
              '&oplus;': '⊕',
              '&or;': '∨',
              '&orarr;': '↻',
              '&ord;': '⩝',
              '&order;': 'ℴ',
              '&orderof;': 'ℴ',
              '&ordf': 'ª',
              '&ordf;': 'ª',
              '&ordm': 'º',
              '&ordm;': 'º',
              '&origof;': '⊶',
              '&oror;': '⩖',
              '&orslope;': '⩗',
              '&orv;': '⩛',
              '&oscr;': 'ℴ',
              '&oslash': 'ø',
              '&oslash;': 'ø',
              '&osol;': '⊘',
              '&otilde': 'õ',
              '&otilde;': 'õ',
              '&otimes;': '⊗',
              '&otimesas;': '⨶',
              '&ouml': 'ö',
              '&ouml;': 'ö',
              '&ovbar;': '⌽',
              '&par;': '∥',
              '&para': '¶',
              '&para;': '¶',
              '&parallel;': '∥',
              '&parsim;': '⫳',
              '&parsl;': '⫽',
              '&part;': '∂',
              '&pcy;': 'п',
              '&percnt;': '%',
              '&period;': '.',
              '&permil;': '‰',
              '&perp;': '⊥',
              '&pertenk;': '‱',
              '&pfr;': '𝔭',
              '&phi;': 'φ',
              '&phiv;': 'ϕ',
              '&phmmat;': 'ℳ',
              '&phone;': '☎',
              '&pi;': 'π',
              '&pitchfork;': '⋔',
              '&piv;': 'ϖ',
              '&planck;': 'ℏ',
              '&planckh;': 'ℎ',
              '&plankv;': 'ℏ',
              '&plus;': '+',
              '&plusacir;': '⨣',
              '&plusb;': '⊞',
              '&pluscir;': '⨢',
              '&plusdo;': '∔',
              '&plusdu;': '⨥',
              '&pluse;': '⩲',
              '&plusmn': '±',
              '&plusmn;': '±',
              '&plussim;': '⨦',
              '&plustwo;': '⨧',
              '&pm;': '±',
              '&pointint;': '⨕',
              '&popf;': '𝕡',
              '&pound': '£',
              '&pound;': '£',
              '&pr;': '≺',
              '&prE;': '⪳',
              '&prap;': '⪷',
              '&prcue;': '≼',
              '&pre;': '⪯',
              '&prec;': '≺',
              '&precapprox;': '⪷',
              '&preccurlyeq;': '≼',
              '&preceq;': '⪯',
              '&precnapprox;': '⪹',
              '&precneqq;': '⪵',
              '&precnsim;': '⋨',
              '&precsim;': '≾',
              '&prime;': '′',
              '&primes;': 'ℙ',
              '&prnE;': '⪵',
              '&prnap;': '⪹',
              '&prnsim;': '⋨',
              '&prod;': '∏',
              '&profalar;': '⌮',
              '&profline;': '⌒',
              '&profsurf;': '⌓',
              '&prop;': '∝',
              '&propto;': '∝',
              '&prsim;': '≾',
              '&prurel;': '⊰',
              '&pscr;': '𝓅',
              '&psi;': 'ψ',
              '&puncsp;': ' ',
              '&qfr;': '𝔮',
              '&qint;': '⨌',
              '&qopf;': '𝕢',
              '&qprime;': '⁗',
              '&qscr;': '𝓆',
              '&quaternions;': 'ℍ',
              '&quatint;': '⨖',
              '&quest;': '?',
              '&questeq;': '≟',
              '&quot': '"',
              '&quot;': '"',
              '&rAarr;': '⇛',
              '&rArr;': '⇒',
              '&rAtail;': '⤜',
              '&rBarr;': '⤏',
              '&rHar;': '⥤',
              '&race;': '∽̱',
              '&racute;': 'ŕ',
              '&radic;': '√',
              '&raemptyv;': '⦳',
              '&rang;': '⟩',
              '&rangd;': '⦒',
              '&range;': '⦥',
              '&rangle;': '⟩',
              '&raquo': '»',
              '&raquo;': '»',
              '&rarr;': '→',
              '&rarrap;': '⥵',
              '&rarrb;': '⇥',
              '&rarrbfs;': '⤠',
              '&rarrc;': '⤳',
              '&rarrfs;': '⤞',
              '&rarrhk;': '↪',
              '&rarrlp;': '↬',
              '&rarrpl;': '⥅',
              '&rarrsim;': '⥴',
              '&rarrtl;': '↣',
              '&rarrw;': '↝',
              '&ratail;': '⤚',
              '&ratio;': '∶',
              '&rationals;': 'ℚ',
              '&rbarr;': '⤍',
              '&rbbrk;': '❳',
              '&rbrace;': '}',
              '&rbrack;': ']',
              '&rbrke;': '⦌',
              '&rbrksld;': '⦎',
              '&rbrkslu;': '⦐',
              '&rcaron;': 'ř',
              '&rcedil;': 'ŗ',
              '&rceil;': '⌉',
              '&rcub;': '}',
              '&rcy;': 'р',
              '&rdca;': '⤷',
              '&rdldhar;': '⥩',
              '&rdquo;': '”',
              '&rdquor;': '”',
              '&rdsh;': '↳',
              '&real;': 'ℜ',
              '&realine;': 'ℛ',
              '&realpart;': 'ℜ',
              '&reals;': 'ℝ',
              '&rect;': '▭',
              '&reg': '®',
              '&reg;': '®',
              '&rfisht;': '⥽',
              '&rfloor;': '⌋',
              '&rfr;': '𝔯',
              '&rhard;': '⇁',
              '&rharu;': '⇀',
              '&rharul;': '⥬',
              '&rho;': 'ρ',
              '&rhov;': 'ϱ',
              '&rightarrow;': '→',
              '&rightarrowtail;': '↣',
              '&rightharpoondown;': '⇁',
              '&rightharpoonup;': '⇀',
              '&rightleftarrows;': '⇄',
              '&rightleftharpoons;': '⇌',
              '&rightrightarrows;': '⇉',
              '&rightsquigarrow;': '↝',
              '&rightthreetimes;': '⋌',
              '&ring;': '˚',
              '&risingdotseq;': '≓',
              '&rlarr;': '⇄',
              '&rlhar;': '⇌',
              '&rlm;': '‏',
              '&rmoust;': '⎱',
              '&rmoustache;': '⎱',
              '&rnmid;': '⫮',
              '&roang;': '⟭',
              '&roarr;': '⇾',
              '&robrk;': '⟧',
              '&ropar;': '⦆',
              '&ropf;': '𝕣',
              '&roplus;': '⨮',
              '&rotimes;': '⨵',
              '&rpar;': ')',
              '&rpargt;': '⦔',
              '&rppolint;': '⨒',
              '&rrarr;': '⇉',
              '&rsaquo;': '›',
              '&rscr;': '𝓇',
              '&rsh;': '↱',
              '&rsqb;': ']',
              '&rsquo;': '’',
              '&rsquor;': '’',
              '&rthree;': '⋌',
              '&rtimes;': '⋊',
              '&rtri;': '▹',
              '&rtrie;': '⊵',
              '&rtrif;': '▸',
              '&rtriltri;': '⧎',
              '&ruluhar;': '⥨',
              '&rx;': '℞',
              '&sacute;': 'ś',
              '&sbquo;': '‚',
              '&sc;': '≻',
              '&scE;': '⪴',
              '&scap;': '⪸',
              '&scaron;': 'š',
              '&sccue;': '≽',
              '&sce;': '⪰',
              '&scedil;': 'ş',
              '&scirc;': 'ŝ',
              '&scnE;': '⪶',
              '&scnap;': '⪺',
              '&scnsim;': '⋩',
              '&scpolint;': '⨓',
              '&scsim;': '≿',
              '&scy;': 'с',
              '&sdot;': '⋅',
              '&sdotb;': '⊡',
              '&sdote;': '⩦',
              '&seArr;': '⇘',
              '&searhk;': '⤥',
              '&searr;': '↘',
              '&searrow;': '↘',
              '&sect': '§',
              '&sect;': '§',
              '&semi;': ';',
              '&seswar;': '⤩',
              '&setminus;': '∖',
              '&setmn;': '∖',
              '&sext;': '✶',
              '&sfr;': '𝔰',
              '&sfrown;': '⌢',
              '&sharp;': '♯',
              '&shchcy;': 'щ',
              '&shcy;': 'ш',
              '&shortmid;': '∣',
              '&shortparallel;': '∥',
              '&shy': '­',
              '&shy;': '­',
              '&sigma;': 'σ',
              '&sigmaf;': 'ς',
              '&sigmav;': 'ς',
              '&sim;': '∼',
              '&simdot;': '⩪',
              '&sime;': '≃',
              '&simeq;': '≃',
              '&simg;': '⪞',
              '&simgE;': '⪠',
              '&siml;': '⪝',
              '&simlE;': '⪟',
              '&simne;': '≆',
              '&simplus;': '⨤',
              '&simrarr;': '⥲',
              '&slarr;': '←',
              '&smallsetminus;': '∖',
              '&smashp;': '⨳',
              '&smeparsl;': '⧤',
              '&smid;': '∣',
              '&smile;': '⌣',
              '&smt;': '⪪',
              '&smte;': '⪬',
              '&smtes;': '⪬︀',
              '&softcy;': 'ь',
              '&sol;': '/',
              '&solb;': '⧄',
              '&solbar;': '⌿',
              '&sopf;': '𝕤',
              '&spades;': '♠',
              '&spadesuit;': '♠',
              '&spar;': '∥',
              '&sqcap;': '⊓',
              '&sqcaps;': '⊓︀',
              '&sqcup;': '⊔',
              '&sqcups;': '⊔︀',
              '&sqsub;': '⊏',
              '&sqsube;': '⊑',
              '&sqsubset;': '⊏',
              '&sqsubseteq;': '⊑',
              '&sqsup;': '⊐',
              '&sqsupe;': '⊒',
              '&sqsupset;': '⊐',
              '&sqsupseteq;': '⊒',
              '&squ;': '□',
              '&square;': '□',
              '&squarf;': '▪',
              '&squf;': '▪',
              '&srarr;': '→',
              '&sscr;': '𝓈',
              '&ssetmn;': '∖',
              '&ssmile;': '⌣',
              '&sstarf;': '⋆',
              '&star;': '☆',
              '&starf;': '★',
              '&straightepsilon;': 'ϵ',
              '&straightphi;': 'ϕ',
              '&strns;': '¯',
              '&sub;': '⊂',
              '&subE;': '⫅',
              '&subdot;': '⪽',
              '&sube;': '⊆',
              '&subedot;': '⫃',
              '&submult;': '⫁',
              '&subnE;': '⫋',
              '&subne;': '⊊',
              '&subplus;': '⪿',
              '&subrarr;': '⥹',
              '&subset;': '⊂',
              '&subseteq;': '⊆',
              '&subseteqq;': '⫅',
              '&subsetneq;': '⊊',
              '&subsetneqq;': '⫋',
              '&subsim;': '⫇',
              '&subsub;': '⫕',
              '&subsup;': '⫓',
              '&succ;': '≻',
              '&succapprox;': '⪸',
              '&succcurlyeq;': '≽',
              '&succeq;': '⪰',
              '&succnapprox;': '⪺',
              '&succneqq;': '⪶',
              '&succnsim;': '⋩',
              '&succsim;': '≿',
              '&sum;': '∑',
              '&sung;': '♪',
              '&sup1': '¹',
              '&sup1;': '¹',
              '&sup2': '²',
              '&sup2;': '²',
              '&sup3': '³',
              '&sup3;': '³',
              '&sup;': '⊃',
              '&supE;': '⫆',
              '&supdot;': '⪾',
              '&supdsub;': '⫘',
              '&supe;': '⊇',
              '&supedot;': '⫄',
              '&suphsol;': '⟉',
              '&suphsub;': '⫗',
              '&suplarr;': '⥻',
              '&supmult;': '⫂',
              '&supnE;': '⫌',
              '&supne;': '⊋',
              '&supplus;': '⫀',
              '&supset;': '⊃',
              '&supseteq;': '⊇',
              '&supseteqq;': '⫆',
              '&supsetneq;': '⊋',
              '&supsetneqq;': '⫌',
              '&supsim;': '⫈',
              '&supsub;': '⫔',
              '&supsup;': '⫖',
              '&swArr;': '⇙',
              '&swarhk;': '⤦',
              '&swarr;': '↙',
              '&swarrow;': '↙',
              '&swnwar;': '⤪',
              '&szlig': 'ß',
              '&szlig;': 'ß',
              '&target;': '⌖',
              '&tau;': 'τ',
              '&tbrk;': '⎴',
              '&tcaron;': 'ť',
              '&tcedil;': 'ţ',
              '&tcy;': 'т',
              '&tdot;': '⃛',
              '&telrec;': '⌕',
              '&tfr;': '𝔱',
              '&there4;': '∴',
              '&therefore;': '∴',
              '&theta;': 'θ',
              '&thetasym;': 'ϑ',
              '&thetav;': 'ϑ',
              '&thickapprox;': '≈',
              '&thicksim;': '∼',
              '&thinsp;': ' ',
              '&thkap;': '≈',
              '&thksim;': '∼',
              '&thorn': 'þ',
              '&thorn;': 'þ',
              '&tilde;': '˜',
              '&times': '×',
              '&times;': '×',
              '&timesb;': '⊠',
              '&timesbar;': '⨱',
              '&timesd;': '⨰',
              '&tint;': '∭',
              '&toea;': '⤨',
              '&top;': '⊤',
              '&topbot;': '⌶',
              '&topcir;': '⫱',
              '&topf;': '𝕥',
              '&topfork;': '⫚',
              '&tosa;': '⤩',
              '&tprime;': '‴',
              '&trade;': '™',
              '&triangle;': '▵',
              '&triangledown;': '▿',
              '&triangleleft;': '◃',
              '&trianglelefteq;': '⊴',
              '&triangleq;': '≜',
              '&triangleright;': '▹',
              '&trianglerighteq;': '⊵',
              '&tridot;': '◬',
              '&trie;': '≜',
              '&triminus;': '⨺',
              '&triplus;': '⨹',
              '&trisb;': '⧍',
              '&tritime;': '⨻',
              '&trpezium;': '⏢',
              '&tscr;': '𝓉',
              '&tscy;': 'ц',
              '&tshcy;': 'ћ',
              '&tstrok;': 'ŧ',
              '&twixt;': '≬',
              '&twoheadleftarrow;': '↞',
              '&twoheadrightarrow;': '↠',
              '&uArr;': '⇑',
              '&uHar;': '⥣',
              '&uacute': 'ú',
              '&uacute;': 'ú',
              '&uarr;': '↑',
              '&ubrcy;': 'ў',
              '&ubreve;': 'ŭ',
              '&ucirc': 'û',
              '&ucirc;': 'û',
              '&ucy;': 'у',
              '&udarr;': '⇅',
              '&udblac;': 'ű',
              '&udhar;': '⥮',
              '&ufisht;': '⥾',
              '&ufr;': '𝔲',
              '&ugrave': 'ù',
              '&ugrave;': 'ù',
              '&uharl;': '↿',
              '&uharr;': '↾',
              '&uhblk;': '▀',
              '&ulcorn;': '⌜',
              '&ulcorner;': '⌜',
              '&ulcrop;': '⌏',
              '&ultri;': '◸',
              '&umacr;': 'ū',
              '&uml': '¨',
              '&uml;': '¨',
              '&uogon;': 'ų',
              '&uopf;': '𝕦',
              '&uparrow;': '↑',
              '&updownarrow;': '↕',
              '&upharpoonleft;': '↿',
              '&upharpoonright;': '↾',
              '&uplus;': '⊎',
              '&upsi;': 'υ',
              '&upsih;': 'ϒ',
              '&upsilon;': 'υ',
              '&upuparrows;': '⇈',
              '&urcorn;': '⌝',
              '&urcorner;': '⌝',
              '&urcrop;': '⌎',
              '&uring;': 'ů',
              '&urtri;': '◹',
              '&uscr;': '𝓊',
              '&utdot;': '⋰',
              '&utilde;': 'ũ',
              '&utri;': '▵',
              '&utrif;': '▴',
              '&uuarr;': '⇈',
              '&uuml': 'ü',
              '&uuml;': 'ü',
              '&uwangle;': '⦧',
              '&vArr;': '⇕',
              '&vBar;': '⫨',
              '&vBarv;': '⫩',
              '&vDash;': '⊨',
              '&vangrt;': '⦜',
              '&varepsilon;': 'ϵ',
              '&varkappa;': 'ϰ',
              '&varnothing;': '∅',
              '&varphi;': 'ϕ',
              '&varpi;': 'ϖ',
              '&varpropto;': '∝',
              '&varr;': '↕',
              '&varrho;': 'ϱ',
              '&varsigma;': 'ς',
              '&varsubsetneq;': '⊊︀',
              '&varsubsetneqq;': '⫋︀',
              '&varsupsetneq;': '⊋︀',
              '&varsupsetneqq;': '⫌︀',
              '&vartheta;': 'ϑ',
              '&vartriangleleft;': '⊲',
              '&vartriangleright;': '⊳',
              '&vcy;': 'в',
              '&vdash;': '⊢',
              '&vee;': '∨',
              '&veebar;': '⊻',
              '&veeeq;': '≚',
              '&vellip;': '⋮',
              '&verbar;': '|',
              '&vert;': '|',
              '&vfr;': '𝔳',
              '&vltri;': '⊲',
              '&vnsub;': '⊂⃒',
              '&vnsup;': '⊃⃒',
              '&vopf;': '𝕧',
              '&vprop;': '∝',
              '&vrtri;': '⊳',
              '&vscr;': '𝓋',
              '&vsubnE;': '⫋︀',
              '&vsubne;': '⊊︀',
              '&vsupnE;': '⫌︀',
              '&vsupne;': '⊋︀',
              '&vzigzag;': '⦚',
              '&wcirc;': 'ŵ',
              '&wedbar;': '⩟',
              '&wedge;': '∧',
              '&wedgeq;': '≙',
              '&weierp;': '℘',
              '&wfr;': '𝔴',
              '&wopf;': '𝕨',
              '&wp;': '℘',
              '&wr;': '≀',
              '&wreath;': '≀',
              '&wscr;': '𝓌',
              '&xcap;': '⋂',
              '&xcirc;': '◯',
              '&xcup;': '⋃',
              '&xdtri;': '▽',
              '&xfr;': '𝔵',
              '&xhArr;': '⟺',
              '&xharr;': '⟷',
              '&xi;': 'ξ',
              '&xlArr;': '⟸',
              '&xlarr;': '⟵',
              '&xmap;': '⟼',
              '&xnis;': '⋻',
              '&xodot;': '⨀',
              '&xopf;': '𝕩',
              '&xoplus;': '⨁',
              '&xotime;': '⨂',
              '&xrArr;': '⟹',
              '&xrarr;': '⟶',
              '&xscr;': '𝓍',
              '&xsqcup;': '⨆',
              '&xuplus;': '⨄',
              '&xutri;': '△',
              '&xvee;': '⋁',
              '&xwedge;': '⋀',
              '&yacute': 'ý',
              '&yacute;': 'ý',
              '&yacy;': 'я',
              '&ycirc;': 'ŷ',
              '&ycy;': 'ы',
              '&yen': '¥',
              '&yen;': '¥',
              '&yfr;': '𝔶',
              '&yicy;': 'ї',
              '&yopf;': '𝕪',
              '&yscr;': '𝓎',
              '&yucy;': 'ю',
              '&yuml': 'ÿ',
              '&yuml;': 'ÿ',
              '&zacute;': 'ź',
              '&zcaron;': 'ž',
              '&zcy;': 'з',
              '&zdot;': 'ż',
              '&zeetrf;': 'ℨ',
              '&zeta;': 'ζ',
              '&zfr;': '𝔷',
              '&zhcy;': 'ж',
              '&zigrarr;': '⇝',
              '&zopf;': '𝕫',
              '&zscr;': '𝓏',
              '&zwj;': '‍',
              '&zwnj;': '‌',
            },
            characters: {
              Æ: '&AElig;',
              '&': '&amp;',
              Á: '&Aacute;',
              Ă: '&Abreve;',
              Â: '&Acirc;',
              А: '&Acy;',
              '𝔄': '&Afr;',
              À: '&Agrave;',
              Α: '&Alpha;',
              Ā: '&Amacr;',
              '⩓': '&And;',
              Ą: '&Aogon;',
              '𝔸': '&Aopf;',
              '⁡': '&af;',
              Å: '&angst;',
              '𝒜': '&Ascr;',
              '≔': '&coloneq;',
              Ã: '&Atilde;',
              Ä: '&Auml;',
              '∖': '&ssetmn;',
              '⫧': '&Barv;',
              '⌆': '&doublebarwedge;',
              Б: '&Bcy;',
              '∵': '&because;',
              ℬ: '&bernou;',
              Β: '&Beta;',
              '𝔅': '&Bfr;',
              '𝔹': '&Bopf;',
              '˘': '&breve;',
              '≎': '&bump;',
              Ч: '&CHcy;',
              '©': '&copy;',
              Ć: '&Cacute;',
              '⋒': '&Cap;',
              ⅅ: '&DD;',
              ℭ: '&Cfr;',
              Č: '&Ccaron;',
              Ç: '&Ccedil;',
              Ĉ: '&Ccirc;',
              '∰': '&Cconint;',
              Ċ: '&Cdot;',
              '¸': '&cedil;',
              '·': '&middot;',
              Χ: '&Chi;',
              '⊙': '&odot;',
              '⊖': '&ominus;',
              '⊕': '&oplus;',
              '⊗': '&otimes;',
              '∲': '&cwconint;',
              '”': '&rdquor;',
              '’': '&rsquor;',
              '∷': '&Proportion;',
              '⩴': '&Colone;',
              '≡': '&equiv;',
              '∯': '&DoubleContourIntegral;',
              '∮': '&oint;',
              ℂ: '&complexes;',
              '∐': '&coprod;',
              '∳': '&awconint;',
              '⨯': '&Cross;',
              '𝒞': '&Cscr;',
              '⋓': '&Cup;',
              '≍': '&asympeq;',
              '⤑': '&DDotrahd;',
              Ђ: '&DJcy;',
              Ѕ: '&DScy;',
              Џ: '&DZcy;',
              '‡': '&ddagger;',
              '↡': '&Darr;',
              '⫤': '&DoubleLeftTee;',
              Ď: '&Dcaron;',
              Д: '&Dcy;',
              '∇': '&nabla;',
              Δ: '&Delta;',
              '𝔇': '&Dfr;',
              '´': '&acute;',
              '˙': '&dot;',
              '˝': '&dblac;',
              '`': '&grave;',
              '˜': '&tilde;',
              '⋄': '&diamond;',
              ⅆ: '&dd;',
              '𝔻': '&Dopf;',
              '¨': '&uml;',
              '⃜': '&DotDot;',
              '≐': '&esdot;',
              '⇓': '&dArr;',
              '⇐': '&lArr;',
              '⇔': '&iff;',
              '⟸': '&xlArr;',
              '⟺': '&xhArr;',
              '⟹': '&xrArr;',
              '⇒': '&rArr;',
              '⊨': '&vDash;',
              '⇑': '&uArr;',
              '⇕': '&vArr;',
              '∥': '&spar;',
              '↓': '&downarrow;',
              '⤓': '&DownArrowBar;',
              '⇵': '&duarr;',
              '̑': '&DownBreve;',
              '⥐': '&DownLeftRightVector;',
              '⥞': '&DownLeftTeeVector;',
              '↽': '&lhard;',
              '⥖': '&DownLeftVectorBar;',
              '⥟': '&DownRightTeeVector;',
              '⇁': '&rightharpoondown;',
              '⥗': '&DownRightVectorBar;',
              '⊤': '&top;',
              '↧': '&mapstodown;',
              '𝒟': '&Dscr;',
              Đ: '&Dstrok;',
              Ŋ: '&ENG;',
              Ð: '&ETH;',
              É: '&Eacute;',
              Ě: '&Ecaron;',
              Ê: '&Ecirc;',
              Э: '&Ecy;',
              Ė: '&Edot;',
              '𝔈': '&Efr;',
              È: '&Egrave;',
              '∈': '&isinv;',
              Ē: '&Emacr;',
              '◻': '&EmptySmallSquare;',
              '▫': '&EmptyVerySmallSquare;',
              Ę: '&Eogon;',
              '𝔼': '&Eopf;',
              Ε: '&Epsilon;',
              '⩵': '&Equal;',
              '≂': '&esim;',
              '⇌': '&rlhar;',
              ℰ: '&expectation;',
              '⩳': '&Esim;',
              Η: '&Eta;',
              Ë: '&Euml;',
              '∃': '&exist;',
              ⅇ: '&exponentiale;',
              Ф: '&Fcy;',
              '𝔉': '&Ffr;',
              '◼': '&FilledSmallSquare;',
              '▪': '&squf;',
              '𝔽': '&Fopf;',
              '∀': '&forall;',
              ℱ: '&Fscr;',
              Ѓ: '&GJcy;',
              '>': '&gt;',
              Γ: '&Gamma;',
              Ϝ: '&Gammad;',
              Ğ: '&Gbreve;',
              Ģ: '&Gcedil;',
              Ĝ: '&Gcirc;',
              Г: '&Gcy;',
              Ġ: '&Gdot;',
              '𝔊': '&Gfr;',
              '⋙': '&ggg;',
              '𝔾': '&Gopf;',
              '≥': '&geq;',
              '⋛': '&gtreqless;',
              '≧': '&geqq;',
              '⪢': '&GreaterGreater;',
              '≷': '&gtrless;',
              '⩾': '&ges;',
              '≳': '&gtrsim;',
              '𝒢': '&Gscr;',
              '≫': '&gg;',
              Ъ: '&HARDcy;',
              ˇ: '&caron;',
              '^': '&Hat;',
              Ĥ: '&Hcirc;',
              ℌ: '&Poincareplane;',
              ℋ: '&hamilt;',
              ℍ: '&quaternions;',
              '─': '&boxh;',
              Ħ: '&Hstrok;',
              '≏': '&bumpeq;',
              Е: '&IEcy;',
              Ĳ: '&IJlig;',
              Ё: '&IOcy;',
              Í: '&Iacute;',
              Î: '&Icirc;',
              И: '&Icy;',
              İ: '&Idot;',
              ℑ: '&imagpart;',
              Ì: '&Igrave;',
              Ī: '&Imacr;',
              ⅈ: '&ii;',
              '∬': '&Int;',
              '∫': '&int;',
              '⋂': '&xcap;',
              '⁣': '&ic;',
              '⁢': '&it;',
              Į: '&Iogon;',
              '𝕀': '&Iopf;',
              Ι: '&Iota;',
              ℐ: '&imagline;',
              Ĩ: '&Itilde;',
              І: '&Iukcy;',
              Ï: '&Iuml;',
              Ĵ: '&Jcirc;',
              Й: '&Jcy;',
              '𝔍': '&Jfr;',
              '𝕁': '&Jopf;',
              '𝒥': '&Jscr;',
              Ј: '&Jsercy;',
              Є: '&Jukcy;',
              Х: '&KHcy;',
              Ќ: '&KJcy;',
              Κ: '&Kappa;',
              Ķ: '&Kcedil;',
              К: '&Kcy;',
              '𝔎': '&Kfr;',
              '𝕂': '&Kopf;',
              '𝒦': '&Kscr;',
              Љ: '&LJcy;',
              '<': '&lt;',
              Ĺ: '&Lacute;',
              Λ: '&Lambda;',
              '⟪': '&Lang;',
              ℒ: '&lagran;',
              '↞': '&twoheadleftarrow;',
              Ľ: '&Lcaron;',
              Ļ: '&Lcedil;',
              Л: '&Lcy;',
              '⟨': '&langle;',
              '←': '&slarr;',
              '⇤': '&larrb;',
              '⇆': '&lrarr;',
              '⌈': '&lceil;',
              '⟦': '&lobrk;',
              '⥡': '&LeftDownTeeVector;',
              '⇃': '&downharpoonleft;',
              '⥙': '&LeftDownVectorBar;',
              '⌊': '&lfloor;',
              '↔': '&leftrightarrow;',
              '⥎': '&LeftRightVector;',
              '⊣': '&dashv;',
              '↤': '&mapstoleft;',
              '⥚': '&LeftTeeVector;',
              '⊲': '&vltri;',
              '⧏': '&LeftTriangleBar;',
              '⊴': '&trianglelefteq;',
              '⥑': '&LeftUpDownVector;',
              '⥠': '&LeftUpTeeVector;',
              '↿': '&upharpoonleft;',
              '⥘': '&LeftUpVectorBar;',
              '↼': '&lharu;',
              '⥒': '&LeftVectorBar;',
              '⋚': '&lesseqgtr;',
              '≦': '&leqq;',
              '≶': '&lg;',
              '⪡': '&LessLess;',
              '⩽': '&les;',
              '≲': '&lsim;',
              '𝔏': '&Lfr;',
              '⋘': '&Ll;',
              '⇚': '&lAarr;',
              Ŀ: '&Lmidot;',
              '⟵': '&xlarr;',
              '⟷': '&xharr;',
              '⟶': '&xrarr;',
              '𝕃': '&Lopf;',
              '↙': '&swarrow;',
              '↘': '&searrow;',
              '↰': '&lsh;',
              Ł: '&Lstrok;',
              '≪': '&ll;',
              '⤅': '&Map;',
              М: '&Mcy;',
              ' ': '&MediumSpace;',
              ℳ: '&phmmat;',
              '𝔐': '&Mfr;',
              '∓': '&mp;',
              '𝕄': '&Mopf;',
              Μ: '&Mu;',
              Њ: '&NJcy;',
              Ń: '&Nacute;',
              Ň: '&Ncaron;',
              Ņ: '&Ncedil;',
              Н: '&Ncy;',
              '​': '&ZeroWidthSpace;',
              '\n': '&NewLine;',
              '𝔑': '&Nfr;',
              '⁠': '&NoBreak;',
              ' ': '&nbsp;',
              ℕ: '&naturals;',
              '⫬': '&Not;',
              '≢': '&nequiv;',
              '≭': '&NotCupCap;',
              '∦': '&nspar;',
              '∉': '&notinva;',
              '≠': '&ne;',
              '≂̸': '&nesim;',
              '∄': '&nexists;',
              '≯': '&ngtr;',
              '≱': '&ngeq;',
              '≧̸': '&ngeqq;',
              '≫̸': '&nGtv;',
              '≹': '&ntgl;',
              '⩾̸': '&nges;',
              '≵': '&ngsim;',
              '≎̸': '&nbump;',
              '≏̸': '&nbumpe;',
              '⋪': '&ntriangleleft;',
              '⧏̸': '&NotLeftTriangleBar;',
              '⋬': '&ntrianglelefteq;',
              '≮': '&nlt;',
              '≰': '&nleq;',
              '≸': '&ntlg;',
              '≪̸': '&nLtv;',
              '⩽̸': '&nles;',
              '≴': '&nlsim;',
              '⪢̸': '&NotNestedGreaterGreater;',
              '⪡̸': '&NotNestedLessLess;',
              '⊀': '&nprec;',
              '⪯̸': '&npreceq;',
              '⋠': '&nprcue;',
              '∌': '&notniva;',
              '⋫': '&ntriangleright;',
              '⧐̸': '&NotRightTriangleBar;',
              '⋭': '&ntrianglerighteq;',
              '⊏̸': '&NotSquareSubset;',
              '⋢': '&nsqsube;',
              '⊐̸': '&NotSquareSuperset;',
              '⋣': '&nsqsupe;',
              '⊂⃒': '&vnsub;',
              '⊈': '&nsubseteq;',
              '⊁': '&nsucc;',
              '⪰̸': '&nsucceq;',
              '⋡': '&nsccue;',
              '≿̸': '&NotSucceedsTilde;',
              '⊃⃒': '&vnsup;',
              '⊉': '&nsupseteq;',
              '≁': '&nsim;',
              '≄': '&nsimeq;',
              '≇': '&ncong;',
              '≉': '&napprox;',
              '∤': '&nsmid;',
              '𝒩': '&Nscr;',
              Ñ: '&Ntilde;',
              Ν: '&Nu;',
              Œ: '&OElig;',
              Ó: '&Oacute;',
              Ô: '&Ocirc;',
              О: '&Ocy;',
              Ő: '&Odblac;',
              '𝔒': '&Ofr;',
              Ò: '&Ograve;',
              Ō: '&Omacr;',
              Ω: '&ohm;',
              Ο: '&Omicron;',
              '𝕆': '&Oopf;',
              '“': '&ldquo;',
              '‘': '&lsquo;',
              '⩔': '&Or;',
              '𝒪': '&Oscr;',
              Ø: '&Oslash;',
              Õ: '&Otilde;',
              '⨷': '&Otimes;',
              Ö: '&Ouml;',
              '‾': '&oline;',
              '⏞': '&OverBrace;',
              '⎴': '&tbrk;',
              '⏜': '&OverParenthesis;',
              '∂': '&part;',
              П: '&Pcy;',
              '𝔓': '&Pfr;',
              Φ: '&Phi;',
              Π: '&Pi;',
              '±': '&pm;',
              ℙ: '&primes;',
              '⪻': '&Pr;',
              '≺': '&prec;',
              '⪯': '&preceq;',
              '≼': '&preccurlyeq;',
              '≾': '&prsim;',
              '″': '&Prime;',
              '∏': '&prod;',
              '∝': '&vprop;',
              '𝒫': '&Pscr;',
              Ψ: '&Psi;',
              '"': '&quot;',
              '𝔔': '&Qfr;',
              ℚ: '&rationals;',
              '𝒬': '&Qscr;',
              '⤐': '&drbkarow;',
              '®': '&reg;',
              Ŕ: '&Racute;',
              '⟫': '&Rang;',
              '↠': '&twoheadrightarrow;',
              '⤖': '&Rarrtl;',
              Ř: '&Rcaron;',
              Ŗ: '&Rcedil;',
              Р: '&Rcy;',
              ℜ: '&realpart;',
              '∋': '&niv;',
              '⇋': '&lrhar;',
              '⥯': '&duhar;',
              Ρ: '&Rho;',
              '⟩': '&rangle;',
              '→': '&srarr;',
              '⇥': '&rarrb;',
              '⇄': '&rlarr;',
              '⌉': '&rceil;',
              '⟧': '&robrk;',
              '⥝': '&RightDownTeeVector;',
              '⇂': '&downharpoonright;',
              '⥕': '&RightDownVectorBar;',
              '⌋': '&rfloor;',
              '⊢': '&vdash;',
              '↦': '&mapsto;',
              '⥛': '&RightTeeVector;',
              '⊳': '&vrtri;',
              '⧐': '&RightTriangleBar;',
              '⊵': '&trianglerighteq;',
              '⥏': '&RightUpDownVector;',
              '⥜': '&RightUpTeeVector;',
              '↾': '&upharpoonright;',
              '⥔': '&RightUpVectorBar;',
              '⇀': '&rightharpoonup;',
              '⥓': '&RightVectorBar;',
              ℝ: '&reals;',
              '⥰': '&RoundImplies;',
              '⇛': '&rAarr;',
              ℛ: '&realine;',
              '↱': '&rsh;',
              '⧴': '&RuleDelayed;',
              Щ: '&SHCHcy;',
              Ш: '&SHcy;',
              Ь: '&SOFTcy;',
              Ś: '&Sacute;',
              '⪼': '&Sc;',
              Š: '&Scaron;',
              Ş: '&Scedil;',
              Ŝ: '&Scirc;',
              С: '&Scy;',
              '𝔖': '&Sfr;',
              '↑': '&uparrow;',
              Σ: '&Sigma;',
              '∘': '&compfn;',
              '𝕊': '&Sopf;',
              '√': '&radic;',
              '□': '&square;',
              '⊓': '&sqcap;',
              '⊏': '&sqsubset;',
              '⊑': '&sqsubseteq;',
              '⊐': '&sqsupset;',
              '⊒': '&sqsupseteq;',
              '⊔': '&sqcup;',
              '𝒮': '&Sscr;',
              '⋆': '&sstarf;',
              '⋐': '&Subset;',
              '⊆': '&subseteq;',
              '≻': '&succ;',
              '⪰': '&succeq;',
              '≽': '&succcurlyeq;',
              '≿': '&succsim;',
              '∑': '&sum;',
              '⋑': '&Supset;',
              '⊃': '&supset;',
              '⊇': '&supseteq;',
              Þ: '&THORN;',
              '™': '&trade;',
              Ћ: '&TSHcy;',
              Ц: '&TScy;',
              '\t': '&Tab;',
              Τ: '&Tau;',
              Ť: '&Tcaron;',
              Ţ: '&Tcedil;',
              Т: '&Tcy;',
              '𝔗': '&Tfr;',
              '∴': '&therefore;',
              Θ: '&Theta;',
              '  ': '&ThickSpace;',
              ' ': '&thinsp;',
              '∼': '&thksim;',
              '≃': '&simeq;',
              '≅': '&cong;',
              '≈': '&thkap;',
              '𝕋': '&Topf;',
              '⃛': '&tdot;',
              '𝒯': '&Tscr;',
              Ŧ: '&Tstrok;',
              Ú: '&Uacute;',
              '↟': '&Uarr;',
              '⥉': '&Uarrocir;',
              Ў: '&Ubrcy;',
              Ŭ: '&Ubreve;',
              Û: '&Ucirc;',
              У: '&Ucy;',
              Ű: '&Udblac;',
              '𝔘': '&Ufr;',
              Ù: '&Ugrave;',
              Ū: '&Umacr;',
              _: '&lowbar;',
              '⏟': '&UnderBrace;',
              '⎵': '&bbrk;',
              '⏝': '&UnderParenthesis;',
              '⋃': '&xcup;',
              '⊎': '&uplus;',
              Ų: '&Uogon;',
              '𝕌': '&Uopf;',
              '⤒': '&UpArrowBar;',
              '⇅': '&udarr;',
              '↕': '&varr;',
              '⥮': '&udhar;',
              '⊥': '&perp;',
              '↥': '&mapstoup;',
              '↖': '&nwarrow;',
              '↗': '&nearrow;',
              ϒ: '&upsih;',
              Υ: '&Upsilon;',
              Ů: '&Uring;',
              '𝒰': '&Uscr;',
              Ũ: '&Utilde;',
              Ü: '&Uuml;',
              '⊫': '&VDash;',
              '⫫': '&Vbar;',
              В: '&Vcy;',
              '⊩': '&Vdash;',
              '⫦': '&Vdashl;',
              '⋁': '&xvee;',
              '‖': '&Vert;',
              '∣': '&smid;',
              '|': '&vert;',
              '❘': '&VerticalSeparator;',
              '≀': '&wreath;',
              ' ': '&hairsp;',
              '𝔙': '&Vfr;',
              '𝕍': '&Vopf;',
              '𝒱': '&Vscr;',
              '⊪': '&Vvdash;',
              Ŵ: '&Wcirc;',
              '⋀': '&xwedge;',
              '𝔚': '&Wfr;',
              '𝕎': '&Wopf;',
              '𝒲': '&Wscr;',
              '𝔛': '&Xfr;',
              Ξ: '&Xi;',
              '𝕏': '&Xopf;',
              '𝒳': '&Xscr;',
              Я: '&YAcy;',
              Ї: '&YIcy;',
              Ю: '&YUcy;',
              Ý: '&Yacute;',
              Ŷ: '&Ycirc;',
              Ы: '&Ycy;',
              '𝔜': '&Yfr;',
              '𝕐': '&Yopf;',
              '𝒴': '&Yscr;',
              Ÿ: '&Yuml;',
              Ж: '&ZHcy;',
              Ź: '&Zacute;',
              Ž: '&Zcaron;',
              З: '&Zcy;',
              Ż: '&Zdot;',
              Ζ: '&Zeta;',
              ℨ: '&zeetrf;',
              ℤ: '&integers;',
              '𝒵': '&Zscr;',
              á: '&aacute;',
              ă: '&abreve;',
              '∾': '&mstpos;',
              '∾̳': '&acE;',
              '∿': '&acd;',
              â: '&acirc;',
              а: '&acy;',
              æ: '&aelig;',
              '𝔞': '&afr;',
              à: '&agrave;',
              ℵ: '&aleph;',
              α: '&alpha;',
              ā: '&amacr;',
              '⨿': '&amalg;',
              '∧': '&wedge;',
              '⩕': '&andand;',
              '⩜': '&andd;',
              '⩘': '&andslope;',
              '⩚': '&andv;',
              '∠': '&angle;',
              '⦤': '&ange;',
              '∡': '&measuredangle;',
              '⦨': '&angmsdaa;',
              '⦩': '&angmsdab;',
              '⦪': '&angmsdac;',
              '⦫': '&angmsdad;',
              '⦬': '&angmsdae;',
              '⦭': '&angmsdaf;',
              '⦮': '&angmsdag;',
              '⦯': '&angmsdah;',
              '∟': '&angrt;',
              '⊾': '&angrtvb;',
              '⦝': '&angrtvbd;',
              '∢': '&angsph;',
              '⍼': '&angzarr;',
              ą: '&aogon;',
              '𝕒': '&aopf;',
              '⩰': '&apE;',
              '⩯': '&apacir;',
              '≊': '&approxeq;',
              '≋': '&apid;',
              "'": '&apos;',
              å: '&aring;',
              '𝒶': '&ascr;',
              '*': '&midast;',
              ã: '&atilde;',
              ä: '&auml;',
              '⨑': '&awint;',
              '⫭': '&bNot;',
              '≌': '&bcong;',
              '϶': '&bepsi;',
              '‵': '&bprime;',
              '∽': '&bsim;',
              '⋍': '&bsime;',
              '⊽': '&barvee;',
              '⌅': '&barwedge;',
              '⎶': '&bbrktbrk;',
              б: '&bcy;',
              '„': '&ldquor;',
              '⦰': '&bemptyv;',
              β: '&beta;',
              ℶ: '&beth;',
              '≬': '&twixt;',
              '𝔟': '&bfr;',
              '◯': '&xcirc;',
              '⨀': '&xodot;',
              '⨁': '&xoplus;',
              '⨂': '&xotime;',
              '⨆': '&xsqcup;',
              '★': '&starf;',
              '▽': '&xdtri;',
              '△': '&xutri;',
              '⨄': '&xuplus;',
              '⤍': '&rbarr;',
              '⧫': '&lozf;',
              '▴': '&utrif;',
              '▾': '&dtrif;',
              '◂': '&ltrif;',
              '▸': '&rtrif;',
              '␣': '&blank;',
              '▒': '&blk12;',
              '░': '&blk14;',
              '▓': '&blk34;',
              '█': '&block;',
              '=⃥': '&bne;',
              '≡⃥': '&bnequiv;',
              '⌐': '&bnot;',
              '𝕓': '&bopf;',
              '⋈': '&bowtie;',
              '╗': '&boxDL;',
              '╔': '&boxDR;',
              '╖': '&boxDl;',
              '╓': '&boxDr;',
              '═': '&boxH;',
              '╦': '&boxHD;',
              '╩': '&boxHU;',
              '╤': '&boxHd;',
              '╧': '&boxHu;',
              '╝': '&boxUL;',
              '╚': '&boxUR;',
              '╜': '&boxUl;',
              '╙': '&boxUr;',
              '║': '&boxV;',
              '╬': '&boxVH;',
              '╣': '&boxVL;',
              '╠': '&boxVR;',
              '╫': '&boxVh;',
              '╢': '&boxVl;',
              '╟': '&boxVr;',
              '⧉': '&boxbox;',
              '╕': '&boxdL;',
              '╒': '&boxdR;',
              '┐': '&boxdl;',
              '┌': '&boxdr;',
              '╥': '&boxhD;',
              '╨': '&boxhU;',
              '┬': '&boxhd;',
              '┴': '&boxhu;',
              '⊟': '&minusb;',
              '⊞': '&plusb;',
              '⊠': '&timesb;',
              '╛': '&boxuL;',
              '╘': '&boxuR;',
              '┘': '&boxul;',
              '└': '&boxur;',
              '│': '&boxv;',
              '╪': '&boxvH;',
              '╡': '&boxvL;',
              '╞': '&boxvR;',
              '┼': '&boxvh;',
              '┤': '&boxvl;',
              '├': '&boxvr;',
              '¦': '&brvbar;',
              '𝒷': '&bscr;',
              '⁏': '&bsemi;',
              '\\': '&bsol;',
              '⧅': '&bsolb;',
              '⟈': '&bsolhsub;',
              '•': '&bullet;',
              '⪮': '&bumpE;',
              ć: '&cacute;',
              '∩': '&cap;',
              '⩄': '&capand;',
              '⩉': '&capbrcup;',
              '⩋': '&capcap;',
              '⩇': '&capcup;',
              '⩀': '&capdot;',
              '∩︀': '&caps;',
              '⁁': '&caret;',
              '⩍': '&ccaps;',
              č: '&ccaron;',
              ç: '&ccedil;',
              ĉ: '&ccirc;',
              '⩌': '&ccups;',
              '⩐': '&ccupssm;',
              ċ: '&cdot;',
              '⦲': '&cemptyv;',
              '¢': '&cent;',
              '𝔠': '&cfr;',
              ч: '&chcy;',
              '✓': '&checkmark;',
              χ: '&chi;',
              '○': '&cir;',
              '⧃': '&cirE;',
              ˆ: '&circ;',
              '≗': '&cire;',
              '↺': '&olarr;',
              '↻': '&orarr;',
              'Ⓢ': '&oS;',
              '⊛': '&oast;',
              '⊚': '&ocir;',
              '⊝': '&odash;',
              '⨐': '&cirfnint;',
              '⫯': '&cirmid;',
              '⧂': '&cirscir;',
              '♣': '&clubsuit;',
              ':': '&colon;',
              ',': '&comma;',
              '@': '&commat;',
              '∁': '&complement;',
              '⩭': '&congdot;',
              '𝕔': '&copf;',
              '℗': '&copysr;',
              '↵': '&crarr;',
              '✗': '&cross;',
              '𝒸': '&cscr;',
              '⫏': '&csub;',
              '⫑': '&csube;',
              '⫐': '&csup;',
              '⫒': '&csupe;',
              '⋯': '&ctdot;',
              '⤸': '&cudarrl;',
              '⤵': '&cudarrr;',
              '⋞': '&curlyeqprec;',
              '⋟': '&curlyeqsucc;',
              '↶': '&curvearrowleft;',
              '⤽': '&cularrp;',
              '∪': '&cup;',
              '⩈': '&cupbrcap;',
              '⩆': '&cupcap;',
              '⩊': '&cupcup;',
              '⊍': '&cupdot;',
              '⩅': '&cupor;',
              '∪︀': '&cups;',
              '↷': '&curvearrowright;',
              '⤼': '&curarrm;',
              '⋎': '&cuvee;',
              '⋏': '&cuwed;',
              '¤': '&curren;',
              '∱': '&cwint;',
              '⌭': '&cylcty;',
              '⥥': '&dHar;',
              '†': '&dagger;',
              ℸ: '&daleth;',
              '‐': '&hyphen;',
              '⤏': '&rBarr;',
              ď: '&dcaron;',
              д: '&dcy;',
              '⇊': '&downdownarrows;',
              '⩷': '&eDDot;',
              '°': '&deg;',
              δ: '&delta;',
              '⦱': '&demptyv;',
              '⥿': '&dfisht;',
              '𝔡': '&dfr;',
              '♦': '&diams;',
              ϝ: '&gammad;',
              '⋲': '&disin;',
              '÷': '&divide;',
              '⋇': '&divonx;',
              ђ: '&djcy;',
              '⌞': '&llcorner;',
              '⌍': '&dlcrop;',
              $: '&dollar;',
              '𝕕': '&dopf;',
              '≑': '&eDot;',
              '∸': '&minusd;',
              '∔': '&plusdo;',
              '⊡': '&sdotb;',
              '⌟': '&lrcorner;',
              '⌌': '&drcrop;',
              '𝒹': '&dscr;',
              ѕ: '&dscy;',
              '⧶': '&dsol;',
              đ: '&dstrok;',
              '⋱': '&dtdot;',
              '▿': '&triangledown;',
              '⦦': '&dwangle;',
              џ: '&dzcy;',
              '⟿': '&dzigrarr;',
              é: '&eacute;',
              '⩮': '&easter;',
              ě: '&ecaron;',
              '≖': '&eqcirc;',
              ê: '&ecirc;',
              '≕': '&eqcolon;',
              э: '&ecy;',
              ė: '&edot;',
              '≒': '&fallingdotseq;',
              '𝔢': '&efr;',
              '⪚': '&eg;',
              è: '&egrave;',
              '⪖': '&eqslantgtr;',
              '⪘': '&egsdot;',
              '⪙': '&el;',
              '⏧': '&elinters;',
              ℓ: '&ell;',
              '⪕': '&eqslantless;',
              '⪗': '&elsdot;',
              ē: '&emacr;',
              '∅': '&varnothing;',
              ' ': '&emsp13;',
              ' ': '&emsp14;',
              ' ': '&emsp;',
              ŋ: '&eng;',
              ' ': '&ensp;',
              ę: '&eogon;',
              '𝕖': '&eopf;',
              '⋕': '&epar;',
              '⧣': '&eparsl;',
              '⩱': '&eplus;',
              ε: '&epsilon;',
              ϵ: '&varepsilon;',
              '=': '&equals;',
              '≟': '&questeq;',
              '⩸': '&equivDD;',
              '⧥': '&eqvparsl;',
              '≓': '&risingdotseq;',
              '⥱': '&erarr;',
              ℯ: '&escr;',
              η: '&eta;',
              ð: '&eth;',
              ë: '&euml;',
              '€': '&euro;',
              '!': '&excl;',
              ф: '&fcy;',
              '♀': '&female;',
              ﬃ: '&ffilig;',
              ﬀ: '&fflig;',
              ﬄ: '&ffllig;',
              '𝔣': '&ffr;',
              ﬁ: '&filig;',
              fj: '&fjlig;',
              '♭': '&flat;',
              ﬂ: '&fllig;',
              '▱': '&fltns;',
              ƒ: '&fnof;',
              '𝕗': '&fopf;',
              '⋔': '&pitchfork;',
              '⫙': '&forkv;',
              '⨍': '&fpartint;',
              '½': '&half;',
              '⅓': '&frac13;',
              '¼': '&frac14;',
              '⅕': '&frac15;',
              '⅙': '&frac16;',
              '⅛': '&frac18;',
              '⅔': '&frac23;',
              '⅖': '&frac25;',
              '¾': '&frac34;',
              '⅗': '&frac35;',
              '⅜': '&frac38;',
              '⅘': '&frac45;',
              '⅚': '&frac56;',
              '⅝': '&frac58;',
              '⅞': '&frac78;',
              '⁄': '&frasl;',
              '⌢': '&sfrown;',
              '𝒻': '&fscr;',
              '⪌': '&gtreqqless;',
              ǵ: '&gacute;',
              γ: '&gamma;',
              '⪆': '&gtrapprox;',
              ğ: '&gbreve;',
              ĝ: '&gcirc;',
              г: '&gcy;',
              ġ: '&gdot;',
              '⪩': '&gescc;',
              '⪀': '&gesdot;',
              '⪂': '&gesdoto;',
              '⪄': '&gesdotol;',
              '⋛︀': '&gesl;',
              '⪔': '&gesles;',
              '𝔤': '&gfr;',
              ℷ: '&gimel;',
              ѓ: '&gjcy;',
              '⪒': '&glE;',
              '⪥': '&gla;',
              '⪤': '&glj;',
              '≩': '&gneqq;',
              '⪊': '&gnapprox;',
              '⪈': '&gneq;',
              '⋧': '&gnsim;',
              '𝕘': '&gopf;',
              ℊ: '&gscr;',
              '⪎': '&gsime;',
              '⪐': '&gsiml;',
              '⪧': '&gtcc;',
              '⩺': '&gtcir;',
              '⋗': '&gtrdot;',
              '⦕': '&gtlPar;',
              '⩼': '&gtquest;',
              '⥸': '&gtrarr;',
              '≩︀': '&gvnE;',
              ъ: '&hardcy;',
              '⥈': '&harrcir;',
              '↭': '&leftrightsquigarrow;',
              ℏ: '&plankv;',
              ĥ: '&hcirc;',
              '♥': '&heartsuit;',
              '…': '&mldr;',
              '⊹': '&hercon;',
              '𝔥': '&hfr;',
              '⤥': '&searhk;',
              '⤦': '&swarhk;',
              '⇿': '&hoarr;',
              '∻': '&homtht;',
              '↩': '&larrhk;',
              '↪': '&rarrhk;',
              '𝕙': '&hopf;',
              '―': '&horbar;',
              '𝒽': '&hscr;',
              ħ: '&hstrok;',
              '⁃': '&hybull;',
              í: '&iacute;',
              î: '&icirc;',
              и: '&icy;',
              е: '&iecy;',
              '¡': '&iexcl;',
              '𝔦': '&ifr;',
              ì: '&igrave;',
              '⨌': '&qint;',
              '∭': '&tint;',
              '⧜': '&iinfin;',
              '℩': '&iiota;',
              ĳ: '&ijlig;',
              ī: '&imacr;',
              ı: '&inodot;',
              '⊷': '&imof;',
              Ƶ: '&imped;',
              '℅': '&incare;',
              '∞': '&infin;',
              '⧝': '&infintie;',
              '⊺': '&intercal;',
              '⨗': '&intlarhk;',
              '⨼': '&iprod;',
              ё: '&iocy;',
              į: '&iogon;',
              '𝕚': '&iopf;',
              ι: '&iota;',
              '¿': '&iquest;',
              '𝒾': '&iscr;',
              '⋹': '&isinE;',
              '⋵': '&isindot;',
              '⋴': '&isins;',
              '⋳': '&isinsv;',
              ĩ: '&itilde;',
              і: '&iukcy;',
              ï: '&iuml;',
              ĵ: '&jcirc;',
              й: '&jcy;',
              '𝔧': '&jfr;',
              ȷ: '&jmath;',
              '𝕛': '&jopf;',
              '𝒿': '&jscr;',
              ј: '&jsercy;',
              є: '&jukcy;',
              κ: '&kappa;',
              ϰ: '&varkappa;',
              ķ: '&kcedil;',
              к: '&kcy;',
              '𝔨': '&kfr;',
              ĸ: '&kgreen;',
              х: '&khcy;',
              ќ: '&kjcy;',
              '𝕜': '&kopf;',
              '𝓀': '&kscr;',
              '⤛': '&lAtail;',
              '⤎': '&lBarr;',
              '⪋': '&lesseqqgtr;',
              '⥢': '&lHar;',
              ĺ: '&lacute;',
              '⦴': '&laemptyv;',
              λ: '&lambda;',
              '⦑': '&langd;',
              '⪅': '&lessapprox;',
              '«': '&laquo;',
              '⤟': '&larrbfs;',
              '⤝': '&larrfs;',
              '↫': '&looparrowleft;',
              '⤹': '&larrpl;',
              '⥳': '&larrsim;',
              '↢': '&leftarrowtail;',
              '⪫': '&lat;',
              '⤙': '&latail;',
              '⪭': '&late;',
              '⪭︀': '&lates;',
              '⤌': '&lbarr;',
              '❲': '&lbbrk;',
              '{': '&lcub;',
              '[': '&lsqb;',
              '⦋': '&lbrke;',
              '⦏': '&lbrksld;',
              '⦍': '&lbrkslu;',
              ľ: '&lcaron;',
              ļ: '&lcedil;',
              л: '&lcy;',
              '⤶': '&ldca;',
              '⥧': '&ldrdhar;',
              '⥋': '&ldrushar;',
              '↲': '&ldsh;',
              '≤': '&leq;',
              '⇇': '&llarr;',
              '⋋': '&lthree;',
              '⪨': '&lescc;',
              '⩿': '&lesdot;',
              '⪁': '&lesdoto;',
              '⪃': '&lesdotor;',
              '⋚︀': '&lesg;',
              '⪓': '&lesges;',
              '⋖': '&ltdot;',
              '⥼': '&lfisht;',
              '𝔩': '&lfr;',
              '⪑': '&lgE;',
              '⥪': '&lharul;',
              '▄': '&lhblk;',
              љ: '&ljcy;',
              '⥫': '&llhard;',
              '◺': '&lltri;',
              ŀ: '&lmidot;',
              '⎰': '&lmoustache;',
              '≨': '&lneqq;',
              '⪉': '&lnapprox;',
              '⪇': '&lneq;',
              '⋦': '&lnsim;',
              '⟬': '&loang;',
              '⇽': '&loarr;',
              '⟼': '&xmap;',
              '↬': '&rarrlp;',
              '⦅': '&lopar;',
              '𝕝': '&lopf;',
              '⨭': '&loplus;',
              '⨴': '&lotimes;',
              '∗': '&lowast;',
              '◊': '&lozenge;',
              '(': '&lpar;',
              '⦓': '&lparlt;',
              '⥭': '&lrhard;',
              '‎': '&lrm;',
              '⊿': '&lrtri;',
              '‹': '&lsaquo;',
              '𝓁': '&lscr;',
              '⪍': '&lsime;',
              '⪏': '&lsimg;',
              '‚': '&sbquo;',
              ł: '&lstrok;',
              '⪦': '&ltcc;',
              '⩹': '&ltcir;',
              '⋉': '&ltimes;',
              '⥶': '&ltlarr;',
              '⩻': '&ltquest;',
              '⦖': '&ltrPar;',
              '◃': '&triangleleft;',
              '⥊': '&lurdshar;',
              '⥦': '&luruhar;',
              '≨︀': '&lvnE;',
              '∺': '&mDDot;',
              '¯': '&strns;',
              '♂': '&male;',
              '✠': '&maltese;',
              '▮': '&marker;',
              '⨩': '&mcomma;',
              м: '&mcy;',
              '—': '&mdash;',
              '𝔪': '&mfr;',
              '℧': '&mho;',
              µ: '&micro;',
              '⫰': '&midcir;',
              '−': '&minus;',
              '⨪': '&minusdu;',
              '⫛': '&mlcp;',
              '⊧': '&models;',
              '𝕞': '&mopf;',
              '𝓂': '&mscr;',
              μ: '&mu;',
              '⊸': '&mumap;',
              '⋙̸': '&nGg;',
              '≫⃒': '&nGt;',
              '⇍': '&nlArr;',
              '⇎': '&nhArr;',
              '⋘̸': '&nLl;',
              '≪⃒': '&nLt;',
              '⇏': '&nrArr;',
              '⊯': '&nVDash;',
              '⊮': '&nVdash;',
              ń: '&nacute;',
              '∠⃒': '&nang;',
              '⩰̸': '&napE;',
              '≋̸': '&napid;',
              ŉ: '&napos;',
              '♮': '&natural;',
              '⩃': '&ncap;',
              ň: '&ncaron;',
              ņ: '&ncedil;',
              '⩭̸': '&ncongdot;',
              '⩂': '&ncup;',
              н: '&ncy;',
              '–': '&ndash;',
              '⇗': '&neArr;',
              '⤤': '&nearhk;',
              '≐̸': '&nedot;',
              '⤨': '&toea;',
              '𝔫': '&nfr;',
              '↮': '&nleftrightarrow;',
              '⫲': '&nhpar;',
              '⋼': '&nis;',
              '⋺': '&nisd;',
              њ: '&njcy;',
              '≦̸': '&nleqq;',
              '↚': '&nleftarrow;',
              '‥': '&nldr;',
              '𝕟': '&nopf;',
              '¬': '&not;',
              '⋹̸': '&notinE;',
              '⋵̸': '&notindot;',
              '⋷': '&notinvb;',
              '⋶': '&notinvc;',
              '⋾': '&notnivb;',
              '⋽': '&notnivc;',
              '⫽⃥': '&nparsl;',
              '∂̸': '&npart;',
              '⨔': '&npolint;',
              '↛': '&nrightarrow;',
              '⤳̸': '&nrarrc;',
              '↝̸': '&nrarrw;',
              '𝓃': '&nscr;',
              '⊄': '&nsub;',
              '⫅̸': '&nsubseteqq;',
              '⊅': '&nsup;',
              '⫆̸': '&nsupseteqq;',
              ñ: '&ntilde;',
              ν: '&nu;',
              '#': '&num;',
              '№': '&numero;',
              ' ': '&numsp;',
              '⊭': '&nvDash;',
              '⤄': '&nvHarr;',
              '≍⃒': '&nvap;',
              '⊬': '&nvdash;',
              '≥⃒': '&nvge;',
              '>⃒': '&nvgt;',
              '⧞': '&nvinfin;',
              '⤂': '&nvlArr;',
              '≤⃒': '&nvle;',
              '<⃒': '&nvlt;',
              '⊴⃒': '&nvltrie;',
              '⤃': '&nvrArr;',
              '⊵⃒': '&nvrtrie;',
              '∼⃒': '&nvsim;',
              '⇖': '&nwArr;',
              '⤣': '&nwarhk;',
              '⤧': '&nwnear;',
              ó: '&oacute;',
              ô: '&ocirc;',
              о: '&ocy;',
              ő: '&odblac;',
              '⨸': '&odiv;',
              '⦼': '&odsold;',
              œ: '&oelig;',
              '⦿': '&ofcir;',
              '𝔬': '&ofr;',
              '˛': '&ogon;',
              ò: '&ograve;',
              '⧁': '&ogt;',
              '⦵': '&ohbar;',
              '⦾': '&olcir;',
              '⦻': '&olcross;',
              '⧀': '&olt;',
              ō: '&omacr;',
              ω: '&omega;',
              ο: '&omicron;',
              '⦶': '&omid;',
              '𝕠': '&oopf;',
              '⦷': '&opar;',
              '⦹': '&operp;',
              '∨': '&vee;',
              '⩝': '&ord;',
              ℴ: '&oscr;',
              ª: '&ordf;',
              º: '&ordm;',
              '⊶': '&origof;',
              '⩖': '&oror;',
              '⩗': '&orslope;',
              '⩛': '&orv;',
              ø: '&oslash;',
              '⊘': '&osol;',
              õ: '&otilde;',
              '⨶': '&otimesas;',
              ö: '&ouml;',
              '⌽': '&ovbar;',
              '¶': '&para;',
              '⫳': '&parsim;',
              '⫽': '&parsl;',
              п: '&pcy;',
              '%': '&percnt;',
              '.': '&period;',
              '‰': '&permil;',
              '‱': '&pertenk;',
              '𝔭': '&pfr;',
              φ: '&phi;',
              ϕ: '&varphi;',
              '☎': '&phone;',
              π: '&pi;',
              ϖ: '&varpi;',
              ℎ: '&planckh;',
              '+': '&plus;',
              '⨣': '&plusacir;',
              '⨢': '&pluscir;',
              '⨥': '&plusdu;',
              '⩲': '&pluse;',
              '⨦': '&plussim;',
              '⨧': '&plustwo;',
              '⨕': '&pointint;',
              '𝕡': '&popf;',
              '£': '&pound;',
              '⪳': '&prE;',
              '⪷': '&precapprox;',
              '⪹': '&prnap;',
              '⪵': '&prnE;',
              '⋨': '&prnsim;',
              '′': '&prime;',
              '⌮': '&profalar;',
              '⌒': '&profline;',
              '⌓': '&profsurf;',
              '⊰': '&prurel;',
              '𝓅': '&pscr;',
              ψ: '&psi;',
              ' ': '&puncsp;',
              '𝔮': '&qfr;',
              '𝕢': '&qopf;',
              '⁗': '&qprime;',
              '𝓆': '&qscr;',
              '⨖': '&quatint;',
              '?': '&quest;',
              '⤜': '&rAtail;',
              '⥤': '&rHar;',
              '∽̱': '&race;',
              ŕ: '&racute;',
              '⦳': '&raemptyv;',
              '⦒': '&rangd;',
              '⦥': '&range;',
              '»': '&raquo;',
              '⥵': '&rarrap;',
              '⤠': '&rarrbfs;',
              '⤳': '&rarrc;',
              '⤞': '&rarrfs;',
              '⥅': '&rarrpl;',
              '⥴': '&rarrsim;',
              '↣': '&rightarrowtail;',
              '↝': '&rightsquigarrow;',
              '⤚': '&ratail;',
              '∶': '&ratio;',
              '❳': '&rbbrk;',
              '}': '&rcub;',
              ']': '&rsqb;',
              '⦌': '&rbrke;',
              '⦎': '&rbrksld;',
              '⦐': '&rbrkslu;',
              ř: '&rcaron;',
              ŗ: '&rcedil;',
              р: '&rcy;',
              '⤷': '&rdca;',
              '⥩': '&rdldhar;',
              '↳': '&rdsh;',
              '▭': '&rect;',
              '⥽': '&rfisht;',
              '𝔯': '&rfr;',
              '⥬': '&rharul;',
              ρ: '&rho;',
              ϱ: '&varrho;',
              '⇉': '&rrarr;',
              '⋌': '&rthree;',
              '˚': '&ring;',
              '‏': '&rlm;',
              '⎱': '&rmoustache;',
              '⫮': '&rnmid;',
              '⟭': '&roang;',
              '⇾': '&roarr;',
              '⦆': '&ropar;',
              '𝕣': '&ropf;',
              '⨮': '&roplus;',
              '⨵': '&rotimes;',
              ')': '&rpar;',
              '⦔': '&rpargt;',
              '⨒': '&rppolint;',
              '›': '&rsaquo;',
              '𝓇': '&rscr;',
              '⋊': '&rtimes;',
              '▹': '&triangleright;',
              '⧎': '&rtriltri;',
              '⥨': '&ruluhar;',
              '℞': '&rx;',
              ś: '&sacute;',
              '⪴': '&scE;',
              '⪸': '&succapprox;',
              š: '&scaron;',
              ş: '&scedil;',
              ŝ: '&scirc;',
              '⪶': '&succneqq;',
              '⪺': '&succnapprox;',
              '⋩': '&succnsim;',
              '⨓': '&scpolint;',
              с: '&scy;',
              '⋅': '&sdot;',
              '⩦': '&sdote;',
              '⇘': '&seArr;',
              '§': '&sect;',
              ';': '&semi;',
              '⤩': '&tosa;',
              '✶': '&sext;',
              '𝔰': '&sfr;',
              '♯': '&sharp;',
              щ: '&shchcy;',
              ш: '&shcy;',
              '­': '&shy;',
              σ: '&sigma;',
              ς: '&varsigma;',
              '⩪': '&simdot;',
              '⪞': '&simg;',
              '⪠': '&simgE;',
              '⪝': '&siml;',
              '⪟': '&simlE;',
              '≆': '&simne;',
              '⨤': '&simplus;',
              '⥲': '&simrarr;',
              '⨳': '&smashp;',
              '⧤': '&smeparsl;',
              '⌣': '&ssmile;',
              '⪪': '&smt;',
              '⪬': '&smte;',
              '⪬︀': '&smtes;',
              ь: '&softcy;',
              '/': '&sol;',
              '⧄': '&solb;',
              '⌿': '&solbar;',
              '𝕤': '&sopf;',
              '♠': '&spadesuit;',
              '⊓︀': '&sqcaps;',
              '⊔︀': '&sqcups;',
              '𝓈': '&sscr;',
              '☆': '&star;',
              '⊂': '&subset;',
              '⫅': '&subseteqq;',
              '⪽': '&subdot;',
              '⫃': '&subedot;',
              '⫁': '&submult;',
              '⫋': '&subsetneqq;',
              '⊊': '&subsetneq;',
              '⪿': '&subplus;',
              '⥹': '&subrarr;',
              '⫇': '&subsim;',
              '⫕': '&subsub;',
              '⫓': '&subsup;',
              '♪': '&sung;',
              '¹': '&sup1;',
              '²': '&sup2;',
              '³': '&sup3;',
              '⫆': '&supseteqq;',
              '⪾': '&supdot;',
              '⫘': '&supdsub;',
              '⫄': '&supedot;',
              '⟉': '&suphsol;',
              '⫗': '&suphsub;',
              '⥻': '&suplarr;',
              '⫂': '&supmult;',
              '⫌': '&supsetneqq;',
              '⊋': '&supsetneq;',
              '⫀': '&supplus;',
              '⫈': '&supsim;',
              '⫔': '&supsub;',
              '⫖': '&supsup;',
              '⇙': '&swArr;',
              '⤪': '&swnwar;',
              ß: '&szlig;',
              '⌖': '&target;',
              τ: '&tau;',
              ť: '&tcaron;',
              ţ: '&tcedil;',
              т: '&tcy;',
              '⌕': '&telrec;',
              '𝔱': '&tfr;',
              θ: '&theta;',
              ϑ: '&vartheta;',
              þ: '&thorn;',
              '×': '&times;',
              '⨱': '&timesbar;',
              '⨰': '&timesd;',
              '⌶': '&topbot;',
              '⫱': '&topcir;',
              '𝕥': '&topf;',
              '⫚': '&topfork;',
              '‴': '&tprime;',
              '▵': '&utri;',
              '≜': '&trie;',
              '◬': '&tridot;',
              '⨺': '&triminus;',
              '⨹': '&triplus;',
              '⧍': '&trisb;',
              '⨻': '&tritime;',
              '⏢': '&trpezium;',
              '𝓉': '&tscr;',
              ц: '&tscy;',
              ћ: '&tshcy;',
              ŧ: '&tstrok;',
              '⥣': '&uHar;',
              ú: '&uacute;',
              ў: '&ubrcy;',
              ŭ: '&ubreve;',
              û: '&ucirc;',
              у: '&ucy;',
              ű: '&udblac;',
              '⥾': '&ufisht;',
              '𝔲': '&ufr;',
              ù: '&ugrave;',
              '▀': '&uhblk;',
              '⌜': '&ulcorner;',
              '⌏': '&ulcrop;',
              '◸': '&ultri;',
              ū: '&umacr;',
              ų: '&uogon;',
              '𝕦': '&uopf;',
              υ: '&upsilon;',
              '⇈': '&uuarr;',
              '⌝': '&urcorner;',
              '⌎': '&urcrop;',
              ů: '&uring;',
              '◹': '&urtri;',
              '𝓊': '&uscr;',
              '⋰': '&utdot;',
              ũ: '&utilde;',
              ü: '&uuml;',
              '⦧': '&uwangle;',
              '⫨': '&vBar;',
              '⫩': '&vBarv;',
              '⦜': '&vangrt;',
              '⊊︀': '&vsubne;',
              '⫋︀': '&vsubnE;',
              '⊋︀': '&vsupne;',
              '⫌︀': '&vsupnE;',
              в: '&vcy;',
              '⊻': '&veebar;',
              '≚': '&veeeq;',
              '⋮': '&vellip;',
              '𝔳': '&vfr;',
              '𝕧': '&vopf;',
              '𝓋': '&vscr;',
              '⦚': '&vzigzag;',
              ŵ: '&wcirc;',
              '⩟': '&wedbar;',
              '≙': '&wedgeq;',
              '℘': '&wp;',
              '𝔴': '&wfr;',
              '𝕨': '&wopf;',
              '𝓌': '&wscr;',
              '𝔵': '&xfr;',
              ξ: '&xi;',
              '⋻': '&xnis;',
              '𝕩': '&xopf;',
              '𝓍': '&xscr;',
              ý: '&yacute;',
              я: '&yacy;',
              ŷ: '&ycirc;',
              ы: '&ycy;',
              '¥': '&yen;',
              '𝔶': '&yfr;',
              ї: '&yicy;',
              '𝕪': '&yopf;',
              '𝓎': '&yscr;',
              ю: '&yucy;',
              ÿ: '&yuml;',
              ź: '&zacute;',
              ž: '&zcaron;',
              з: '&zcy;',
              ż: '&zdot;',
              ζ: '&zeta;',
              '𝔷': '&zfr;',
              ж: '&zhcy;',
              '⇝': '&zigrarr;',
              '𝕫': '&zopf;',
              '𝓏': '&zscr;',
              '‍': '&zwj;',
              '‌': '&zwnj;',
            },
          },
        };

        /***/
      },

    /***/ './node_modules/html-entities/lib/numeric-unicode-map.js':
      /*!***************************************************************!*\
  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
  \***************************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.numericUnicodeMap = {
          0: 65533,
          128: 8364,
          130: 8218,
          131: 402,
          132: 8222,
          133: 8230,
          134: 8224,
          135: 8225,
          136: 710,
          137: 8240,
          138: 352,
          139: 8249,
          140: 338,
          142: 381,
          145: 8216,
          146: 8217,
          147: 8220,
          148: 8221,
          149: 8226,
          150: 8211,
          151: 8212,
          152: 732,
          153: 8482,
          154: 353,
          155: 8250,
          156: 339,
          158: 382,
          159: 376,
        };

        /***/
      },

    /***/ './node_modules/html-entities/lib/surrogate-pairs.js':
      /*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.fromCodePoint =
          String.fromCodePoint ||
          function (astralCodePoint) {
            return String.fromCharCode(
              Math.floor((astralCodePoint - 65536) / 1024) + 55296,
              ((astralCodePoint - 65536) % 1024) + 56320
            );
          };
        exports.getCodePoint = String.prototype.codePointAt
          ? function (input, position) {
              return input.codePointAt(position);
            }
          : function (input, position) {
              return (
                (input.charCodeAt(position) - 55296) * 1024 +
                input.charCodeAt(position + 1) -
                56320 +
                65536
              );
            };
        exports.highSurrogateFrom = 55296;
        exports.highSurrogateTo = 56319;

        /***/
      },

    /***/ './node_modules/jquery/dist/jquery.js':
      /*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
      /***/ function (module, exports) {
        var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        /*!
         * jQuery JavaScript Library v3.7.1
         * https://jquery.com/
         *
         * Copyright OpenJS Foundation and other contributors
         * Released under the MIT license
         * https://jquery.org/license
         *
         * Date: 2023-08-28T13:37Z
         */
        (function (global, factory) {
          'use strict';

          if (true && typeof module.exports === 'object') {
            // For CommonJS and CommonJS-like environments where a proper `window`
            // is present, execute the factory and get jQuery.
            // For environments that do not have a `window` with a `document`
            // (such as Node.js), expose a factory as module.exports.
            // This accentuates the need for the creation of a real `window`.
            // e.g. var jQuery = require("jquery")(window);
            // See ticket trac-14549 for more info.
            module.exports = global.document
              ? factory(global, true)
              : function (w) {
                  if (!w.document) {
                    throw new Error('jQuery requires a window with a document');
                  }
                  return factory(w);
                };
          } else {
            factory(global);
          }

          // Pass this if window is not defined yet
        })(
          typeof window !== 'undefined' ? window : this,
          function (window, noGlobal) {
            // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
            // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
            // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
            // enough that all such attempts are guarded in a try block.
            'use strict';

            var arr = [];

            var getProto = Object.getPrototypeOf;

            var slice = arr.slice;

            var flat = arr.flat
              ? function (array) {
                  return arr.flat.call(array);
                }
              : function (array) {
                  return arr.concat.apply([], array);
                };

            var push = arr.push;

            var indexOf = arr.indexOf;

            var class2type = {};

            var toString = class2type.toString;

            var hasOwn = class2type.hasOwnProperty;

            var fnToString = hasOwn.toString;

            var ObjectFunctionString = fnToString.call(Object);

            var support = {};

            var isFunction = function isFunction(obj) {
              // Support: Chrome <=57, Firefox <=52
              // In some browsers, typeof returns "function" for HTML <object> elements
              // (i.e., `typeof document.createElement( "object" ) === "function"`).
              // We don't want to classify *any* DOM node as a function.
              // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
              // Plus for old WebKit, typeof returns "function" for HTML collections
              // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
              return (
                typeof obj === 'function' &&
                typeof obj.nodeType !== 'number' &&
                typeof obj.item !== 'function'
              );
            };

            var isWindow = function isWindow(obj) {
              return obj != null && obj === obj.window;
            };

            var document = window.document;

            var preservedScriptAttributes = {
              type: true,
              src: true,
              nonce: true,
              noModule: true,
            };

            function DOMEval(code, node, doc) {
              doc = doc || document;

              var i,
                val,
                script = doc.createElement('script');

              script.text = code;
              if (node) {
                for (i in preservedScriptAttributes) {
                  // Support: Firefox 64+, Edge 18+
                  // Some browsers don't support the "nonce" property on scripts.
                  // On the other hand, just using `getAttribute` is not enough as
                  // the `nonce` attribute is reset to an empty string whenever it
                  // becomes browsing-context connected.
                  // See https://github.com/whatwg/html/issues/2369
                  // See https://html.spec.whatwg.org/#nonce-attributes
                  // The `node.getAttribute` check was added for the sake of
                  // `jQuery.globalEval` so that it can fake a nonce-containing node
                  // via an object.
                  val = node[i] || (node.getAttribute && node.getAttribute(i));
                  if (val) {
                    script.setAttribute(i, val);
                  }
                }
              }
              doc.head.appendChild(script).parentNode.removeChild(script);
            }

            function toType(obj) {
              if (obj == null) {
                return obj + '';
              }

              // Support: Android <=2.3 only (functionish RegExp)
              return typeof obj === 'object' || typeof obj === 'function'
                ? class2type[toString.call(obj)] || 'object'
                : typeof obj;
            }
            /* global Symbol */
            // Defining this global in .eslintrc.json would create a danger of using the global
            // unguarded in another place, it seems safer to define global only for this module

            var version = '3.7.1',
              rhtmlSuffix = /HTML$/i,
              // Define a local copy of jQuery
              jQuery = function (selector, context) {
                // The jQuery object is actually just the init constructor 'enhanced'
                // Need init if jQuery is called (just allow error to be thrown if not included)
                return new jQuery.fn.init(selector, context);
              };

            jQuery.fn = jQuery.prototype = {
              // The current version of jQuery being used
              jquery: version,

              constructor: jQuery,

              // The default length of a jQuery object is 0
              length: 0,

              toArray: function () {
                return slice.call(this);
              },

              // Get the Nth element in the matched element set OR
              // Get the whole matched element set as a clean array
              get: function (num) {
                // Return all the elements in a clean array
                if (num == null) {
                  return slice.call(this);
                }

                // Return just the one element from the set
                return num < 0 ? this[num + this.length] : this[num];
              },

              // Take an array of elements and push it onto the stack
              // (returning the new matched element set)
              pushStack: function (elems) {
                // Build a new jQuery matched element set
                var ret = jQuery.merge(this.constructor(), elems);

                // Add the old object onto the stack (as a reference)
                ret.prevObject = this;

                // Return the newly-formed element set
                return ret;
              },

              // Execute a callback for every element in the matched set.
              each: function (callback) {
                return jQuery.each(this, callback);
              },

              map: function (callback) {
                return this.pushStack(
                  jQuery.map(this, function (elem, i) {
                    return callback.call(elem, i, elem);
                  })
                );
              },

              slice: function () {
                return this.pushStack(slice.apply(this, arguments));
              },

              first: function () {
                return this.eq(0);
              },

              last: function () {
                return this.eq(-1);
              },

              even: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return (i + 1) % 2;
                  })
                );
              },

              odd: function () {
                return this.pushStack(
                  jQuery.grep(this, function (_elem, i) {
                    return i % 2;
                  })
                );
              },

              eq: function (i) {
                var len = this.length,
                  j = +i + (i < 0 ? len : 0);
                return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
              },

              end: function () {
                return this.prevObject || this.constructor();
              },

              // For internal use only.
              // Behaves like an Array's method, not like a jQuery method.
              push: push,
              sort: arr.sort,
              splice: arr.splice,
            };

            jQuery.extend = jQuery.fn.extend = function () {
              var options,
                name,
                src,
                copy,
                copyIsArray,
                clone,
                target = arguments[0] || {},
                i = 1,
                length = arguments.length,
                deep = false;

              // Handle a deep copy situation
              if (typeof target === 'boolean') {
                deep = target;

                // Skip the boolean and the target
                target = arguments[i] || {};
                i++;
              }

              // Handle case when target is a string or something (possible in deep copy)
              if (typeof target !== 'object' && !isFunction(target)) {
                target = {};
              }

              // Extend jQuery itself if only one argument is passed
              if (i === length) {
                target = this;
                i--;
              }

              for (; i < length; i++) {
                // Only deal with non-null/undefined values
                if ((options = arguments[i]) != null) {
                  // Extend the base object
                  for (name in options) {
                    copy = options[name];

                    // Prevent Object.prototype pollution
                    // Prevent never-ending loop
                    if (name === '__proto__' || target === copy) {
                      continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (
                      deep &&
                      copy &&
                      (jQuery.isPlainObject(copy) ||
                        (copyIsArray = Array.isArray(copy)))
                    ) {
                      src = target[name];

                      // Ensure proper type for the source value
                      if (copyIsArray && !Array.isArray(src)) {
                        clone = [];
                      } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                        clone = {};
                      } else {
                        clone = src;
                      }
                      copyIsArray = false;

                      // Never move original objects, clone them
                      target[name] = jQuery.extend(deep, clone, copy);

                      // Don't bring in undefined values
                    } else if (copy !== undefined) {
                      target[name] = copy;
                    }
                  }
                }
              }

              // Return the modified object
              return target;
            };

            jQuery.extend({
              // Unique for each copy of jQuery on the page
              expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),

              // Assume jQuery is ready without the ready module
              isReady: true,

              error: function (msg) {
                throw new Error(msg);
              },

              noop: function () {},

              isPlainObject: function (obj) {
                var proto, Ctor;

                // Detect obvious negatives
                // Use toString instead of jQuery.type to catch host objects
                if (!obj || toString.call(obj) !== '[object Object]') {
                  return false;
                }

                proto = getProto(obj);

                // Objects with no prototype (e.g., `Object.create( null )`) are plain
                if (!proto) {
                  return true;
                }

                // Objects with prototype are plain iff they were constructed by a global Object function
                Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
                return (
                  typeof Ctor === 'function' &&
                  fnToString.call(Ctor) === ObjectFunctionString
                );
              },

              isEmptyObject: function (obj) {
                var name;

                for (name in obj) {
                  return false;
                }
                return true;
              },

              // Evaluates a script in a provided context; falls back to the global one
              // if not specified.
              globalEval: function (code, options, doc) {
                DOMEval(code, { nonce: options && options.nonce }, doc);
              },

              each: function (obj, callback) {
                var length,
                  i = 0;

                if (isArrayLike(obj)) {
                  length = obj.length;
                  for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                } else {
                  for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                      break;
                    }
                  }
                }

                return obj;
              },

              // Retrieve the text value of an array of DOM nodes
              text: function (elem) {
                var node,
                  ret = '',
                  i = 0,
                  nodeType = elem.nodeType;

                if (!nodeType) {
                  // If no nodeType, this is expected to be an array
                  while ((node = elem[i++])) {
                    // Do not traverse comment nodes
                    ret += jQuery.text(node);
                  }
                }
                if (nodeType === 1 || nodeType === 11) {
                  return elem.textContent;
                }
                if (nodeType === 9) {
                  return elem.documentElement.textContent;
                }
                if (nodeType === 3 || nodeType === 4) {
                  return elem.nodeValue;
                }

                // Do not include comment or processing instruction nodes

                return ret;
              },

              // results is for internal usage only
              makeArray: function (arr, results) {
                var ret = results || [];

                if (arr != null) {
                  if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                  } else {
                    push.call(ret, arr);
                  }
                }

                return ret;
              },

              inArray: function (elem, arr, i) {
                return arr == null ? -1 : indexOf.call(arr, elem, i);
              },

              isXMLDoc: function (elem) {
                var namespace = elem && elem.namespaceURI,
                  docElem =
                    elem && (elem.ownerDocument || elem).documentElement;

                // Assume HTML when documentElement doesn't yet exist, such as inside
                // document fragments.
                return !rhtmlSuffix.test(
                  namespace || (docElem && docElem.nodeName) || 'HTML'
                );
              },

              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              merge: function (first, second) {
                var len = +second.length,
                  j = 0,
                  i = first.length;

                for (; j < len; j++) {
                  first[i++] = second[j];
                }

                first.length = i;

                return first;
              },

              grep: function (elems, callback, invert) {
                var callbackInverse,
                  matches = [],
                  i = 0,
                  length = elems.length,
                  callbackExpect = !invert;

                // Go through the array, only saving the items
                // that pass the validator function
                for (; i < length; i++) {
                  callbackInverse = !callback(elems[i], i);
                  if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                  }
                }

                return matches;
              },

              // arg is for internal usage only
              map: function (elems, callback, arg) {
                var length,
                  value,
                  i = 0,
                  ret = [];

                // Go through the array, translating each of the items to their new values
                if (isArrayLike(elems)) {
                  length = elems.length;
                  for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }

                  // Go through every key on the object,
                } else {
                  for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                      ret.push(value);
                    }
                  }
                }

                // Flatten any nested arrays
                return flat(ret);
              },

              // A global GUID counter for objects
              guid: 1,

              // jQuery.support is not used in Core but other projects attach their
              // properties to it so it needs to exist.
              support: support,
            });

            if (typeof Symbol === 'function') {
              jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
            }

            // Populate the class2type map
            jQuery.each(
              'Boolean Number String Function Array Date RegExp Object Error Symbol'.split(
                ' '
              ),
              function (_i, name) {
                class2type['[object ' + name + ']'] = name.toLowerCase();
              }
            );

            function isArrayLike(obj) {
              // Support: real iOS 8.2 only (not reproducible in simulator)
              // `in` check used to prevent JIT error (gh-2145)
              // hasOwn isn't used here due to false negatives
              // regarding Nodelist length in IE
              var length = !!obj && 'length' in obj && obj.length,
                type = toType(obj);

              if (isFunction(obj) || isWindow(obj)) {
                return false;
              }

              return (
                type === 'array' ||
                length === 0 ||
                (typeof length === 'number' && length > 0 && length - 1 in obj)
              );
            }

            function nodeName(elem, name) {
              return (
                elem.nodeName &&
                elem.nodeName.toLowerCase() === name.toLowerCase()
              );
            }
            var pop = arr.pop;

            var sort = arr.sort;

            var splice = arr.splice;

            var whitespace = '[\\x20\\t\\r\\n\\f]';

            var rtrimCSS = new RegExp(
              '^' +
                whitespace +
                '+|((?:^|[^\\\\])(?:\\\\.)*)' +
                whitespace +
                '+$',
              'g'
            );

            // Note: an element does not contain itself
            jQuery.contains = function (a, b) {
              var bup = b && b.parentNode;

              return (
                a === bup ||
                !!(
                  bup &&
                  bup.nodeType === 1 &&
                  // Support: IE 9 - 11+
                  // IE doesn't have `contains` on SVG.
                  (a.contains
                    ? a.contains(bup)
                    : a.compareDocumentPosition &&
                      a.compareDocumentPosition(bup) & 16)
                )
              );
            };

            // CSS string/identifier serialization
            // https://drafts.csswg.org/cssom/#common-serializing-idioms
            var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

            function fcssescape(ch, asCodePoint) {
              if (asCodePoint) {
                // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
                if (ch === '\0') {
                  return '\uFFFD';
                }

                // Control characters and (dependent upon position) numbers get escaped as code points
                return (
                  ch.slice(0, -1) +
                  '\\' +
                  ch.charCodeAt(ch.length - 1).toString(16) +
                  ' '
                );
              }

              // Other potentially-special ASCII characters get backslash-escaped
              return '\\' + ch;
            }

            jQuery.escapeSelector = function (sel) {
              return (sel + '').replace(rcssescape, fcssescape);
            };

            var preferredDoc = document,
              pushNative = push;

            (function () {
              var i,
                Expr,
                outermostContext,
                sortInput,
                hasDuplicate,
                push = pushNative,
                // Local document vars
                document,
                documentElement,
                documentIsHTML,
                rbuggyQSA,
                matches,
                // Instance-specific data
                expando = jQuery.expando,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                nonnativeSelectorCache = createCache(),
                sortOrder = function (a, b) {
                  if (a === b) {
                    hasDuplicate = true;
                  }
                  return 0;
                },
                booleans =
                  'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|' +
                  'loop|multiple|open|readonly|required|scoped',
                // Regular expressions

                // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
                identifier =
                  '(?:\\\\[\\da-fA-F]{1,6}' +
                  whitespace +
                  '?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+',
                // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
                attributes =
                  '\\[' +
                  whitespace +
                  '*(' +
                  identifier +
                  ')(?:' +
                  whitespace +
                  // Operator (capture 2)
                  '*([*^$|!~]?=)' +
                  whitespace +
                  // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                  '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' +
                  identifier +
                  '))|)' +
                  whitespace +
                  '*\\]',
                pseudos =
                  ':(' +
                  identifier +
                  ')(?:\\((' +
                  // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                  // 1. quoted (capture 3; capture 4 or capture 5)
                  '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' +
                  // 2. simple (capture 6)
                  '((?:\\\\.|[^\\\\()[\\]]|' +
                  attributes +
                  ')*)|' +
                  // 3. anything else (capture 2)
                  '.*' +
                  ')\\)|)',
                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + '+', 'g'),
                rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'),
                rleadingCombinator = new RegExp(
                  '^' +
                    whitespace +
                    '*([>+~]|' +
                    whitespace +
                    ')' +
                    whitespace +
                    '*'
                ),
                rdescend = new RegExp(whitespace + '|>'),
                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp('^' + identifier + '$'),
                matchExpr = {
                  ID: new RegExp('^#(' + identifier + ')'),
                  CLASS: new RegExp('^\\.(' + identifier + ')'),
                  TAG: new RegExp('^(' + identifier + '|[*])'),
                  ATTR: new RegExp('^' + attributes),
                  PSEUDO: new RegExp('^' + pseudos),
                  CHILD: new RegExp(
                    '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' +
                      whitespace +
                      '*(even|odd|(([+-]|)(\\d*)n|)' +
                      whitespace +
                      '*(?:([+-]|)' +
                      whitespace +
                      '*(\\d+)|))' +
                      whitespace +
                      '*\\)|)',
                    'i'
                  ),
                  bool: new RegExp('^(?:' + booleans + ')$', 'i'),

                  // For use in libraries implementing .is()
                  // We use this for POS matching in `select`
                  needsContext: new RegExp(
                    '^' +
                      whitespace +
                      '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' +
                      whitespace +
                      '*((?:-\\d)?\\d*)' +
                      whitespace +
                      '*\\)|)(?=[^-]|$)',
                    'i'
                  ),
                },
                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,
                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                rsibling = /[+~]/,
                // CSS escapes
                // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp(
                  '\\\\[\\da-fA-F]{1,6}' + whitespace + '?|\\\\([^\\r\\n\\f])',
                  'g'
                ),
                funescape = function (escape, nonHex) {
                  var high = '0x' + escape.slice(1) - 0x10000;

                  if (nonHex) {
                    // Strip the backslash prefix from a non-hex escape sequence
                    return nonHex;
                  }

                  // Replace a hexadecimal escape sequence with the encoded Unicode code point
                  // Support: IE <=11+
                  // For values outside the Basic Multilingual Plane (BMP), manually construct a
                  // surrogate pair
                  return high < 0
                    ? String.fromCharCode(high + 0x10000)
                    : String.fromCharCode(
                        (high >> 10) | 0xd800,
                        (high & 0x3ff) | 0xdc00
                      );
                },
                // Used for iframes; see `setDocument`.
                // Support: IE 9 - 11+, Edge 12 - 18+
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE/Edge.
                unloadHandler = function () {
                  setDocument();
                },
                inDisabledFieldset = addCombinator(
                  function (elem) {
                    return elem.disabled === true && nodeName(elem, 'fieldset');
                  },
                  { dir: 'parentNode', next: 'legend' }
                );

              // Support: IE <=9 only
              // Accessing document.activeElement can throw unexpectedly
              // https://bugs.jquery.com/ticket/13393
              function safeActiveElement() {
                try {
                  return document.activeElement;
                } catch (err) {}
              }

              // Optimize for push.apply( _, NodeList )
              try {
                push.apply(
                  (arr = slice.call(preferredDoc.childNodes)),
                  preferredDoc.childNodes
                );

                // Support: Android <=4.0
                // Detect silently failing push.apply
                // eslint-disable-next-line no-unused-expressions
                arr[preferredDoc.childNodes.length].nodeType;
              } catch (e) {
                push = {
                  apply: function (target, els) {
                    pushNative.apply(target, slice.call(els));
                  },
                  call: function (target) {
                    pushNative.apply(target, slice.call(arguments, 1));
                  },
                };
              }

              function find(selector, context, results, seed) {
                var m,
                  i,
                  elem,
                  nid,
                  match,
                  groups,
                  newSelector,
                  newContext = context && context.ownerDocument,
                  // nodeType defaults to 9, since context defaults to document
                  nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (
                  typeof selector !== 'string' ||
                  !selector ||
                  (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
                ) {
                  return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {
                  setDocument(context);
                  context = context || document;

                  if (documentIsHTML) {
                    // If the selector is sufficiently simple, try using a "get*By*" DOM method
                    // (excepting DocumentFragment context, where the methods don't exist)
                    if (
                      nodeType !== 11 &&
                      (match = rquickExpr.exec(selector))
                    ) {
                      // ID selector
                      if ((m = match[1])) {
                        // Document context
                        if (nodeType === 9) {
                          if ((elem = context.getElementById(m))) {
                            // Support: IE 9 only
                            // getElementById can match elements by name instead of ID
                            if (elem.id === m) {
                              push.call(results, elem);
                              return results;
                            }
                          } else {
                            return results;
                          }

                          // Element context
                        } else {
                          // Support: IE 9 only
                          // getElementById can match elements by name instead of ID
                          if (
                            newContext &&
                            (elem = newContext.getElementById(m)) &&
                            find.contains(context, elem) &&
                            elem.id === m
                          ) {
                            push.call(results, elem);
                            return results;
                          }
                        }

                        // Type selector
                      } else if (match[2]) {
                        push.apply(
                          results,
                          context.getElementsByTagName(selector)
                        );
                        return results;

                        // Class selector
                      } else if (
                        (m = match[3]) &&
                        context.getElementsByClassName
                      ) {
                        push.apply(results, context.getElementsByClassName(m));
                        return results;
                      }
                    }

                    // Take advantage of querySelectorAll
                    if (
                      !nonnativeSelectorCache[selector + ' '] &&
                      (!rbuggyQSA || !rbuggyQSA.test(selector))
                    ) {
                      newSelector = selector;
                      newContext = context;

                      // qSA considers elements outside a scoping root when evaluating child or
                      // descendant combinators, which is not what we want.
                      // In such cases, we work around the behavior by prefixing every selector in the
                      // list with an ID selector referencing the scope context.
                      // The technique has to be used as well when a leading combinator is used
                      // as such selectors are not recognized by querySelectorAll.
                      // Thanks to Andrew Dupont for this technique.
                      if (
                        nodeType === 1 &&
                        (rdescend.test(selector) ||
                          rleadingCombinator.test(selector))
                      ) {
                        // Expand context for sibling selectors
                        newContext =
                          (rsibling.test(selector) &&
                            testContext(context.parentNode)) ||
                          context;

                        // We can use :scope instead of the ID hack if the browser
                        // supports it & if we're not changing the context.
                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when
                        // strict-comparing two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (newContext != context || !support.scope) {
                          // Capture the context ID, setting it first if necessary
                          if ((nid = context.getAttribute('id'))) {
                            nid = jQuery.escapeSelector(nid);
                          } else {
                            context.setAttribute('id', (nid = expando));
                          }
                        }

                        // Prefix every selector in the list
                        groups = tokenize(selector);
                        i = groups.length;
                        while (i--) {
                          groups[i] =
                            (nid ? '#' + nid : ':scope') +
                            ' ' +
                            toSelector(groups[i]);
                        }
                        newSelector = groups.join(',');
                      }

                      try {
                        push.apply(
                          results,
                          newContext.querySelectorAll(newSelector)
                        );
                        return results;
                      } catch (qsaError) {
                        nonnativeSelectorCache(selector, true);
                      } finally {
                        if (nid === expando) {
                          context.removeAttribute('id');
                        }
                      }
                    }
                  }
                }

                // All others
                return select(
                  selector.replace(rtrimCSS, '$1'),
                  context,
                  results,
                  seed
                );
              }

              /**
               * Create key-value caches of limited size
               * @returns {function(string, object)} Returns the Object data after storing it on itself with
               *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
               *	deleting the oldest entry
               */
              function createCache() {
                var keys = [];

                function cache(key, value) {
                  // Use (key + " ") to avoid collision with native prototype properties
                  // (see https://github.com/jquery/sizzle/issues/157)
                  if (keys.push(key + ' ') > Expr.cacheLength) {
                    // Only keep the most recent entries
                    delete cache[keys.shift()];
                  }
                  return (cache[key + ' '] = value);
                }
                return cache;
              }

              /**
               * Mark a function for special use by jQuery selector module
               * @param {Function} fn The function to mark
               */
              function markFunction(fn) {
                fn[expando] = true;
                return fn;
              }

              /**
               * Support testing using an element
               * @param {Function} fn Passed the created element and returns a boolean result
               */
              function assert(fn) {
                var el = document.createElement('fieldset');

                try {
                  return !!fn(el);
                } catch (e) {
                  return false;
                } finally {
                  // Remove from its parent by default
                  if (el.parentNode) {
                    el.parentNode.removeChild(el);
                  }

                  // release memory in IE
                  el = null;
                }
              }

              /**
               * Returns a function to use in pseudos for input types
               * @param {String} type
               */
              function createInputPseudo(type) {
                return function (elem) {
                  return nodeName(elem, 'input') && elem.type === type;
                };
              }

              /**
               * Returns a function to use in pseudos for buttons
               * @param {String} type
               */
              function createButtonPseudo(type) {
                return function (elem) {
                  return (
                    (nodeName(elem, 'input') || nodeName(elem, 'button')) &&
                    elem.type === type
                  );
                };
              }

              /**
               * Returns a function to use in pseudos for :enabled/:disabled
               * @param {Boolean} disabled true for :disabled; false for :enabled
               */
              function createDisabledPseudo(disabled) {
                // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
                return function (elem) {
                  // Only certain elements can match :enabled or :disabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
                  // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
                  if ('form' in elem) {
                    // Check for inherited disabledness on relevant non-disabled elements:
                    // * listed form-associated elements in a disabled fieldset
                    //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
                    // * option elements in a disabled optgroup
                    //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
                    // All such elements have a "form" property.
                    if (elem.parentNode && elem.disabled === false) {
                      // Option elements defer to a parent optgroup if present
                      if ('label' in elem) {
                        if ('label' in elem.parentNode) {
                          return elem.parentNode.disabled === disabled;
                        } else {
                          return elem.disabled === disabled;
                        }
                      }

                      // Support: IE 6 - 11+
                      // Use the isDisabled shortcut property to check for disabled fieldset ancestors
                      return (
                        elem.isDisabled === disabled ||
                        // Where there is no isDisabled, check manually
                        (elem.isDisabled !== !disabled &&
                          inDisabledFieldset(elem) === disabled)
                      );
                    }

                    return elem.disabled === disabled;

                    // Try to winnow out elements that can't be disabled before trusting the disabled property.
                    // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
                    // even exist on them, let alone have a boolean value.
                  } else if ('label' in elem) {
                    return elem.disabled === disabled;
                  }

                  // Remaining elements are neither :enabled nor :disabled
                  return false;
                };
              }

              /**
               * Returns a function to use in pseudos for positionals
               * @param {Function} fn
               */
              function createPositionalPseudo(fn) {
                return markFunction(function (argument) {
                  argument = +argument;
                  return markFunction(function (seed, matches) {
                    var j,
                      matchIndexes = fn([], seed.length, argument),
                      i = matchIndexes.length;

                    // Match elements found at the specified indexes
                    while (i--) {
                      if (seed[(j = matchIndexes[i])]) {
                        seed[j] = !(matches[j] = seed[j]);
                      }
                    }
                  });
                });
              }

              /**
               * Checks a node for validity as a jQuery selector context
               * @param {Element|Object=} context
               * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
               */
              function testContext(context) {
                return (
                  context &&
                  typeof context.getElementsByTagName !== 'undefined' &&
                  context
                );
              }

              /**
               * Sets document-related variables once based on the current document
               * @param {Element|Object} [node] An element or document object to use to set the document
               * @returns {Object} Returns the current document
               */
              function setDocument(node) {
                var subWindow,
                  doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  doc == document ||
                  doc.nodeType !== 9 ||
                  !doc.documentElement
                ) {
                  return document;
                }

                // Update global variables
                document = doc;
                documentElement = document.documentElement;
                documentIsHTML = !jQuery.isXMLDoc(document);

                // Support: iOS 7 only, IE 9 - 11+
                // Older browsers didn't support unprefixed `matches`.
                matches =
                  documentElement.matches ||
                  documentElement.webkitMatchesSelector ||
                  documentElement.msMatchesSelector;

                // Support: IE 9 - 11+, Edge 12 - 18+
                // Accessing iframe documents after unload throws "permission denied" errors
                // (see trac-13936).
                // Limit the fix to IE & Edge Legacy; despite Edge 15+ implementing `matches`,
                // all IE 9+ and Edge Legacy versions implement `msMatchesSelector` as well.
                if (
                  documentElement.msMatchesSelector &&
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  preferredDoc != document &&
                  (subWindow = document.defaultView) &&
                  subWindow.top !== subWindow
                ) {
                  // Support: IE 9 - 11+, Edge 12 - 18+
                  subWindow.addEventListener('unload', unloadHandler);
                }

                // Support: IE <10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programmatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function (el) {
                  documentElement.appendChild(el).id = jQuery.expando;
                  return (
                    !document.getElementsByName ||
                    !document.getElementsByName(jQuery.expando).length
                  );
                });

                // Support: IE 9 only
                // Check to see if it's possible to do matchesSelector
                // on a disconnected node.
                support.disconnectedMatch = assert(function (el) {
                  return matches.call(el, '*');
                });

                // Support: IE 9 - 11+, Edge 12 - 18+
                // IE/Edge don't support the :scope pseudo-class.
                support.scope = assert(function () {
                  return document.querySelectorAll(':scope');
                });

                // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
                // Make sure the `:has()` argument is parsed unforgivingly.
                // We include `*` in the test to detect buggy implementations that are
                // _selectively_ forgiving (specifically when the list includes at least
                // one valid selector).
                // Note that we treat complete lack of support for `:has()` as if it were
                // spec-compliant support, which is fine because use of `:has()` in such
                // environments will fail in the qSA path and fall back to jQuery traversal
                // anyway.
                support.cssHas = assert(function () {
                  try {
                    document.querySelector(':has(*,:jqfake)');
                    return false;
                  } catch (e) {
                    return true;
                  }
                });

                // ID filter and find
                if (support.getById) {
                  Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      return elem.getAttribute('id') === attrId;
                    };
                  };
                  Expr.find.ID = function (id, context) {
                    if (
                      typeof context.getElementById !== 'undefined' &&
                      documentIsHTML
                    ) {
                      var elem = context.getElementById(id);
                      return elem ? [elem] : [];
                    }
                  };
                } else {
                  Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                      var node =
                        typeof elem.getAttributeNode !== 'undefined' &&
                        elem.getAttributeNode('id');
                      return node && node.value === attrId;
                    };
                  };

                  // Support: IE 6 - 7 only
                  // getElementById is not reliable as a find shortcut
                  Expr.find.ID = function (id, context) {
                    if (
                      typeof context.getElementById !== 'undefined' &&
                      documentIsHTML
                    ) {
                      var node,
                        i,
                        elems,
                        elem = context.getElementById(id);

                      if (elem) {
                        // Verify the id attribute
                        node = elem.getAttributeNode('id');
                        if (node && node.value === id) {
                          return [elem];
                        }

                        // Fall back on getElementsByName
                        elems = context.getElementsByName(id);
                        i = 0;
                        while ((elem = elems[i++])) {
                          node = elem.getAttributeNode('id');
                          if (node && node.value === id) {
                            return [elem];
                          }
                        }
                      }

                      return [];
                    }
                  };
                }

                // Tag
                Expr.find.TAG = function (tag, context) {
                  if (typeof context.getElementsByTagName !== 'undefined') {
                    return context.getElementsByTagName(tag);

                    // DocumentFragment nodes don't have gEBTN
                  } else {
                    return context.querySelectorAll(tag);
                  }
                };

                // Class
                Expr.find.CLASS = function (className, context) {
                  if (
                    typeof context.getElementsByClassName !== 'undefined' &&
                    documentIsHTML
                  ) {
                    return context.getElementsByClassName(className);
                  }
                };

                /* QSA/matchesSelector
	---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                rbuggyQSA = [];

                // Build QSA regex
                // Regex strategy adopted from Diego Perini
                assert(function (el) {
                  var input;

                  documentElement.appendChild(el).innerHTML =
                    "<a id='" +
                    expando +
                    "' href='' disabled='disabled'></a>" +
                    "<select id='" +
                    expando +
                    "-\r\\' disabled='disabled'>" +
                    "<option selected=''></option></select>";

                  // Support: iOS <=7 - 8 only
                  // Boolean attributes and "value" are not treated correctly in some XML documents
                  if (!el.querySelectorAll('[selected]').length) {
                    rbuggyQSA.push(
                      '\\[' + whitespace + '*(?:value|' + booleans + ')'
                    );
                  }

                  // Support: iOS <=7 - 8 only
                  if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
                    rbuggyQSA.push('~=');
                  }

                  // Support: iOS 8 only
                  // https://bugs.webkit.org/show_bug.cgi?id=136851
                  // In-page `selector#id sibling-combinator selector` fails
                  if (!el.querySelectorAll('a#' + expando + '+*').length) {
                    rbuggyQSA.push('.#.+[+~]');
                  }

                  // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                  // In some of the document kinds, these selectors wouldn't work natively.
                  // This is probably OK but for backwards compatibility we want to maintain
                  // handling them through jQuery traversal in jQuery 3.x.
                  if (!el.querySelectorAll(':checked').length) {
                    rbuggyQSA.push(':checked');
                  }

                  // Support: Windows 8 Native Apps
                  // The type and name attributes are restricted during .innerHTML assignment
                  input = document.createElement('input');
                  input.setAttribute('type', 'hidden');
                  el.appendChild(input).setAttribute('name', 'D');

                  // Support: IE 9 - 11+
                  // IE's :disabled selector does not pick up the children of disabled fieldsets
                  // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
                  // In some of the document kinds, these selectors wouldn't work natively.
                  // This is probably OK but for backwards compatibility we want to maintain
                  // handling them through jQuery traversal in jQuery 3.x.
                  documentElement.appendChild(el).disabled = true;
                  if (el.querySelectorAll(':disabled').length !== 2) {
                    rbuggyQSA.push(':enabled', ':disabled');
                  }

                  // Support: IE 11+, Edge 15 - 18+
                  // IE 11/Edge don't find elements on a `[name='']` query in some cases.
                  // Adding a temporary attribute to the document before the selection works
                  // around the issue.
                  // Interestingly, IE 10 & older don't seem to have the issue.
                  input = document.createElement('input');
                  input.setAttribute('name', '');
                  el.appendChild(input);
                  if (!el.querySelectorAll("[name='']").length) {
                    rbuggyQSA.push(
                      '\\[' +
                        whitespace +
                        '*name' +
                        whitespace +
                        '*=' +
                        whitespace +
                        '*(?:\'\'|"")'
                    );
                  }
                });

                if (!support.cssHas) {
                  // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
                  // Our regular `try-catch` mechanism fails to detect natively-unsupported
                  // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
                  // in browsers that parse the `:has()` argument as a forgiving selector list.
                  // https://drafts.csswg.org/selectors/#relational now requires the argument
                  // to be parsed unforgivingly, but browsers have not yet fully adjusted.
                  rbuggyQSA.push(':has');
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));

                /* Sorting
	---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = function (a, b) {
                  // Flag for duplicate removal
                  if (a === b) {
                    hasDuplicate = true;
                    return 0;
                  }

                  // Sort on method existence if only one input has compareDocumentPosition
                  var compare =
                    !a.compareDocumentPosition - !b.compareDocumentPosition;
                  if (compare) {
                    return compare;
                  }

                  // Calculate position if both inputs belong to the same document
                  // Support: IE 11+, Edge 17 - 18+
                  // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                  // two documents; shallow comparisons work.
                  // eslint-disable-next-line eqeqeq
                  compare =
                    (a.ownerDocument || a) == (b.ownerDocument || b)
                      ? a.compareDocumentPosition(b)
                      : // Otherwise we know they are disconnected
                        1;

                  // Disconnected nodes
                  if (
                    compare & 1 ||
                    (!support.sortDetached &&
                      b.compareDocumentPosition(a) === compare)
                  ) {
                    // Choose the first element that is related to our preferred document
                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (
                      a === document ||
                      (a.ownerDocument == preferredDoc &&
                        find.contains(preferredDoc, a))
                    ) {
                      return -1;
                    }

                    // Support: IE 11+, Edge 17 - 18+
                    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                    // two documents; shallow comparisons work.
                    // eslint-disable-next-line eqeqeq
                    if (
                      b === document ||
                      (b.ownerDocument == preferredDoc &&
                        find.contains(preferredDoc, b))
                    ) {
                      return 1;
                    }

                    // Maintain original order
                    return sortInput
                      ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b)
                      : 0;
                  }

                  return compare & 4 ? -1 : 1;
                };

                return document;
              }

              find.matches = function (expr, elements) {
                return find(expr, null, null, elements);
              };

              find.matchesSelector = function (elem, expr) {
                setDocument(elem);

                if (
                  documentIsHTML &&
                  !nonnativeSelectorCache[expr + ' '] &&
                  (!rbuggyQSA || !rbuggyQSA.test(expr))
                ) {
                  try {
                    var ret = matches.call(elem, expr);

                    // IE 9's matchesSelector returns false on disconnected nodes
                    if (
                      ret ||
                      support.disconnectedMatch ||
                      // As well, disconnected nodes are said to be in a document
                      // fragment in IE 9
                      (elem.document && elem.document.nodeType !== 11)
                    ) {
                      return ret;
                    }
                  } catch (e) {
                    nonnativeSelectorCache(expr, true);
                  }
                }

                return find(expr, document, null, [elem]).length > 0;
              };

              find.contains = function (context, elem) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((context.ownerDocument || context) != document) {
                  setDocument(context);
                }
                return jQuery.contains(context, elem);
              };

              find.attr = function (elem, name) {
                // Set document vars if needed
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if ((elem.ownerDocument || elem) != document) {
                  setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                  // Don't get fooled by Object.prototype properties (see trac-13807)
                  val =
                    fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
                      ? fn(elem, name, !documentIsHTML)
                      : undefined;

                if (val !== undefined) {
                  return val;
                }

                return elem.getAttribute(name);
              };

              find.error = function (msg) {
                throw new Error(
                  'Syntax error, unrecognized expression: ' + msg
                );
              };

              /**
               * Document sorting and removing duplicates
               * @param {ArrayLike} results
               */
              jQuery.uniqueSort = function (results) {
                var elem,
                  duplicates = [],
                  j = 0,
                  i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                //
                // Support: Android <=4.0+
                // Testing for detecting duplicates is unpredictable so instead assume we can't
                // depend on duplicate detection in all browsers without a stable sort.
                hasDuplicate = !support.sortStable;
                sortInput = !support.sortStable && slice.call(results, 0);
                sort.call(results, sortOrder);

                if (hasDuplicate) {
                  while ((elem = results[i++])) {
                    if (elem === results[i]) {
                      j = duplicates.push(i);
                    }
                  }
                  while (j--) {
                    splice.call(results, duplicates[j], 1);
                  }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
              };

              jQuery.fn.uniqueSort = function () {
                return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
              };

              Expr = jQuery.expr = {
                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                  '>': { dir: 'parentNode', first: true },
                  ' ': { dir: 'parentNode' },
                  '+': { dir: 'previousSibling', first: true },
                  '~': { dir: 'previousSibling' },
                },

                preFilter: {
                  ATTR: function (match) {
                    match[1] = match[1].replace(runescape, funescape);

                    // Move the given value to match[3] whether quoted or unquoted
                    match[3] = (match[3] || match[4] || match[5] || '').replace(
                      runescape,
                      funescape
                    );

                    if (match[2] === '~=') {
                      match[3] = ' ' + match[3] + ' ';
                    }

                    return match.slice(0, 4);
                  },

                  CHILD: function (match) {
                    /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
                    match[1] = match[1].toLowerCase();

                    if (match[1].slice(0, 3) === 'nth') {
                      // nth-* requires argument
                      if (!match[3]) {
                        find.error(match[0]);
                      }

                      // numeric x and y parameters for Expr.filter.CHILD
                      // remember that false/true cast respectively to 0/1
                      match[4] = +(match[4]
                        ? match[5] + (match[6] || 1)
                        : 2 * (match[3] === 'even' || match[3] === 'odd'));
                      match[5] = +(match[7] + match[8] || match[3] === 'odd');

                      // other types prohibit arguments
                    } else if (match[3]) {
                      find.error(match[0]);
                    }

                    return match;
                  },

                  PSEUDO: function (match) {
                    var excess,
                      unquoted = !match[6] && match[2];

                    if (matchExpr.CHILD.test(match[0])) {
                      return null;
                    }

                    // Accept quoted arguments as-is
                    if (match[3]) {
                      match[2] = match[4] || match[5] || '';

                      // Strip excess characters from unquoted arguments
                    } else if (
                      unquoted &&
                      rpseudo.test(unquoted) &&
                      // Get excess from tokenize (recursively)
                      (excess = tokenize(unquoted, true)) &&
                      // advance to the next closing parenthesis
                      (excess =
                        unquoted.indexOf(')', unquoted.length - excess) -
                        unquoted.length)
                    ) {
                      // excess is a negative index
                      match[0] = match[0].slice(0, excess);
                      match[2] = unquoted.slice(0, excess);
                    }

                    // Return only captures needed by the pseudo filter method (type and argument)
                    return match.slice(0, 3);
                  },
                },

                filter: {
                  TAG: function (nodeNameSelector) {
                    var expectedNodeName = nodeNameSelector
                      .replace(runescape, funescape)
                      .toLowerCase();
                    return nodeNameSelector === '*'
                      ? function () {
                          return true;
                        }
                      : function (elem) {
                          return nodeName(elem, expectedNodeName);
                        };
                  },

                  CLASS: function (className) {
                    var pattern = classCache[className + ' '];

                    return (
                      pattern ||
                      ((pattern = new RegExp(
                        '(^|' +
                          whitespace +
                          ')' +
                          className +
                          '(' +
                          whitespace +
                          '|$)'
                      )) &&
                        classCache(className, function (elem) {
                          return pattern.test(
                            (typeof elem.className === 'string' &&
                              elem.className) ||
                              (typeof elem.getAttribute !== 'undefined' &&
                                elem.getAttribute('class')) ||
                              ''
                          );
                        }))
                    );
                  },

                  ATTR: function (name, operator, check) {
                    return function (elem) {
                      var result = find.attr(elem, name);

                      if (result == null) {
                        return operator === '!=';
                      }
                      if (!operator) {
                        return true;
                      }

                      result += '';

                      if (operator === '=') {
                        return result === check;
                      }
                      if (operator === '!=') {
                        return result !== check;
                      }
                      if (operator === '^=') {
                        return check && result.indexOf(check) === 0;
                      }
                      if (operator === '*=') {
                        return check && result.indexOf(check) > -1;
                      }
                      if (operator === '$=') {
                        return check && result.slice(-check.length) === check;
                      }
                      if (operator === '~=') {
                        return (
                          (
                            ' ' +
                            result.replace(rwhitespace, ' ') +
                            ' '
                          ).indexOf(check) > -1
                        );
                      }
                      if (operator === '|=') {
                        return (
                          result === check ||
                          result.slice(0, check.length + 1) === check + '-'
                        );
                      }

                      return false;
                    };
                  },

                  CHILD: function (type, what, _argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth',
                      forward = type.slice(-4) !== 'last',
                      ofType = what === 'of-type';

                    return first === 1 && last === 0
                      ? // Shortcut for :nth-*(n)
                        function (elem) {
                          return !!elem.parentNode;
                        }
                      : function (elem, _context, xml) {
                          var cache,
                            outerCache,
                            node,
                            nodeIndex,
                            start,
                            dir =
                              simple !== forward
                                ? 'nextSibling'
                                : 'previousSibling',
                            parent = elem.parentNode,
                            name = ofType && elem.nodeName.toLowerCase(),
                            useCache = !xml && !ofType,
                            diff = false;

                          if (parent) {
                            // :(first|last|only)-(child|of-type)
                            if (simple) {
                              while (dir) {
                                node = elem;
                                while ((node = node[dir])) {
                                  if (
                                    ofType
                                      ? nodeName(node, name)
                                      : node.nodeType === 1
                                  ) {
                                    return false;
                                  }
                                }

                                // Reverse direction for :only-* (if we haven't yet done so)
                                start = dir =
                                  type === 'only' && !start && 'nextSibling';
                              }
                              return true;
                            }

                            start = [
                              forward ? parent.firstChild : parent.lastChild,
                            ];

                            // non-xml :nth-child(...) stores cache data on `parent`
                            if (forward && useCache) {
                              // Seek `elem` from a previously-cached index
                              outerCache =
                                parent[expando] || (parent[expando] = {});
                              cache = outerCache[type] || [];
                              nodeIndex = cache[0] === dirruns && cache[1];
                              diff = nodeIndex && cache[2];
                              node = nodeIndex && parent.childNodes[nodeIndex];

                              while (
                                (node =
                                  (++nodeIndex && node && node[dir]) ||
                                  // Fallback to seeking `elem` from the start
                                  (diff = nodeIndex = 0) ||
                                  start.pop())
                              ) {
                                // When found, cache indexes on `parent` and break
                                if (
                                  node.nodeType === 1 &&
                                  ++diff &&
                                  node === elem
                                ) {
                                  outerCache[type] = [dirruns, nodeIndex, diff];
                                  break;
                                }
                              }
                            } else {
                              // Use previously-cached element index if available
                              if (useCache) {
                                outerCache =
                                  elem[expando] || (elem[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = nodeIndex;
                              }

                              // xml :nth-child(...)
                              // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                              if (diff === false) {
                                // Use the same loop as above to seek `elem` from the start
                                while (
                                  (node =
                                    (++nodeIndex && node && node[dir]) ||
                                    (diff = nodeIndex = 0) ||
                                    start.pop())
                                ) {
                                  if (
                                    (ofType
                                      ? nodeName(node, name)
                                      : node.nodeType === 1) &&
                                    ++diff
                                  ) {
                                    // Cache the index of each encountered element
                                    if (useCache) {
                                      outerCache =
                                        node[expando] || (node[expando] = {});
                                      outerCache[type] = [dirruns, diff];
                                    }

                                    if (node === elem) {
                                      break;
                                    }
                                  }
                                }
                              }
                            }

                            // Incorporate the offset, then check against cycle size
                            diff -= last;
                            return (
                              diff === first ||
                              (diff % first === 0 && diff / first >= 0)
                            );
                          }
                        };
                  },

                  PSEUDO: function (pseudo, argument) {
                    // pseudo-class names are case-insensitive
                    // https://www.w3.org/TR/selectors/#pseudo-classes
                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                    // Remember that setFilters inherits from pseudos
                    var args,
                      fn =
                        Expr.pseudos[pseudo] ||
                        Expr.setFilters[pseudo.toLowerCase()] ||
                        find.error('unsupported pseudo: ' + pseudo);

                    // The user may use createPseudo to indicate that
                    // arguments are needed to create the filter function
                    // just as jQuery does
                    if (fn[expando]) {
                      return fn(argument);
                    }

                    // But maintain support for old signatures
                    if (fn.length > 1) {
                      args = [pseudo, pseudo, '', argument];
                      return Expr.setFilters.hasOwnProperty(
                        pseudo.toLowerCase()
                      )
                        ? markFunction(function (seed, matches) {
                            var idx,
                              matched = fn(seed, argument),
                              i = matched.length;
                            while (i--) {
                              idx = indexOf.call(seed, matched[i]);
                              seed[idx] = !(matches[idx] = matched[i]);
                            }
                          })
                        : function (elem) {
                            return fn(elem, 0, args);
                          };
                    }

                    return fn;
                  },
                },

                pseudos: {
                  // Potentially complex pseudos
                  not: markFunction(function (selector) {
                    // Trim the selector passed to compile
                    // to avoid treating leading and trailing
                    // spaces as combinators
                    var input = [],
                      results = [],
                      matcher = compile(selector.replace(rtrimCSS, '$1'));

                    return matcher[expando]
                      ? markFunction(function (seed, matches, _context, xml) {
                          var elem,
                            unmatched = matcher(seed, null, xml, []),
                            i = seed.length;

                          // Match elements unmatched by `matcher`
                          while (i--) {
                            if ((elem = unmatched[i])) {
                              seed[i] = !(matches[i] = elem);
                            }
                          }
                        })
                      : function (elem, _context, xml) {
                          input[0] = elem;
                          matcher(input, null, xml, results);

                          // Don't keep the element
                          // (see https://github.com/jquery/sizzle/issues/299)
                          input[0] = null;
                          return !results.pop();
                        };
                  }),

                  has: markFunction(function (selector) {
                    return function (elem) {
                      return find(selector, elem).length > 0;
                    };
                  }),

                  contains: markFunction(function (text) {
                    text = text.replace(runescape, funescape);
                    return function (elem) {
                      return (
                        (elem.textContent || jQuery.text(elem)).indexOf(text) >
                        -1
                      );
                    };
                  }),

                  // "Whether an element is represented by a :lang() selector
                  // is based solely on the element's language value
                  // being equal to the identifier C,
                  // or beginning with the identifier C immediately followed by "-".
                  // The matching of C against the element's language value is performed case-insensitively.
                  // The identifier C does not have to be a valid language name."
                  // https://www.w3.org/TR/selectors/#lang-pseudo
                  lang: markFunction(function (lang) {
                    // lang value must be a valid identifier
                    if (!ridentifier.test(lang || '')) {
                      find.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                      var elemLang;
                      do {
                        if (
                          (elemLang = documentIsHTML
                            ? elem.lang
                            : elem.getAttribute('xml:lang') ||
                              elem.getAttribute('lang'))
                        ) {
                          elemLang = elemLang.toLowerCase();
                          return (
                            elemLang === lang ||
                            elemLang.indexOf(lang + '-') === 0
                          );
                        }
                      } while ((elem = elem.parentNode) && elem.nodeType === 1);
                      return false;
                    };
                  }),

                  // Miscellaneous
                  target: function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                  },

                  root: function (elem) {
                    return elem === documentElement;
                  },

                  focus: function (elem) {
                    return (
                      elem === safeActiveElement() &&
                      document.hasFocus() &&
                      !!(elem.type || elem.href || ~elem.tabIndex)
                    );
                  },

                  // Boolean properties
                  enabled: createDisabledPseudo(false),
                  disabled: createDisabledPseudo(true),

                  checked: function (elem) {
                    // In CSS3, :checked should return both checked and selected elements
                    // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                    return (
                      (nodeName(elem, 'input') && !!elem.checked) ||
                      (nodeName(elem, 'option') && !!elem.selected)
                    );
                  },

                  selected: function (elem) {
                    // Support: IE <=11+
                    // Accessing the selectedIndex property
                    // forces the browser to treat the default option as
                    // selected when in an optgroup.
                    if (elem.parentNode) {
                      // eslint-disable-next-line no-unused-expressions
                      elem.parentNode.selectedIndex;
                    }

                    return elem.selected === true;
                  },

                  // Contents
                  empty: function (elem) {
                    // https://www.w3.org/TR/selectors/#empty-pseudo
                    // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                    //   but not by others (comment: 8; processing instruction: 7; etc.)
                    // nodeType < 6 works because attributes (2) do not appear as children
                    for (
                      elem = elem.firstChild;
                      elem;
                      elem = elem.nextSibling
                    ) {
                      if (elem.nodeType < 6) {
                        return false;
                      }
                    }
                    return true;
                  },

                  parent: function (elem) {
                    return !Expr.pseudos.empty(elem);
                  },

                  // Element/input types
                  header: function (elem) {
                    return rheader.test(elem.nodeName);
                  },

                  input: function (elem) {
                    return rinputs.test(elem.nodeName);
                  },

                  button: function (elem) {
                    return (
                      (nodeName(elem, 'input') && elem.type === 'button') ||
                      nodeName(elem, 'button')
                    );
                  },

                  text: function (elem) {
                    var attr;
                    return (
                      nodeName(elem, 'input') &&
                      elem.type === 'text' &&
                      // Support: IE <10 only
                      // New HTML5 attribute values (e.g., "search") appear
                      // with elem.type === "text"
                      ((attr = elem.getAttribute('type')) == null ||
                        attr.toLowerCase() === 'text')
                    );
                  },

                  // Position-in-collection
                  first: createPositionalPseudo(function () {
                    return [0];
                  }),

                  last: createPositionalPseudo(function (
                    _matchIndexes,
                    length
                  ) {
                    return [length - 1];
                  }),

                  eq: createPositionalPseudo(function (
                    _matchIndexes,
                    length,
                    argument
                  ) {
                    return [argument < 0 ? argument + length : argument];
                  }),

                  even: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  odd: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  lt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i;

                    if (argument < 0) {
                      i = argument + length;
                    } else if (argument > length) {
                      i = length;
                    } else {
                      i = argument;
                    }

                    for (; --i >= 0; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),

                  gt: createPositionalPseudo(function (
                    matchIndexes,
                    length,
                    argument
                  ) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length; ) {
                      matchIndexes.push(i);
                    }
                    return matchIndexes;
                  }),
                },
              };

              Expr.pseudos.nth = Expr.pseudos.eq;

              // Add button/input type pseudos
              for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true,
              }) {
                Expr.pseudos[i] = createInputPseudo(i);
              }
              for (i in { submit: true, reset: true }) {
                Expr.pseudos[i] = createButtonPseudo(i);
              }

              // Easy API for creating new setFilters
              function setFilters() {}
              setFilters.prototype = Expr.filters = Expr.pseudos;
              Expr.setFilters = new setFilters();

              function tokenize(selector, parseOnly) {
                var matched,
                  match,
                  tokens,
                  type,
                  soFar,
                  groups,
                  preFilters,
                  cached = tokenCache[selector + ' '];

                if (cached) {
                  return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {
                  // Comma and first run
                  if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                      // Don't consume trailing commas as valid
                      soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push((tokens = []));
                  }

                  matched = false;

                  // Combinators
                  if ((match = rleadingCombinator.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({
                      value: matched,

                      // Cast descendant combinators to space
                      type: match[0].replace(rtrimCSS, ' '),
                    });
                    soFar = soFar.slice(matched.length);
                  }

                  // Filters
                  for (type in Expr.filter) {
                    if (
                      (match = matchExpr[type].exec(soFar)) &&
                      (!preFilters[type] || (match = preFilters[type](match)))
                    ) {
                      matched = match.shift();
                      tokens.push({
                        value: matched,
                        type: type,
                        matches: match,
                      });
                      soFar = soFar.slice(matched.length);
                    }
                  }

                  if (!matched) {
                    break;
                  }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                if (parseOnly) {
                  return soFar.length;
                }

                return soFar
                  ? find.error(selector)
                  : // Cache the tokens
                    tokenCache(selector, groups).slice(0);
              }

              function toSelector(tokens) {
                var i = 0,
                  len = tokens.length,
                  selector = '';
                for (; i < len; i++) {
                  selector += tokens[i].value;
                }
                return selector;
              }

              function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                  skip = combinator.next,
                  key = skip || dir,
                  checkNonElements = base && key === 'parentNode',
                  doneName = done++;

                return combinator.first
                  ? // Check against closest ancestor/preceding element
                    function (elem, context, xml) {
                      while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                          return matcher(elem, context, xml);
                        }
                      }
                      return false;
                    }
                  : // Check against all ancestor/preceding elements
                    function (elem, context, xml) {
                      var oldCache,
                        outerCache,
                        newCache = [dirruns, doneName];

                      // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                      if (xml) {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                              return true;
                            }
                          }
                        }
                      } else {
                        while ((elem = elem[dir])) {
                          if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});

                            if (skip && nodeName(elem, skip)) {
                              elem = elem[dir] || elem;
                            } else if (
                              (oldCache = outerCache[key]) &&
                              oldCache[0] === dirruns &&
                              oldCache[1] === doneName
                            ) {
                              // Assign to newCache so results back-propagate to previous elements
                              return (newCache[2] = oldCache[2]);
                            } else {
                              // Reuse newcache so results back-propagate to previous elements
                              outerCache[key] = newCache;

                              // A match means we're done; a fail means we have to keep checking
                              if ((newCache[2] = matcher(elem, context, xml))) {
                                return true;
                              }
                            }
                          }
                        }
                      }
                      return false;
                    };
              }

              function elementMatcher(matchers) {
                return matchers.length > 1
                  ? function (elem, context, xml) {
                      var i = matchers.length;
                      while (i--) {
                        if (!matchers[i](elem, context, xml)) {
                          return false;
                        }
                      }
                      return true;
                    }
                  : matchers[0];
              }

              function multipleContexts(selector, contexts, results) {
                var i = 0,
                  len = contexts.length;
                for (; i < len; i++) {
                  find(selector, contexts[i], results);
                }
                return results;
              }

              function condense(unmatched, map, filter, context, xml) {
                var elem,
                  newUnmatched = [],
                  i = 0,
                  len = unmatched.length,
                  mapped = map != null;

                for (; i < len; i++) {
                  if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                      newUnmatched.push(elem);
                      if (mapped) {
                        map.push(i);
                      }
                    }
                  }
                }

                return newUnmatched;
              }

              function setMatcher(
                preFilter,
                selector,
                matcher,
                postFilter,
                postFinder,
                postSelector
              ) {
                if (postFilter && !postFilter[expando]) {
                  postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                  postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function (seed, results, context, xml) {
                  var temp,
                    i,
                    elem,
                    matcherOut,
                    preMap = [],
                    postMap = [],
                    preexisting = results.length,
                    // Get initial elements from seed or context
                    elems =
                      seed ||
                      multipleContexts(
                        selector || '*',
                        context.nodeType ? [context] : context,
                        []
                      ),
                    // Prefilter to get matcher input, preserving a map for seed-results synchronization
                    matcherIn =
                      preFilter && (seed || !selector)
                        ? condense(elems, preMap, preFilter, context, xml)
                        : elems;

                  if (matcher) {
                    // If we have a postFinder, or filtered seed, or non-seed postFilter
                    // or preexisting results,
                    matcherOut =
                      postFinder ||
                      (seed ? preFilter : preexisting || postFilter)
                        ? // ...intermediate processing is necessary
                          []
                        : // ...otherwise use results directly
                          results;

                    // Find primary matches
                    matcher(matcherIn, matcherOut, context, xml);
                  } else {
                    matcherOut = matcherIn;
                  }

                  // Apply postFilter
                  if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);

                    // Un-match failing elements by moving them back to matcherIn
                    i = temp.length;
                    while (i--) {
                      if ((elem = temp[i])) {
                        matcherOut[postMap[i]] = !(matcherIn[postMap[i]] =
                          elem);
                      }
                    }
                  }

                  if (seed) {
                    if (postFinder || preFilter) {
                      if (postFinder) {
                        // Get the final matcherOut by condensing this intermediate into postFinder contexts
                        temp = [];
                        i = matcherOut.length;
                        while (i--) {
                          if ((elem = matcherOut[i])) {
                            // Restore matcherIn since elem is not yet a final match
                            temp.push((matcherIn[i] = elem));
                          }
                        }
                        postFinder(null, (matcherOut = []), temp, xml);
                      }

                      // Move matched elements from seed to results to keep them synchronized
                      i = matcherOut.length;
                      while (i--) {
                        if (
                          (elem = matcherOut[i]) &&
                          (temp = postFinder
                            ? indexOf.call(seed, elem)
                            : preMap[i]) > -1
                        ) {
                          seed[temp] = !(results[temp] = elem);
                        }
                      }
                    }

                    // Add elements to results, through postFinder if defined
                  } else {
                    matcherOut = condense(
                      matcherOut === results
                        ? matcherOut.splice(preexisting, matcherOut.length)
                        : matcherOut
                    );
                    if (postFinder) {
                      postFinder(null, results, matcherOut, xml);
                    } else {
                      push.apply(results, matcherOut);
                    }
                  }
                });
              }

              function matcherFromTokens(tokens) {
                var checkContext,
                  matcher,
                  j,
                  len = tokens.length,
                  leadingRelative = Expr.relative[tokens[0].type],
                  implicitRelative = leadingRelative || Expr.relative[' '],
                  i = leadingRelative ? 1 : 0,
                  // The foundational matcher ensures that elements are reachable from top-level context(s)
                  matchContext = addCombinator(
                    function (elem) {
                      return elem === checkContext;
                    },
                    implicitRelative,
                    true
                  ),
                  matchAnyContext = addCombinator(
                    function (elem) {
                      return indexOf.call(checkContext, elem) > -1;
                    },
                    implicitRelative,
                    true
                  ),
                  matchers = [
                    function (elem, context, xml) {
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      var ret =
                        (!leadingRelative &&
                          (xml || context != outermostContext)) ||
                        ((checkContext = context).nodeType
                          ? matchContext(elem, context, xml)
                          : matchAnyContext(elem, context, xml));

                      // Avoid hanging onto element
                      // (see https://github.com/jquery/sizzle/issues/299)
                      checkContext = null;
                      return ret;
                    },
                  ];

                for (; i < len; i++) {
                  if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [
                      addCombinator(elementMatcher(matchers), matcher),
                    ];
                  } else {
                    matcher = Expr.filter[tokens[i].type].apply(
                      null,
                      tokens[i].matches
                    );

                    // Return special upon seeing a positional matcher
                    if (matcher[expando]) {
                      // Find the next relative operator (if any) for proper handling
                      j = ++i;
                      for (; j < len; j++) {
                        if (Expr.relative[tokens[j].type]) {
                          break;
                        }
                      }
                      return setMatcher(
                        i > 1 && elementMatcher(matchers),
                        i > 1 &&
                          toSelector(
                            // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                            tokens
                              .slice(0, i - 1)
                              .concat({
                                value: tokens[i - 2].type === ' ' ? '*' : '',
                              })
                          ).replace(rtrimCSS, '$1'),
                        matcher,
                        i < j && matcherFromTokens(tokens.slice(i, j)),
                        j < len &&
                          matcherFromTokens((tokens = tokens.slice(j))),
                        j < len && toSelector(tokens)
                      );
                    }
                    matchers.push(matcher);
                  }
                }

                return elementMatcher(matchers);
              }

              function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                  byElement = elementMatchers.length > 0,
                  superMatcher = function (
                    seed,
                    context,
                    xml,
                    results,
                    outermost
                  ) {
                    var elem,
                      j,
                      matcher,
                      matchedCount = 0,
                      i = '0',
                      unmatched = seed && [],
                      setMatched = [],
                      contextBackup = outermostContext,
                      // We must always have either seed elements or outermost context
                      elems =
                        seed || (byElement && Expr.find.TAG('*', outermost)),
                      // Use integer dirruns iff this is the outermost matcher
                      dirrunsUnique = (dirruns +=
                        contextBackup == null ? 1 : Math.random() || 0.1),
                      len = elems.length;

                    if (outermost) {
                      // Support: IE 11+, Edge 17 - 18+
                      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                      // two documents; shallow comparisons work.
                      // eslint-disable-next-line eqeqeq
                      outermostContext =
                        context == document || context || outermost;
                    }

                    // Add elements passing elementMatchers directly to results
                    // Support: iOS <=7 - 9 only
                    // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
                    // elements by id. (see trac-14142)
                    for (; i !== len && (elem = elems[i]) != null; i++) {
                      if (byElement && elem) {
                        j = 0;

                        // Support: IE 11+, Edge 17 - 18+
                        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                        // two documents; shallow comparisons work.
                        // eslint-disable-next-line eqeqeq
                        if (!context && elem.ownerDocument != document) {
                          setDocument(elem);
                          xml = !documentIsHTML;
                        }
                        while ((matcher = elementMatchers[j++])) {
                          if (matcher(elem, context || document, xml)) {
                            push.call(results, elem);
                            break;
                          }
                        }
                        if (outermost) {
                          dirruns = dirrunsUnique;
                        }
                      }

                      // Track unmatched elements for set filters
                      if (bySet) {
                        // They will have gone through all possible matchers
                        if ((elem = !matcher && elem)) {
                          matchedCount--;
                        }

                        // Lengthen the array for every element, matched or not
                        if (seed) {
                          unmatched.push(elem);
                        }
                      }
                    }

                    // `i` is now the count of elements visited above, and adding it to `matchedCount`
                    // makes the latter nonnegative.
                    matchedCount += i;

                    // Apply set filters to unmatched elements
                    // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                    // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                    // no element matchers and no seed.
                    // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                    // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                    // numerically zero.
                    if (bySet && i !== matchedCount) {
                      j = 0;
                      while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml);
                      }

                      if (seed) {
                        // Reintegrate element matches to eliminate the need for sorting
                        if (matchedCount > 0) {
                          while (i--) {
                            if (!(unmatched[i] || setMatched[i])) {
                              setMatched[i] = pop.call(results);
                            }
                          }
                        }

                        // Discard index placeholder values to get only actual matches
                        setMatched = condense(setMatched);
                      }

                      // Add matches to results
                      push.apply(results, setMatched);

                      // Seedless set matches succeeding multiple successful matchers stipulate sorting
                      if (
                        outermost &&
                        !seed &&
                        setMatched.length > 0 &&
                        matchedCount + setMatchers.length > 1
                      ) {
                        jQuery.uniqueSort(results);
                      }
                    }

                    // Override manipulation of globals by nested matchers
                    if (outermost) {
                      dirruns = dirrunsUnique;
                      outermostContext = contextBackup;
                    }

                    return unmatched;
                  };

                return bySet ? markFunction(superMatcher) : superMatcher;
              }

              function compile(selector, match /* Internal Use Only */) {
                var i,
                  setMatchers = [],
                  elementMatchers = [],
                  cached = compilerCache[selector + ' '];

                if (!cached) {
                  // Generate a function of recursive functions that can be used to check each element
                  if (!match) {
                    match = tokenize(selector);
                  }
                  i = match.length;
                  while (i--) {
                    cached = matcherFromTokens(match[i]);
                    if (cached[expando]) {
                      setMatchers.push(cached);
                    } else {
                      elementMatchers.push(cached);
                    }
                  }

                  // Cache the compiled function
                  cached = compilerCache(
                    selector,
                    matcherFromGroupMatchers(elementMatchers, setMatchers)
                  );

                  // Save selector and tokenization
                  cached.selector = selector;
                }
                return cached;
              }

              /**
               * A low-level selection function that works with jQuery's compiled
               *  selector functions
               * @param {String|Function} selector A selector or a pre-compiled
               *  selector function built with jQuery selector compile
               * @param {Element} context
               * @param {Array} [results]
               * @param {Array} [seed] A set of elements to match against
               */
              function select(selector, context, results, seed) {
                var i,
                  tokens,
                  token,
                  type,
                  find,
                  compiled = typeof selector === 'function' && selector,
                  match =
                    !seed &&
                    tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {
                  // Reduce context if the leading compound selector is an ID
                  tokens = match[0] = match[0].slice(0);
                  if (
                    tokens.length > 2 &&
                    (token = tokens[0]).type === 'ID' &&
                    context.nodeType === 9 &&
                    documentIsHTML &&
                    Expr.relative[tokens[1].type]
                  ) {
                    context = (Expr.find.ID(
                      token.matches[0].replace(runescape, funescape),
                      context
                    ) || [])[0];
                    if (!context) {
                      return results;

                      // Precompiled matchers will still verify ancestry, so step up a level
                    } else if (compiled) {
                      context = context.parentNode;
                    }

                    selector = selector.slice(tokens.shift().value.length);
                  }

                  // Fetch a seed set for right-to-left matching
                  i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                  while (i--) {
                    token = tokens[i];

                    // Abort if we hit a combinator
                    if (Expr.relative[(type = token.type)]) {
                      break;
                    }
                    if ((find = Expr.find[type])) {
                      // Search, expanding context for leading sibling combinators
                      if (
                        (seed = find(
                          token.matches[0].replace(runescape, funescape),
                          (rsibling.test(tokens[0].type) &&
                            testContext(context.parentNode)) ||
                            context
                        ))
                      ) {
                        // If seed is empty or no tokens remain, we can return early
                        tokens.splice(i, 1);
                        selector = seed.length && toSelector(tokens);
                        if (!selector) {
                          push.apply(results, seed);
                          return results;
                        }

                        break;
                      }
                    }
                  }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                  seed,
                  context,
                  !documentIsHTML,
                  results,
                  !context ||
                    (rsibling.test(selector) &&
                      testContext(context.parentNode)) ||
                    context
                );
                return results;
              }

              // One-time assignments

              // Support: Android <=4.0 - 4.1+
              // Sort stability
              support.sortStable =
                expando.split('').sort(sortOrder).join('') === expando;

              // Initialize against the default document
              setDocument();

              // Support: Android <=4.0 - 4.1+
              // Detached nodes confoundingly follow *each other*
              support.sortDetached = assert(function (el) {
                // Should return 1, but returns 4 (following)
                return (
                  el.compareDocumentPosition(
                    document.createElement('fieldset')
                  ) & 1
                );
              });

              jQuery.find = find;

              // Deprecated
              jQuery.expr[':'] = jQuery.expr.pseudos;
              jQuery.unique = jQuery.uniqueSort;

              // These have always been private, but they used to be documented as part of
              // Sizzle so let's maintain them for now for backwards compatibility purposes.
              find.compile = compile;
              find.select = select;
              find.setDocument = setDocument;
              find.tokenize = tokenize;

              find.escape = jQuery.escapeSelector;
              find.getText = jQuery.text;
              find.isXML = jQuery.isXMLDoc;
              find.selectors = jQuery.expr;
              find.support = jQuery.support;
              find.uniqueSort = jQuery.uniqueSort;

              /* eslint-enable */
            })();

            var dir = function (elem, dir, until) {
              var matched = [],
                truncate = until !== undefined;

              while ((elem = elem[dir]) && elem.nodeType !== 9) {
                if (elem.nodeType === 1) {
                  if (truncate && jQuery(elem).is(until)) {
                    break;
                  }
                  matched.push(elem);
                }
              }
              return matched;
            };

            var siblings = function (n, elem) {
              var matched = [];

              for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                  matched.push(n);
                }
              }

              return matched;
            };

            var rneedsContext = jQuery.expr.match.needsContext;

            var rsingleTag =
              /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

            // Implement the identical functionality for filter and not
            function winnow(elements, qualifier, not) {
              if (isFunction(qualifier)) {
                return jQuery.grep(elements, function (elem, i) {
                  return !!qualifier.call(elem, i, elem) !== not;
                });
              }

              // Single element
              if (qualifier.nodeType) {
                return jQuery.grep(elements, function (elem) {
                  return (elem === qualifier) !== not;
                });
              }

              // Arraylike of elements (jQuery, arguments, Array)
              if (typeof qualifier !== 'string') {
                return jQuery.grep(elements, function (elem) {
                  return indexOf.call(qualifier, elem) > -1 !== not;
                });
              }

              // Filtered directly for both simple and complex selectors
              return jQuery.filter(qualifier, elements, not);
            }

            jQuery.filter = function (expr, elems, not) {
              var elem = elems[0];

              if (not) {
                expr = ':not(' + expr + ')';
              }

              if (elems.length === 1 && elem.nodeType === 1) {
                return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
              }

              return jQuery.find.matches(
                expr,
                jQuery.grep(elems, function (elem) {
                  return elem.nodeType === 1;
                })
              );
            };

            jQuery.fn.extend({
              find: function (selector) {
                var i,
                  ret,
                  len = this.length,
                  self = this;

                if (typeof selector !== 'string') {
                  return this.pushStack(
                    jQuery(selector).filter(function () {
                      for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                          return true;
                        }
                      }
                    })
                  );
                }

                ret = this.pushStack([]);

                for (i = 0; i < len; i++) {
                  jQuery.find(selector, self[i], ret);
                }

                return len > 1 ? jQuery.uniqueSort(ret) : ret;
              },
              filter: function (selector) {
                return this.pushStack(winnow(this, selector || [], false));
              },
              not: function (selector) {
                return this.pushStack(winnow(this, selector || [], true));
              },
              is: function (selector) {
                return !!winnow(
                  this,

                  // If this is a positional/relative selector, check membership in the returned set
                  // so $("p:first").is("p:last") won't return true for a doc with two "p".
                  typeof selector === 'string' && rneedsContext.test(selector)
                    ? jQuery(selector)
                    : selector || [],
                  false
                ).length;
              },
            });

            // Initialize a jQuery object

            // A central reference to the root jQuery(document)
            var rootjQuery,
              // A simple way to check for HTML strings
              // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
              // Strict HTML recognition (trac-11290: must start with <)
              // Shortcut simple #id case for speed
              rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
              init = (jQuery.fn.init = function (selector, context, root) {
                var match, elem;

                // HANDLE: $(""), $(null), $(undefined), $(false)
                if (!selector) {
                  return this;
                }

                // Method init() accepts an alternate rootjQuery
                // so migrate can support jQuery.sub (gh-2101)
                root = root || rootjQuery;

                // Handle HTML strings
                if (typeof selector === 'string') {
                  if (
                    selector[0] === '<' &&
                    selector[selector.length - 1] === '>' &&
                    selector.length >= 3
                  ) {
                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];
                  } else {
                    match = rquickExpr.exec(selector);
                  }

                  // Match html or make sure no context is specified for #id
                  if (match && (match[1] || !context)) {
                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                      context =
                        context instanceof jQuery ? context[0] : context;

                      // Option to run scripts is true for back-compat
                      // Intentionally let the error be thrown if parseHTML is not present
                      jQuery.merge(
                        this,
                        jQuery.parseHTML(
                          match[1],
                          context && context.nodeType
                            ? context.ownerDocument || context
                            : document,
                          true
                        )
                      );

                      // HANDLE: $(html, props)
                      if (
                        rsingleTag.test(match[1]) &&
                        jQuery.isPlainObject(context)
                      ) {
                        for (match in context) {
                          // Properties of context are called as methods if possible
                          if (isFunction(this[match])) {
                            this[match](context[match]);

                            // ...and otherwise set as attributes
                          } else {
                            this.attr(match, context[match]);
                          }
                        }
                      }

                      return this;

                      // HANDLE: $(#id)
                    } else {
                      elem = document.getElementById(match[2]);

                      if (elem) {
                        // Inject the element directly into the jQuery object
                        this[0] = elem;
                        this.length = 1;
                      }
                      return this;
                    }

                    // HANDLE: $(expr, $(...))
                  } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                  } else {
                    return this.constructor(context).find(selector);
                  }

                  // HANDLE: $(DOMElement)
                } else if (selector.nodeType) {
                  this[0] = selector;
                  this.length = 1;
                  return this;

                  // HANDLE: $(function)
                  // Shortcut for document ready
                } else if (isFunction(selector)) {
                  return root.ready !== undefined
                    ? root.ready(selector)
                    : // Execute immediately if ready is not present
                      selector(jQuery);
                }

                return jQuery.makeArray(selector, this);
              });

            // Give the init function the jQuery prototype for later instantiation
            init.prototype = jQuery.fn;

            // Initialize central reference
            rootjQuery = jQuery(document);

            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
              // Methods guaranteed to produce a unique set when starting from a unique set
              guaranteedUnique = {
                children: true,
                contents: true,
                next: true,
                prev: true,
              };

            jQuery.fn.extend({
              has: function (target) {
                var targets = jQuery(target, this),
                  l = targets.length;

                return this.filter(function () {
                  var i = 0;
                  for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                      return true;
                    }
                  }
                });
              },

              closest: function (selectors, context) {
                var cur,
                  i = 0,
                  l = this.length,
                  matched = [],
                  targets = typeof selectors !== 'string' && jQuery(selectors);

                // Positional selectors never match, since there's no _selection_ context
                if (!rneedsContext.test(selectors)) {
                  for (; i < l; i++) {
                    for (
                      cur = this[i];
                      cur && cur !== context;
                      cur = cur.parentNode
                    ) {
                      // Always skip document fragments
                      if (
                        cur.nodeType < 11 &&
                        (targets
                          ? targets.index(cur) > -1
                          : // Don't pass non-elements to jQuery#find
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))
                      ) {
                        matched.push(cur);
                        break;
                      }
                    }
                  }
                }

                return this.pushStack(
                  matched.length > 1 ? jQuery.uniqueSort(matched) : matched
                );
              },

              // Determine the position of an element within the set
              index: function (elem) {
                // No argument, return index in parent
                if (!elem) {
                  return this[0] && this[0].parentNode
                    ? this.first().prevAll().length
                    : -1;
                }

                // Index in selector
                if (typeof elem === 'string') {
                  return indexOf.call(jQuery(elem), this[0]);
                }

                // Locate the position of the desired element
                return indexOf.call(
                  this,

                  // If it receives a jQuery object, the first element is used
                  elem.jquery ? elem[0] : elem
                );
              },

              add: function (selector, context) {
                return this.pushStack(
                  jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                  )
                );
              },

              addBack: function (selector) {
                return this.add(
                  selector == null
                    ? this.prevObject
                    : this.prevObject.filter(selector)
                );
              },
            });

            function sibling(cur, dir) {
              while ((cur = cur[dir]) && cur.nodeType !== 1) {}
              return cur;
            }

            jQuery.each(
              {
                parent: function (elem) {
                  var parent = elem.parentNode;
                  return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function (elem) {
                  return dir(elem, 'parentNode');
                },
                parentsUntil: function (elem, _i, until) {
                  return dir(elem, 'parentNode', until);
                },
                next: function (elem) {
                  return sibling(elem, 'nextSibling');
                },
                prev: function (elem) {
                  return sibling(elem, 'previousSibling');
                },
                nextAll: function (elem) {
                  return dir(elem, 'nextSibling');
                },
                prevAll: function (elem) {
                  return dir(elem, 'previousSibling');
                },
                nextUntil: function (elem, _i, until) {
                  return dir(elem, 'nextSibling', until);
                },
                prevUntil: function (elem, _i, until) {
                  return dir(elem, 'previousSibling', until);
                },
                siblings: function (elem) {
                  return siblings((elem.parentNode || {}).firstChild, elem);
                },
                children: function (elem) {
                  return siblings(elem.firstChild);
                },
                contents: function (elem) {
                  if (
                    elem.contentDocument != null &&
                    // Support: IE 11+
                    // <object> elements with no `data` attribute has an object
                    // `contentDocument` with a `null` prototype.
                    getProto(elem.contentDocument)
                  ) {
                    return elem.contentDocument;
                  }

                  // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
                  // Treat the template element as a regular one in browsers that
                  // don't support it.
                  if (nodeName(elem, 'template')) {
                    elem = elem.content || elem;
                  }

                  return jQuery.merge([], elem.childNodes);
                },
              },
              function (name, fn) {
                jQuery.fn[name] = function (until, selector) {
                  var matched = jQuery.map(this, fn, until);

                  if (name.slice(-5) !== 'Until') {
                    selector = until;
                  }

                  if (selector && typeof selector === 'string') {
                    matched = jQuery.filter(selector, matched);
                  }

                  if (this.length > 1) {
                    // Remove duplicates
                    if (!guaranteedUnique[name]) {
                      jQuery.uniqueSort(matched);
                    }

                    // Reverse order for parents* and prev-derivatives
                    if (rparentsprev.test(name)) {
                      matched.reverse();
                    }
                  }

                  return this.pushStack(matched);
                };
              }
            );
            var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

            // Convert String-formatted options into Object-formatted ones
            function createOptions(options) {
              var object = {};
              jQuery.each(
                options.match(rnothtmlwhite) || [],
                function (_, flag) {
                  object[flag] = true;
                }
              );
              return object;
            }

            /*
             * Create a callback list using the following parameters:
             *
             *	options: an optional list of space-separated options that will change how
             *			the callback list behaves or a more traditional option object
             *
             * By default a callback list will act like an event callback list and can be
             * "fired" multiple times.
             *
             * Possible options:
             *
             *	once:			will ensure the callback list can only be fired once (like a Deferred)
             *
             *	memory:			will keep track of previous values and will call any callback added
             *					after the list has been fired right away with the latest "memorized"
             *					values (like a Deferred)
             *
             *	unique:			will ensure a callback can only be added once (no duplicate in the list)
             *
             *	stopOnFalse:	interrupt callings when a callback returns false
             *
             */
            jQuery.Callbacks = function (options) {
              // Convert options from String-formatted to Object-formatted if needed
              // (we check in cache first)
              options =
                typeof options === 'string'
                  ? createOptions(options)
                  : jQuery.extend({}, options);

              var // Flag to know if list is currently firing
                firing,
                // Last fire value for non-forgettable lists
                memory,
                // Flag to know if list was already fired
                fired,
                // Flag to prevent firing
                locked,
                // Actual callback list
                list = [],
                // Queue of execution data for repeatable lists
                queue = [],
                // Index of currently firing callback (modified by add/remove as needed)
                firingIndex = -1,
                // Fire callbacks
                fire = function () {
                  // Enforce single-firing
                  locked = locked || options.once;

                  // Execute callbacks for all pending executions,
                  // respecting firingIndex overrides and runtime changes
                  fired = firing = true;
                  for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {
                      // Run callback and check for early termination
                      if (
                        list[firingIndex].apply(memory[0], memory[1]) ===
                          false &&
                        options.stopOnFalse
                      ) {
                        // Jump to end and forget the data so .add doesn't re-fire
                        firingIndex = list.length;
                        memory = false;
                      }
                    }
                  }

                  // Forget the data if we're done with it
                  if (!options.memory) {
                    memory = false;
                  }

                  firing = false;

                  // Clean up if we're done firing for good
                  if (locked) {
                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                      list = [];

                      // Otherwise, this object is spent
                    } else {
                      list = '';
                    }
                  }
                },
                // Actual Callbacks object
                self = {
                  // Add a callback or a collection of callbacks to the list
                  add: function () {
                    if (list) {
                      // If we have memory from a past run, we should fire after adding
                      if (memory && !firing) {
                        firingIndex = list.length - 1;
                        queue.push(memory);
                      }

                      (function add(args) {
                        jQuery.each(args, function (_, arg) {
                          if (isFunction(arg)) {
                            if (!options.unique || !self.has(arg)) {
                              list.push(arg);
                            }
                          } else if (
                            arg &&
                            arg.length &&
                            toType(arg) !== 'string'
                          ) {
                            // Inspect recursively
                            add(arg);
                          }
                        });
                      })(arguments);

                      if (memory && !firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Remove a callback from the list
                  remove: function () {
                    jQuery.each(arguments, function (_, arg) {
                      var index;
                      while ((index = jQuery.inArray(arg, list, index)) > -1) {
                        list.splice(index, 1);

                        // Handle firing indexes
                        if (index <= firingIndex) {
                          firingIndex--;
                        }
                      }
                    });
                    return this;
                  },

                  // Check if a given callback is in the list.
                  // If no argument is given, return whether or not list has callbacks attached.
                  has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
                  },

                  // Remove all callbacks from the list
                  empty: function () {
                    if (list) {
                      list = [];
                    }
                    return this;
                  },

                  // Disable .fire and .add
                  // Abort any current/pending executions
                  // Clear all callbacks and values
                  disable: function () {
                    locked = queue = [];
                    list = memory = '';
                    return this;
                  },
                  disabled: function () {
                    return !list;
                  },

                  // Disable .fire
                  // Also disable .add unless we have memory (since it would have no effect)
                  // Abort any pending executions
                  lock: function () {
                    locked = queue = [];
                    if (!memory && !firing) {
                      list = memory = '';
                    }
                    return this;
                  },
                  locked: function () {
                    return !!locked;
                  },

                  // Call all callbacks with the given context and arguments
                  fireWith: function (context, args) {
                    if (!locked) {
                      args = args || [];
                      args = [context, args.slice ? args.slice() : args];
                      queue.push(args);
                      if (!firing) {
                        fire();
                      }
                    }
                    return this;
                  },

                  // Call all the callbacks with the given arguments
                  fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                  },

                  // To know if the callbacks have already been called at least once
                  fired: function () {
                    return !!fired;
                  },
                };

              return self;
            };

            function Identity(v) {
              return v;
            }
            function Thrower(ex) {
              throw ex;
            }

            function adoptValue(value, resolve, reject, noValue) {
              var method;

              try {
                // Check for promise aspect first to privilege synchronous behavior
                if (value && isFunction((method = value.promise))) {
                  method.call(value).done(resolve).fail(reject);

                  // Other thenables
                } else if (value && isFunction((method = value.then))) {
                  method.call(value, resolve, reject);

                  // Other non-thenables
                } else {
                  // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
                  // * false: [ value ].slice( 0 ) => resolve( value )
                  // * true: [ value ].slice( 1 ) => resolve()
                  resolve.apply(undefined, [value].slice(noValue));
                }

                // For Promises/A+, convert exceptions into rejections
                // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
                // Deferred#then to conditionally suppress rejection.
              } catch (value) {
                // Support: Android 4.0 only
                // Strict mode functions invoked without .call/.apply get global-object context
                reject.apply(undefined, [value]);
              }
            }

            jQuery.extend({
              Deferred: function (func) {
                var tuples = [
                    // action, add listener, callbacks,
                    // ... .then handlers, argument index, [final state]
                    [
                      'notify',
                      'progress',
                      jQuery.Callbacks('memory'),
                      jQuery.Callbacks('memory'),
                      2,
                    ],
                    [
                      'resolve',
                      'done',
                      jQuery.Callbacks('once memory'),
                      jQuery.Callbacks('once memory'),
                      0,
                      'resolved',
                    ],
                    [
                      'reject',
                      'fail',
                      jQuery.Callbacks('once memory'),
                      jQuery.Callbacks('once memory'),
                      1,
                      'rejected',
                    ],
                  ],
                  state = 'pending',
                  promise = {
                    state: function () {
                      return state;
                    },
                    always: function () {
                      deferred.done(arguments).fail(arguments);
                      return this;
                    },
                    catch: function (fn) {
                      return promise.then(null, fn);
                    },

                    // Keep pipe for back-compat
                    pipe: function (/* fnDone, fnFail, fnProgress */) {
                      var fns = arguments;

                      return jQuery
                        .Deferred(function (newDefer) {
                          jQuery.each(tuples, function (_i, tuple) {
                            // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                            var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                            // deferred.progress(function() { bind to newDefer or newDefer.notify })
                            // deferred.done(function() { bind to newDefer or newDefer.resolve })
                            // deferred.fail(function() { bind to newDefer or newDefer.reject })
                            deferred[tuple[1]](function () {
                              var returned = fn && fn.apply(this, arguments);
                              if (returned && isFunction(returned.promise)) {
                                returned
                                  .promise()
                                  .progress(newDefer.notify)
                                  .done(newDefer.resolve)
                                  .fail(newDefer.reject);
                              } else {
                                newDefer[tuple[0] + 'With'](
                                  this,
                                  fn ? [returned] : arguments
                                );
                              }
                            });
                          });
                          fns = null;
                        })
                        .promise();
                    },
                    then: function (onFulfilled, onRejected, onProgress) {
                      var maxDepth = 0;
                      function resolve(depth, deferred, handler, special) {
                        return function () {
                          var that = this,
                            args = arguments,
                            mightThrow = function () {
                              var returned, then;

                              // Support: Promises/A+ section 2.3.3.3.3
                              // https://promisesaplus.com/#point-59
                              // Ignore double-resolution attempts
                              if (depth < maxDepth) {
                                return;
                              }

                              returned = handler.apply(that, args);

                              // Support: Promises/A+ section 2.3.1
                              // https://promisesaplus.com/#point-48
                              if (returned === deferred.promise()) {
                                throw new TypeError('Thenable self-resolution');
                              }

                              // Support: Promises/A+ sections 2.3.3.1, 3.5
                              // https://promisesaplus.com/#point-54
                              // https://promisesaplus.com/#point-75
                              // Retrieve `then` only once
                              then =
                                returned &&
                                // Support: Promises/A+ section 2.3.4
                                // https://promisesaplus.com/#point-64
                                // Only check objects and functions for thenability
                                (typeof returned === 'object' ||
                                  typeof returned === 'function') &&
                                returned.then;

                              // Handle a returned thenable
                              if (isFunction(then)) {
                                // Special processors (notify) just wait for resolution
                                if (special) {
                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    )
                                  );

                                  // Normal processors (resolve) also hook into progress
                                } else {
                                  // ...and disregard older resolution values
                                  maxDepth++;

                                  then.call(
                                    returned,
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Thrower,
                                      special
                                    ),
                                    resolve(
                                      maxDepth,
                                      deferred,
                                      Identity,
                                      deferred.notifyWith
                                    )
                                  );
                                }

                                // Handle all other returned values
                              } else {
                                // Only substitute handlers pass on context
                                // and multiple values (non-spec behavior)
                                if (handler !== Identity) {
                                  that = undefined;
                                  args = [returned];
                                }

                                // Process the value(s)
                                // Default process is resolve
                                (special || deferred.resolveWith)(that, args);
                              }
                            },
                            // Only normal processors (resolve) catch and reject exceptions
                            process = special
                              ? mightThrow
                              : function () {
                                  try {
                                    mightThrow();
                                  } catch (e) {
                                    if (jQuery.Deferred.exceptionHook) {
                                      jQuery.Deferred.exceptionHook(
                                        e,
                                        process.error
                                      );
                                    }

                                    // Support: Promises/A+ section 2.3.3.3.4.1
                                    // https://promisesaplus.com/#point-61
                                    // Ignore post-resolution exceptions
                                    if (depth + 1 >= maxDepth) {
                                      // Only substitute handlers pass on context
                                      // and multiple values (non-spec behavior)
                                      if (handler !== Thrower) {
                                        that = undefined;
                                        args = [e];
                                      }

                                      deferred.rejectWith(that, args);
                                    }
                                  }
                                };

                          // Support: Promises/A+ section 2.3.3.3.1
                          // https://promisesaplus.com/#point-57
                          // Re-resolve promises immediately to dodge false rejection from
                          // subsequent errors
                          if (depth) {
                            process();
                          } else {
                            // Call an optional hook to record the error, in case of exception
                            // since it's otherwise lost when execution goes async
                            if (jQuery.Deferred.getErrorHook) {
                              process.error = jQuery.Deferred.getErrorHook();

                              // The deprecated alias of the above. While the name suggests
                              // returning the stack, not an error instance, jQuery just passes
                              // it directly to `console.warn` so both will work; an instance
                              // just better cooperates with source maps.
                            } else if (jQuery.Deferred.getStackHook) {
                              process.error = jQuery.Deferred.getStackHook();
                            }
                            window.setTimeout(process);
                          }
                        };
                      }

                      return jQuery
                        .Deferred(function (newDefer) {
                          // progress_handlers.add( ... )
                          tuples[0][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onProgress) ? onProgress : Identity,
                              newDefer.notifyWith
                            )
                          );

                          // fulfilled_handlers.add( ... )
                          tuples[1][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onFulfilled) ? onFulfilled : Identity
                            )
                          );

                          // rejected_handlers.add( ... )
                          tuples[2][3].add(
                            resolve(
                              0,
                              newDefer,
                              isFunction(onRejected) ? onRejected : Thrower
                            )
                          );
                        })
                        .promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function (obj) {
                      return obj != null
                        ? jQuery.extend(obj, promise)
                        : promise;
                    },
                  },
                  deferred = {};

                // Add list-specific methods
                jQuery.each(tuples, function (i, tuple) {
                  var list = tuple[2],
                    stateString = tuple[5];

                  // promise.progress = list.add
                  // promise.done = list.add
                  // promise.fail = list.add
                  promise[tuple[1]] = list.add;

                  // Handle state
                  if (stateString) {
                    list.add(
                      function () {
                        // state = "resolved" (i.e., fulfilled)
                        // state = "rejected"
                        state = stateString;
                      },

                      // rejected_callbacks.disable
                      // fulfilled_callbacks.disable
                      tuples[3 - i][2].disable,

                      // rejected_handlers.disable
                      // fulfilled_handlers.disable
                      tuples[3 - i][3].disable,

                      // progress_callbacks.lock
                      tuples[0][2].lock,

                      // progress_handlers.lock
                      tuples[0][3].lock
                    );
                  }

                  // progress_handlers.fire
                  // fulfilled_handlers.fire
                  // rejected_handlers.fire
                  list.add(tuple[3].fire);

                  // deferred.notify = function() { deferred.notifyWith(...) }
                  // deferred.resolve = function() { deferred.resolveWith(...) }
                  // deferred.reject = function() { deferred.rejectWith(...) }
                  deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](
                      this === deferred ? undefined : this,
                      arguments
                    );
                    return this;
                  };

                  // deferred.notifyWith = list.fireWith
                  // deferred.resolveWith = list.fireWith
                  // deferred.rejectWith = list.fireWith
                  deferred[tuple[0] + 'With'] = list.fireWith;
                });

                // Make the deferred a promise
                promise.promise(deferred);

                // Call given func if any
                if (func) {
                  func.call(deferred, deferred);
                }

                // All done!
                return deferred;
              },

              // Deferred helper
              when: function (singleValue) {
                var // count of uncompleted subordinates
                  remaining = arguments.length,
                  // count of unprocessed arguments
                  i = remaining,
                  // subordinate fulfillment data
                  resolveContexts = Array(i),
                  resolveValues = slice.call(arguments),
                  // the primary Deferred
                  primary = jQuery.Deferred(),
                  // subordinate callback factory
                  updateFunc = function (i) {
                    return function (value) {
                      resolveContexts[i] = this;
                      resolveValues[i] =
                        arguments.length > 1 ? slice.call(arguments) : value;
                      if (!--remaining) {
                        primary.resolveWith(resolveContexts, resolveValues);
                      }
                    };
                  };

                // Single- and empty arguments are adopted like Promise.resolve
                if (remaining <= 1) {
                  adoptValue(
                    singleValue,
                    primary.done(updateFunc(i)).resolve,
                    primary.reject,
                    !remaining
                  );

                  // Use .then() to unwrap secondary thenables (cf. gh-3000)
                  if (
                    primary.state() === 'pending' ||
                    isFunction(resolveValues[i] && resolveValues[i].then)
                  ) {
                    return primary.then();
                  }
                }

                // Multiple arguments are aggregated like Promise.all array elements
                while (i--) {
                  adoptValue(resolveValues[i], updateFunc(i), primary.reject);
                }

                return primary.promise();
              },
            });

            // These usually indicate a programmer mistake during development,
            // warn about them ASAP rather than swallowing them by default.
            var rerrorNames =
              /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

            // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
            // captured before the async barrier to get the original error cause
            // which may otherwise be hidden.
            jQuery.Deferred.exceptionHook = function (error, asyncError) {
              // Support: IE 8 - 9 only
              // Console exists when dev tools are open, which can happen at any time
              if (
                window.console &&
                window.console.warn &&
                error &&
                rerrorNames.test(error.name)
              ) {
                window.console.warn(
                  'jQuery.Deferred exception: ' + error.message,
                  error.stack,
                  asyncError
                );
              }
            };

            jQuery.readyException = function (error) {
              window.setTimeout(function () {
                throw error;
              });
            };

            // The deferred used on DOM ready
            var readyList = jQuery.Deferred();

            jQuery.fn.ready = function (fn) {
              readyList
                .then(fn)

                // Wrap jQuery.readyException in a function so that the lookup
                // happens at the time of error handling instead of callback
                // registration.
                .catch(function (error) {
                  jQuery.readyException(error);
                });

              return this;
            };

            jQuery.extend({
              // Is the DOM ready to be used? Set to true once it occurs.
              isReady: false,

              // A counter to track how many items to wait for before
              // the ready event fires. See trac-6781
              readyWait: 1,

              // Handle when the DOM is ready
              ready: function (wait) {
                // Abort if there are pending holds or we're already ready
                if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                  return;
                }

                // Remember that the DOM is ready
                jQuery.isReady = true;

                // If a normal DOM Ready event fired, decrement, and wait if need be
                if (wait !== true && --jQuery.readyWait > 0) {
                  return;
                }

                // If there are functions bound, to execute
                readyList.resolveWith(document, [jQuery]);
              },
            });

            jQuery.ready.then = readyList.then;

            // The ready event handler and self cleanup method
            function completed() {
              document.removeEventListener('DOMContentLoaded', completed);
              window.removeEventListener('load', completed);
              jQuery.ready();
            }

            // Catch cases where $(document).ready() is called
            // after the browser event has already occurred.
            // Support: IE <=9 - 10 only
            // Older IE sometimes signals "interactive" too soon
            if (
              document.readyState === 'complete' ||
              (document.readyState !== 'loading' &&
                !document.documentElement.doScroll)
            ) {
              // Handle it asynchronously to allow scripts the opportunity to delay ready
              window.setTimeout(jQuery.ready);
            } else {
              // Use the handy event callback
              document.addEventListener('DOMContentLoaded', completed);

              // A fallback to window.onload, that will always work
              window.addEventListener('load', completed);
            }

            // Multifunctional method to get and set values of a collection
            // The value/s can optionally be executed if it's a function
            var access = function (
              elems,
              fn,
              key,
              value,
              chainable,
              emptyGet,
              raw
            ) {
              var i = 0,
                len = elems.length,
                bulk = key == null;

              // Sets many values
              if (toType(key) === 'object') {
                chainable = true;
                for (i in key) {
                  access(elems, fn, i, key[i], true, emptyGet, raw);
                }

                // Sets one value
              } else if (value !== undefined) {
                chainable = true;

                if (!isFunction(value)) {
                  raw = true;
                }

                if (bulk) {
                  // Bulk operations run against the entire set
                  if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                  } else {
                    bulk = fn;
                    fn = function (elem, _key, value) {
                      return bulk.call(jQuery(elem), value);
                    };
                  }
                }

                if (fn) {
                  for (; i < len; i++) {
                    fn(
                      elems[i],
                      key,
                      raw ? value : value.call(elems[i], i, fn(elems[i], key))
                    );
                  }
                }
              }

              if (chainable) {
                return elems;
              }

              // Gets
              if (bulk) {
                return fn.call(elems);
              }

              return len ? fn(elems[0], key) : emptyGet;
            };

            // Matches dashed string for camelizing
            var rmsPrefix = /^-ms-/,
              rdashAlpha = /-([a-z])/g;

            // Used by camelCase as callback to replace()
            function fcamelCase(_all, letter) {
              return letter.toUpperCase();
            }

            // Convert dashed to camelCase; used by the css and data modules
            // Support: IE <=9 - 11, Edge 12 - 15
            // Microsoft forgot to hump their vendor prefix (trac-9572)
            function camelCase(string) {
              return string
                .replace(rmsPrefix, 'ms-')
                .replace(rdashAlpha, fcamelCase);
            }
            var acceptData = function (owner) {
              // Accepts only:
              //  - Node
              //    - Node.ELEMENT_NODE
              //    - Node.DOCUMENT_NODE
              //  - Object
              //    - Any
              return (
                owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
              );
            };

            function Data() {
              this.expando = jQuery.expando + Data.uid++;
            }

            Data.uid = 1;

            Data.prototype = {
              cache: function (owner) {
                // Check if the owner object already has a cache
                var value = owner[this.expando];

                // If not, create one
                if (!value) {
                  value = {};

                  // We can accept data for non-element nodes in modern browsers,
                  // but we should not, see trac-8335.
                  // Always return an empty object.
                  if (acceptData(owner)) {
                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) {
                      owner[this.expando] = value;

                      // Otherwise secure it in a non-enumerable property
                      // configurable must be true to allow the property to be
                      // deleted when data is removed
                    } else {
                      Object.defineProperty(owner, this.expando, {
                        value: value,
                        configurable: true,
                      });
                    }
                  }
                }

                return value;
              },
              set: function (owner, data, value) {
                var prop,
                  cache = this.cache(owner);

                // Handle: [ owner, key, value ] args
                // Always use camelCase key (gh-2257)
                if (typeof data === 'string') {
                  cache[camelCase(data)] = value;

                  // Handle: [ owner, { properties } ] args
                } else {
                  // Copy the properties one-by-one to the cache object
                  for (prop in data) {
                    cache[camelCase(prop)] = data[prop];
                  }
                }
                return cache;
              },
              get: function (owner, key) {
                return key === undefined
                  ? this.cache(owner)
                  : // Always use camelCase key (gh-2257)
                    owner[this.expando] && owner[this.expando][camelCase(key)];
              },
              access: function (owner, key, value) {
                // In cases where either:
                //
                //   1. No key was specified
                //   2. A string key was specified, but no value provided
                //
                // Take the "read" path and allow the get method to determine
                // which value to return, respectively either:
                //
                //   1. The entire cache object
                //   2. The data stored at the key
                //
                if (
                  key === undefined ||
                  (key && typeof key === 'string' && value === undefined)
                ) {
                  return this.get(owner, key);
                }

                // When the key is not a string, or both a key and value
                // are specified, set or extend (existing objects) with either:
                //
                //   1. An object of properties
                //   2. A key and value
                //
                this.set(owner, key, value);

                // Since the "set" path can have two possible entry points
                // return the expected data based on which path was taken[*]
                return value !== undefined ? value : key;
              },
              remove: function (owner, key) {
                var i,
                  cache = owner[this.expando];

                if (cache === undefined) {
                  return;
                }

                if (key !== undefined) {
                  // Support array or space separated string of keys
                  if (Array.isArray(key)) {
                    // If key is an array of keys...
                    // We always set camelCase keys, so remove that.
                    key = key.map(camelCase);
                  } else {
                    key = camelCase(key);

                    // If a key with the spaces exists, use it.
                    // Otherwise, create an array by matching non-whitespace
                    key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
                  }

                  i = key.length;

                  while (i--) {
                    delete cache[key[i]];
                  }
                }

                // Remove the expando if there's no more data
                if (key === undefined || jQuery.isEmptyObject(cache)) {
                  // Support: Chrome <=35 - 45
                  // Webkit & Blink performance suffers when deleting properties
                  // from DOM nodes, so set to undefined instead
                  // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
                  if (owner.nodeType) {
                    owner[this.expando] = undefined;
                  } else {
                    delete owner[this.expando];
                  }
                }
              },
              hasData: function (owner) {
                var cache = owner[this.expando];
                return cache !== undefined && !jQuery.isEmptyObject(cache);
              },
            };
            var dataPriv = new Data();

            var dataUser = new Data();

            //	Implementation Summary
            //
            //	1. Enforce API surface and semantic compatibility with 1.9.x branch
            //	2. Improve the module's maintainability by reducing the storage
            //		paths to a single mechanism.
            //	3. Use the same single mechanism to support "private" and "user" data.
            //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
            //	5. Avoid exposing implementation details on user objects (eg. expando properties)
            //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
              rmultiDash = /[A-Z]/g;

            function getData(data) {
              if (data === 'true') {
                return true;
              }

              if (data === 'false') {
                return false;
              }

              if (data === 'null') {
                return null;
              }

              // Only convert to a number if it doesn't change the string
              if (data === +data + '') {
                return +data;
              }

              if (rbrace.test(data)) {
                return JSON.parse(data);
              }

              return data;
            }

            function dataAttr(elem, key, data) {
              var name;

              // If nothing was found internally, try to fetch any
              // data from the HTML5 data-* attribute
              if (data === undefined && elem.nodeType === 1) {
                name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
                data = elem.getAttribute(name);

                if (typeof data === 'string') {
                  try {
                    data = getData(data);
                  } catch (e) {}

                  // Make sure we set the data so it isn't changed later
                  dataUser.set(elem, key, data);
                } else {
                  data = undefined;
                }
              }
              return data;
            }

            jQuery.extend({
              hasData: function (elem) {
                return dataUser.hasData(elem) || dataPriv.hasData(elem);
              },

              data: function (elem, name, data) {
                return dataUser.access(elem, name, data);
              },

              removeData: function (elem, name) {
                dataUser.remove(elem, name);
              },

              // TODO: Now that all calls to _data and _removeData have been replaced
              // with direct calls to dataPriv methods, these can be deprecated.
              _data: function (elem, name, data) {
                return dataPriv.access(elem, name, data);
              },

              _removeData: function (elem, name) {
                dataPriv.remove(elem, name);
              },
            });

            jQuery.fn.extend({
              data: function (key, value) {
                var i,
                  name,
                  data,
                  elem = this[0],
                  attrs = elem && elem.attributes;

                // Gets all values
                if (key === undefined) {
                  if (this.length) {
                    data = dataUser.get(elem);

                    if (
                      elem.nodeType === 1 &&
                      !dataPriv.get(elem, 'hasDataAttrs')
                    ) {
                      i = attrs.length;
                      while (i--) {
                        // Support: IE 11 only
                        // The attrs elements can be null (trac-14894)
                        if (attrs[i]) {
                          name = attrs[i].name;
                          if (name.indexOf('data-') === 0) {
                            name = camelCase(name.slice(5));
                            dataAttr(elem, name, data[name]);
                          }
                        }
                      }
                      dataPriv.set(elem, 'hasDataAttrs', true);
                    }
                  }

                  return data;
                }

                // Sets multiple values
                if (typeof key === 'object') {
                  return this.each(function () {
                    dataUser.set(this, key);
                  });
                }

                return access(
                  this,
                  function (value) {
                    var data;

                    // The calling jQuery object (element matches) is not empty
                    // (and therefore has an element appears at this[ 0 ]) and the
                    // `value` parameter was not undefined. An empty jQuery object
                    // will result in `undefined` for elem = this[ 0 ] which will
                    // throw an exception if an attempt to read a data cache is made.
                    if (elem && value === undefined) {
                      // Attempt to get data from the cache
                      // The key will always be camelCased in Data
                      data = dataUser.get(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // Attempt to "discover" the data in
                      // HTML5 custom data-* attrs
                      data = dataAttr(elem, key);
                      if (data !== undefined) {
                        return data;
                      }

                      // We tried really hard, but the data doesn't exist.
                      return;
                    }

                    // Set the data...
                    this.each(function () {
                      // We always store the camelCased key
                      dataUser.set(this, key, value);
                    });
                  },
                  null,
                  value,
                  arguments.length > 1,
                  null,
                  true
                );
              },

              removeData: function (key) {
                return this.each(function () {
                  dataUser.remove(this, key);
                });
              },
            });

            jQuery.extend({
              queue: function (elem, type, data) {
                var queue;

                if (elem) {
                  type = (type || 'fx') + 'queue';
                  queue = dataPriv.get(elem, type);

                  // Speed up dequeue by getting out quickly if this is just a lookup
                  if (data) {
                    if (!queue || Array.isArray(data)) {
                      queue = dataPriv.access(
                        elem,
                        type,
                        jQuery.makeArray(data)
                      );
                    } else {
                      queue.push(data);
                    }
                  }
                  return queue || [];
                }
              },

              dequeue: function (elem, type) {
                type = type || 'fx';

                var queue = jQuery.queue(elem, type),
                  startLength = queue.length,
                  fn = queue.shift(),
                  hooks = jQuery._queueHooks(elem, type),
                  next = function () {
                    jQuery.dequeue(elem, type);
                  };

                // If the fx queue is dequeued, always remove the progress sentinel
                if (fn === 'inprogress') {
                  fn = queue.shift();
                  startLength--;
                }

                if (fn) {
                  // Add a progress sentinel to prevent the fx queue from being
                  // automatically dequeued
                  if (type === 'fx') {
                    queue.unshift('inprogress');
                  }

                  // Clear up the last queue stop function
                  delete hooks.stop;
                  fn.call(elem, next, hooks);
                }

                if (!startLength && hooks) {
                  hooks.empty.fire();
                }
              },

              // Not public - generate a queueHooks object, or return the current one
              _queueHooks: function (elem, type) {
                var key = type + 'queueHooks';
                return (
                  dataPriv.get(elem, key) ||
                  dataPriv.access(elem, key, {
                    empty: jQuery.Callbacks('once memory').add(function () {
                      dataPriv.remove(elem, [type + 'queue', key]);
                    }),
                  })
                );
              },
            });

            jQuery.fn.extend({
              queue: function (type, data) {
                var setter = 2;

                if (typeof type !== 'string') {
                  data = type;
                  type = 'fx';
                  setter--;
                }

                if (arguments.length < setter) {
                  return jQuery.queue(this[0], type);
                }

                return data === undefined
                  ? this
                  : this.each(function () {
                      var queue = jQuery.queue(this, type, data);

                      // Ensure a hooks for this queue
                      jQuery._queueHooks(this, type);

                      if (type === 'fx' && queue[0] !== 'inprogress') {
                        jQuery.dequeue(this, type);
                      }
                    });
              },
              dequeue: function (type) {
                return this.each(function () {
                  jQuery.dequeue(this, type);
                });
              },
              clearQueue: function (type) {
                return this.queue(type || 'fx', []);
              },

              // Get a promise resolved when queues of a certain type
              // are emptied (fx is the type by default)
              promise: function (type, obj) {
                var tmp,
                  count = 1,
                  defer = jQuery.Deferred(),
                  elements = this,
                  i = this.length,
                  resolve = function () {
                    if (!--count) {
                      defer.resolveWith(elements, [elements]);
                    }
                  };

                if (typeof type !== 'string') {
                  obj = type;
                  type = undefined;
                }
                type = type || 'fx';

                while (i--) {
                  tmp = dataPriv.get(elements[i], type + 'queueHooks');
                  if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                  }
                }
                resolve();
                return defer.promise(obj);
              },
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

            var rcssNum = new RegExp(
              '^(?:([+-])=|)(' + pnum + ')([a-z%]*)$',
              'i'
            );

            var cssExpand = ['Top', 'Right', 'Bottom', 'Left'];

            var documentElement = document.documentElement;

            var isAttached = function (elem) {
                return jQuery.contains(elem.ownerDocument, elem);
              },
              composed = { composed: true };

            // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
            // Check attachment across shadow DOM boundaries when possible (gh-3504)
            // Support: iOS 10.0-10.2 only
            // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
            // leading to errors. We need to check for `getRootNode`.
            if (documentElement.getRootNode) {
              isAttached = function (elem) {
                return (
                  jQuery.contains(elem.ownerDocument, elem) ||
                  elem.getRootNode(composed) === elem.ownerDocument
                );
              };
            }
            var isHiddenWithinTree = function (elem, el) {
              // isHiddenWithinTree might be called from jQuery#filter function;
              // in that case, element will be second argument
              elem = el || elem;

              // Inline style trumps all
              return (
                elem.style.display === 'none' ||
                (elem.style.display === '' &&
                  // Otherwise, check computed style
                  // Support: Firefox <=43 - 45
                  // Disconnected elements can have computed display: none, so first confirm that elem is
                  // in the document.
                  isAttached(elem) &&
                  jQuery.css(elem, 'display') === 'none')
              );
            };

            function adjustCSS(elem, prop, valueParts, tween) {
              var adjusted,
                scale,
                maxIterations = 20,
                currentValue = tween
                  ? function () {
                      return tween.cur();
                    }
                  : function () {
                      return jQuery.css(elem, prop, '');
                    },
                initial = currentValue(),
                unit =
                  (valueParts && valueParts[3]) ||
                  (jQuery.cssNumber[prop] ? '' : 'px'),
                // Starting value computation is required for potential unit mismatches
                initialInUnit =
                  elem.nodeType &&
                  (jQuery.cssNumber[prop] || (unit !== 'px' && +initial)) &&
                  rcssNum.exec(jQuery.css(elem, prop));

              if (initialInUnit && initialInUnit[3] !== unit) {
                // Support: Firefox <=54
                // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
                initial = initial / 2;

                // Trust units reported by jQuery.css
                unit = unit || initialInUnit[3];

                // Iteratively approximate from a nonzero starting point
                initialInUnit = +initial || 1;

                while (maxIterations--) {
                  // Evaluate and update our best guess (doubling guesses that zero out).
                  // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
                  jQuery.style(elem, prop, initialInUnit + unit);
                  if (
                    (1 - scale) *
                      (1 - (scale = currentValue() / initial || 0.5)) <=
                    0
                  ) {
                    maxIterations = 0;
                  }
                  initialInUnit = initialInUnit / scale;
                }

                initialInUnit = initialInUnit * 2;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Make sure we update the tween properties later on
                valueParts = valueParts || [];
              }

              if (valueParts) {
                initialInUnit = +initialInUnit || +initial || 0;

                // Apply relative offset (+=/-=) if specified
                adjusted = valueParts[1]
                  ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
                  : +valueParts[2];
                if (tween) {
                  tween.unit = unit;
                  tween.start = initialInUnit;
                  tween.end = adjusted;
                }
              }
              return adjusted;
            }

            var defaultDisplayMap = {};

            function getDefaultDisplay(elem) {
              var temp,
                doc = elem.ownerDocument,
                nodeName = elem.nodeName,
                display = defaultDisplayMap[nodeName];

              if (display) {
                return display;
              }

              temp = doc.body.appendChild(doc.createElement(nodeName));
              display = jQuery.css(temp, 'display');

              temp.parentNode.removeChild(temp);

              if (display === 'none') {
                display = 'block';
              }
              defaultDisplayMap[nodeName] = display;

              return display;
            }

            function showHide(elements, show) {
              var display,
                elem,
                values = [],
                index = 0,
                length = elements.length;

              // Determine new display value for elements that need to change
              for (; index < length; index++) {
                elem = elements[index];
                if (!elem.style) {
                  continue;
                }

                display = elem.style.display;
                if (show) {
                  // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
                  // check is required in this first loop unless we have a nonempty display value (either
                  // inline or about-to-be-restored)
                  if (display === 'none') {
                    values[index] = dataPriv.get(elem, 'display') || null;
                    if (!values[index]) {
                      elem.style.display = '';
                    }
                  }
                  if (elem.style.display === '' && isHiddenWithinTree(elem)) {
                    values[index] = getDefaultDisplay(elem);
                  }
                } else {
                  if (display !== 'none') {
                    values[index] = 'none';

                    // Remember what we're overwriting
                    dataPriv.set(elem, 'display', display);
                  }
                }
              }

              // Set the display of the elements in a second loop to avoid constant reflow
              for (index = 0; index < length; index++) {
                if (values[index] != null) {
                  elements[index].style.display = values[index];
                }
              }

              return elements;
            }

            jQuery.fn.extend({
              show: function () {
                return showHide(this, true);
              },
              hide: function () {
                return showHide(this);
              },
              toggle: function (state) {
                if (typeof state === 'boolean') {
                  return state ? this.show() : this.hide();
                }

                return this.each(function () {
                  if (isHiddenWithinTree(this)) {
                    jQuery(this).show();
                  } else {
                    jQuery(this).hide();
                  }
                });
              },
            });
            var rcheckableType = /^(?:checkbox|radio)$/i;

            var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

            var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

            (function () {
              var fragment = document.createDocumentFragment(),
                div = fragment.appendChild(document.createElement('div')),
                input = document.createElement('input');

              // Support: Android 4.0 - 4.3 only
              // Check state lost if the name is set (trac-11217)
              // Support: Windows Web Apps (WWA)
              // `name` and `type` must use .setAttribute for WWA (trac-14901)
              input.setAttribute('type', 'radio');
              input.setAttribute('checked', 'checked');
              input.setAttribute('name', 't');

              div.appendChild(input);

              // Support: Android <=4.1 only
              // Older WebKit doesn't clone checked state correctly in fragments
              support.checkClone = div
                .cloneNode(true)
                .cloneNode(true).lastChild.checked;

              // Support: IE <=11 only
              // Make sure textarea (and checkbox) defaultValue is properly cloned
              div.innerHTML = '<textarea>x</textarea>';
              support.noCloneChecked =
                !!div.cloneNode(true).lastChild.defaultValue;

              // Support: IE <=9 only
              // IE <=9 replaces <option> tags with their contents when inserted outside of
              // the select element.
              div.innerHTML = '<option></option>';
              support.option = !!div.lastChild;
            })();

            // We have to close these tags to support XHTML (trac-13200)
            var wrapMap = {
              // XHTML parsers do not magically insert elements in the
              // same way that tag soup parsers do. So we cannot shorten
              // this by omitting <tbody> or other required elements.
              thead: [1, '<table>', '</table>'],
              col: [2, '<table><colgroup>', '</colgroup></table>'],
              tr: [2, '<table><tbody>', '</tbody></table>'],
              td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],

              _default: [0, '', ''],
            };

            wrapMap.tbody =
              wrapMap.tfoot =
              wrapMap.colgroup =
              wrapMap.caption =
                wrapMap.thead;
            wrapMap.th = wrapMap.td;

            // Support: IE <=9 only
            if (!support.option) {
              wrapMap.optgroup = wrapMap.option = [
                1,
                "<select multiple='multiple'>",
                '</select>',
              ];
            }

            function getAll(context, tag) {
              // Support: IE <=9 - 11 only
              // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
              var ret;

              if (typeof context.getElementsByTagName !== 'undefined') {
                ret = context.getElementsByTagName(tag || '*');
              } else if (typeof context.querySelectorAll !== 'undefined') {
                ret = context.querySelectorAll(tag || '*');
              } else {
                ret = [];
              }

              if (tag === undefined || (tag && nodeName(context, tag))) {
                return jQuery.merge([context], ret);
              }

              return ret;
            }

            // Mark scripts as having already been evaluated
            function setGlobalEval(elems, refElements) {
              var i = 0,
                l = elems.length;

              for (; i < l; i++) {
                dataPriv.set(
                  elems[i],
                  'globalEval',
                  !refElements || dataPriv.get(refElements[i], 'globalEval')
                );
              }
            }

            var rhtml = /<|&#?\w+;/;

            function buildFragment(
              elems,
              context,
              scripts,
              selection,
              ignored
            ) {
              var elem,
                tmp,
                tag,
                wrap,
                attached,
                j,
                fragment = context.createDocumentFragment(),
                nodes = [],
                i = 0,
                l = elems.length;

              for (; i < l; i++) {
                elem = elems[i];

                if (elem || elem === 0) {
                  // Add nodes directly
                  if (toType(elem) === 'object') {
                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                  } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                  } else {
                    tmp =
                      tmp || fragment.appendChild(context.createElement('div'));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML =
                      wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                      tmp = tmp.lastChild;
                    }

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (trac-12392)
                    tmp.textContent = '';
                  }
                }
              }

              // Remove wrapper from fragment
              fragment.textContent = '';

              i = 0;
              while ((elem = nodes[i++])) {
                // Skip elements already in the context collection (trac-4087)
                if (selection && jQuery.inArray(elem, selection) > -1) {
                  if (ignored) {
                    ignored.push(elem);
                  }
                  continue;
                }

                attached = isAttached(elem);

                // Append to fragment
                tmp = getAll(fragment.appendChild(elem), 'script');

                // Preserve script evaluation history
                if (attached) {
                  setGlobalEval(tmp);
                }

                // Capture executables
                if (scripts) {
                  j = 0;
                  while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || '')) {
                      scripts.push(elem);
                    }
                  }
                }
              }

              return fragment;
            }

            var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

            function returnTrue() {
              return true;
            }

            function returnFalse() {
              return false;
            }

            function on(elem, types, selector, data, fn, one) {
              var origFn, type;

              // Types can be a map of types/handlers
              if (typeof types === 'object') {
                // ( types-Object, selector, data )
                if (typeof selector !== 'string') {
                  // ( types-Object, data )
                  data = data || selector;
                  selector = undefined;
                }
                for (type in types) {
                  on(elem, type, selector, data, types[type], one);
                }
                return elem;
              }

              if (data == null && fn == null) {
                // ( types, fn )
                fn = selector;
                data = selector = undefined;
              } else if (fn == null) {
                if (typeof selector === 'string') {
                  // ( types, selector, fn )
                  fn = data;
                  data = undefined;
                } else {
                  // ( types, data, fn )
                  fn = data;
                  data = selector;
                  selector = undefined;
                }
              }
              if (fn === false) {
                fn = returnFalse;
              } else if (!fn) {
                return elem;
              }

              if (one === 1) {
                origFn = fn;
                fn = function (event) {
                  // Can use an empty set, since event contains the info
                  jQuery().off(event);
                  return origFn.apply(this, arguments);
                };

                // Use same guid so caller can remove using origFn
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
              }
              return elem.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
              });
            }

            /*
             * Helper functions for managing events -- not part of the public interface.
             * Props to Dean Edwards' addEvent library for many of the ideas.
             */
            jQuery.event = {
              global: {},

              add: function (elem, types, handler, data, selector) {
                var handleObjIn,
                  eventHandle,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.get(elem);

                // Only attach events to objects that accept data
                if (!acceptData(elem)) {
                  return;
                }

                // Caller can pass in an object of custom data in lieu of the handler
                if (handler.handler) {
                  handleObjIn = handler;
                  handler = handleObjIn.handler;
                  selector = handleObjIn.selector;
                }

                // Ensure that invalid selectors throw exceptions at attach time
                // Evaluate against documentElement in case elem is a non-element node (e.g., document)
                if (selector) {
                  jQuery.find.matchesSelector(documentElement, selector);
                }

                // Make sure that the handler has a unique ID, used to find/remove it later
                if (!handler.guid) {
                  handler.guid = jQuery.guid++;
                }

                // Init the element's event structure and main handler, if this is the first
                if (!(events = elemData.events)) {
                  events = elemData.events = Object.create(null);
                }
                if (!(eventHandle = elemData.handle)) {
                  eventHandle = elemData.handle = function (e) {
                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== 'undefined' &&
                      jQuery.event.triggered !== e.type
                      ? jQuery.event.dispatch.apply(elem, arguments)
                      : undefined;
                  };
                }

                // Handle multiple events separated by a space
                types = (types || '').match(rnothtmlwhite) || [''];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || '').split('.').sort();

                  // There *must* be a type, no attaching namespace-only handlers
                  if (!type) {
                    continue;
                  }

                  // If event changes its type, use the special event handlers for the changed type
                  special = jQuery.event.special[type] || {};

                  // If selector defined, determine special event api type, otherwise given type
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;

                  // Update special based on newly reset type
                  special = jQuery.event.special[type] || {};

                  // handleObj is passed to all event handlers
                  handleObj = jQuery.extend(
                    {
                      type: type,
                      origType: origType,
                      data: data,
                      handler: handler,
                      guid: handler.guid,
                      selector: selector,
                      needsContext:
                        selector &&
                        jQuery.expr.match.needsContext.test(selector),
                      namespace: namespaces.join('.'),
                    },
                    handleObjIn
                  );

                  // Init the event handler queue if we're the first
                  if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (
                      !special.setup ||
                      special.setup.call(
                        elem,
                        data,
                        namespaces,
                        eventHandle
                      ) === false
                    ) {
                      if (elem.addEventListener) {
                        elem.addEventListener(type, eventHandle);
                      }
                    }
                  }

                  if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                      handleObj.handler.guid = handler.guid;
                    }
                  }

                  // Add to the element's handler list, delegates in front
                  if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                  } else {
                    handlers.push(handleObj);
                  }

                  // Keep track of which events have ever been used, for event optimization
                  jQuery.event.global[type] = true;
                }
              },

              // Detach an event or set of events from an element
              remove: function (elem, types, handler, selector, mappedTypes) {
                var j,
                  origCount,
                  tmp,
                  events,
                  t,
                  handleObj,
                  special,
                  handlers,
                  type,
                  namespaces,
                  origType,
                  elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

                if (!elemData || !(events = elemData.events)) {
                  return;
                }

                // Once for each type.namespace in types; type may be omitted
                types = (types || '').match(rnothtmlwhite) || [''];
                t = types.length;
                while (t--) {
                  tmp = rtypenamespace.exec(types[t]) || [];
                  type = origType = tmp[1];
                  namespaces = (tmp[2] || '').split('.').sort();

                  // Unbind all events (on this namespace, if provided) for the element
                  if (!type) {
                    for (type in events) {
                      jQuery.event.remove(
                        elem,
                        type + types[t],
                        handler,
                        selector,
                        true
                      );
                    }
                    continue;
                  }

                  special = jQuery.event.special[type] || {};
                  type =
                    (selector ? special.delegateType : special.bindType) ||
                    type;
                  handlers = events[type] || [];
                  tmp =
                    tmp[2] &&
                    new RegExp(
                      '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)'
                    );

                  // Remove matching events
                  origCount = j = handlers.length;
                  while (j--) {
                    handleObj = handlers[j];

                    if (
                      (mappedTypes || origType === handleObj.origType) &&
                      (!handler || handler.guid === handleObj.guid) &&
                      (!tmp || tmp.test(handleObj.namespace)) &&
                      (!selector ||
                        selector === handleObj.selector ||
                        (selector === '**' && handleObj.selector))
                    ) {
                      handlers.splice(j, 1);

                      if (handleObj.selector) {
                        handlers.delegateCount--;
                      }
                      if (special.remove) {
                        special.remove.call(elem, handleObj);
                      }
                    }
                  }

                  // Remove generic event handler if we removed something and no more handlers exist
                  // (avoids potential for endless recursion during removal of special event handlers)
                  if (origCount && !handlers.length) {
                    if (
                      !special.teardown ||
                      special.teardown.call(
                        elem,
                        namespaces,
                        elemData.handle
                      ) === false
                    ) {
                      jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                  }
                }

                // Remove data and the expando if it's no longer used
                if (jQuery.isEmptyObject(events)) {
                  dataPriv.remove(elem, 'handle events');
                }
              },

              dispatch: function (nativeEvent) {
                var i,
                  j,
                  ret,
                  matched,
                  handleObj,
                  handlerQueue,
                  args = new Array(arguments.length),
                  // Make a writable jQuery.Event from the native event object
                  event = jQuery.event.fix(nativeEvent),
                  handlers =
                    (dataPriv.get(this, 'events') || Object.create(null))[
                      event.type
                    ] || [],
                  special = jQuery.event.special[event.type] || {};

                // Use the fix-ed jQuery.Event rather than the (read-only) native event
                args[0] = event;

                for (i = 1; i < arguments.length; i++) {
                  args[i] = arguments[i];
                }

                event.delegateTarget = this;

                // Call the preDispatch hook for the mapped type, and let it bail if desired
                if (
                  special.preDispatch &&
                  special.preDispatch.call(this, event) === false
                ) {
                  return;
                }

                // Determine handlers
                handlerQueue = jQuery.event.handlers.call(
                  this,
                  event,
                  handlers
                );

                // Run delegates first; they may want to stop propagation beneath us
                i = 0;
                while (
                  (matched = handlerQueue[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  event.currentTarget = matched.elem;

                  j = 0;
                  while (
                    (handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()
                  ) {
                    // If the event is namespaced, then each handler is only invoked if it is
                    // specially universal or its namespaces are a superset of the event's.
                    if (
                      !event.rnamespace ||
                      handleObj.namespace === false ||
                      event.rnamespace.test(handleObj.namespace)
                    ) {
                      event.handleObj = handleObj;
                      event.data = handleObj.data;

                      ret = (
                        (jQuery.event.special[handleObj.origType] || {})
                          .handle || handleObj.handler
                      ).apply(matched.elem, args);

                      if (ret !== undefined) {
                        if ((event.result = ret) === false) {
                          event.preventDefault();
                          event.stopPropagation();
                        }
                      }
                    }
                  }
                }

                // Call the postDispatch hook for the mapped type
                if (special.postDispatch) {
                  special.postDispatch.call(this, event);
                }

                return event.result;
              },

              handlers: function (event, handlers) {
                var i,
                  handleObj,
                  sel,
                  matchedHandlers,
                  matchedSelectors,
                  handlerQueue = [],
                  delegateCount = handlers.delegateCount,
                  cur = event.target;

                // Find delegate handlers
                if (
                  delegateCount &&
                  // Support: IE <=9
                  // Black-hole SVG <use> instance trees (trac-13180)
                  cur.nodeType &&
                  // Support: Firefox <=42
                  // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
                  // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
                  // Support: IE 11 only
                  // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
                  !(event.type === 'click' && event.button >= 1)
                ) {
                  for (; cur !== this; cur = cur.parentNode || this) {
                    // Don't check non-elements (trac-13208)
                    // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
                    if (
                      cur.nodeType === 1 &&
                      !(event.type === 'click' && cur.disabled === true)
                    ) {
                      matchedHandlers = [];
                      matchedSelectors = {};
                      for (i = 0; i < delegateCount; i++) {
                        handleObj = handlers[i];

                        // Don't conflict with Object.prototype properties (trac-13203)
                        sel = handleObj.selector + ' ';

                        if (matchedSelectors[sel] === undefined) {
                          matchedSelectors[sel] = handleObj.needsContext
                            ? jQuery(sel, this).index(cur) > -1
                            : jQuery.find(sel, this, null, [cur]).length;
                        }
                        if (matchedSelectors[sel]) {
                          matchedHandlers.push(handleObj);
                        }
                      }
                      if (matchedHandlers.length) {
                        handlerQueue.push({
                          elem: cur,
                          handlers: matchedHandlers,
                        });
                      }
                    }
                  }
                }

                // Add the remaining (directly-bound) handlers
                cur = this;
                if (delegateCount < handlers.length) {
                  handlerQueue.push({
                    elem: cur,
                    handlers: handlers.slice(delegateCount),
                  });
                }

                return handlerQueue;
              },

              addProp: function (name, hook) {
                Object.defineProperty(jQuery.Event.prototype, name, {
                  enumerable: true,
                  configurable: true,

                  get: isFunction(hook)
                    ? function () {
                        if (this.originalEvent) {
                          return hook(this.originalEvent);
                        }
                      }
                    : function () {
                        if (this.originalEvent) {
                          return this.originalEvent[name];
                        }
                      },

                  set: function (value) {
                    Object.defineProperty(this, name, {
                      enumerable: true,
                      configurable: true,
                      writable: true,
                      value: value,
                    });
                  },
                });
              },

              fix: function (originalEvent) {
                return originalEvent[jQuery.expando]
                  ? originalEvent
                  : new jQuery.Event(originalEvent);
              },

              special: {
                load: {
                  // Prevent triggered image.load events from bubbling to window.load
                  noBubble: true,
                },
                click: {
                  // Utilize native event to ensure correct state for checkable inputs
                  setup: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Claim the first handler
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, 'input')
                    ) {
                      // dataPriv.set( el, "click", ... )
                      leverageNative(el, 'click', true);
                    }

                    // Return false to allow normal processing in the caller
                    return false;
                  },
                  trigger: function (data) {
                    // For mutual compressibility with _default, replace `this` access with a local var.
                    // `|| data` is dead code meant only to preserve the variable through minification.
                    var el = this || data;

                    // Force setup before triggering a click
                    if (
                      rcheckableType.test(el.type) &&
                      el.click &&
                      nodeName(el, 'input')
                    ) {
                      leverageNative(el, 'click');
                    }

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  // For cross-browser consistency, suppress native .click() on links
                  // Also prevent it if we're currently inside a leveraged native-event stack
                  _default: function (event) {
                    var target = event.target;
                    return (
                      (rcheckableType.test(target.type) &&
                        target.click &&
                        nodeName(target, 'input') &&
                        dataPriv.get(target, 'click')) ||
                      nodeName(target, 'a')
                    );
                  },
                },

                beforeunload: {
                  postDispatch: function (event) {
                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                      event.originalEvent.returnValue = event.result;
                    }
                  },
                },
              },
            };

            // Ensure the presence of an event listener that handles manually-triggered
            // synthetic events by interrupting progress until reinvoked in response to
            // *native* events that it fires directly, ensuring that state changes have
            // already occurred before other listeners are invoked.
            function leverageNative(el, type, isSetup) {
              // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
              if (!isSetup) {
                if (dataPriv.get(el, type) === undefined) {
                  jQuery.event.add(el, type, returnTrue);
                }
                return;
              }

              // Register the controller as a special universal handler for all event namespaces
              dataPriv.set(el, type, false);
              jQuery.event.add(el, type, {
                namespace: false,
                handler: function (event) {
                  var result,
                    saved = dataPriv.get(this, type);

                  if (event.isTrigger & 1 && this[type]) {
                    // Interrupt processing of the outer synthetic .trigger()ed event
                    if (!saved) {
                      // Store arguments for use when handling the inner native event
                      // There will always be at least one argument (an event object), so this array
                      // will not be confused with a leftover capture object.
                      saved = slice.call(arguments);
                      dataPriv.set(this, type, saved);

                      // Trigger the native event and capture its result
                      this[type]();
                      result = dataPriv.get(this, type);
                      dataPriv.set(this, type, false);

                      if (saved !== result) {
                        // Cancel the outer synthetic event
                        event.stopImmediatePropagation();
                        event.preventDefault();

                        return result;
                      }

                      // If this is an inner synthetic event for an event with a bubbling surrogate
                      // (focus or blur), assume that the surrogate already propagated from triggering
                      // the native event and prevent that from happening again here.
                      // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
                      // bubbling surrogate propagates *after* the non-bubbling base), but that seems
                      // less bad than duplication.
                    } else if (
                      (jQuery.event.special[type] || {}).delegateType
                    ) {
                      event.stopPropagation();
                    }

                    // If this is a native event triggered above, everything is now in order
                    // Fire an inner synthetic event with the original arguments
                  } else if (saved) {
                    // ...and capture the result
                    dataPriv.set(
                      this,
                      type,
                      jQuery.event.trigger(saved[0], saved.slice(1), this)
                    );

                    // Abort handling of the native event by all jQuery handlers while allowing
                    // native handlers on the same element to run. On target, this is achieved
                    // by stopping immediate propagation just on the jQuery event. However,
                    // the native event is re-wrapped by a jQuery one on each level of the
                    // propagation so the only way to stop it for jQuery is to stop it for
                    // everyone via native `stopPropagation()`. This is not a problem for
                    // focus/blur which don't bubble, but it does also stop click on checkboxes
                    // and radios. We accept this limitation.
                    event.stopPropagation();
                    event.isImmediatePropagationStopped = returnTrue;
                  }
                },
              });
            }

            jQuery.removeEvent = function (elem, type, handle) {
              // This "if" is needed for plain objects
              if (elem.removeEventListener) {
                elem.removeEventListener(type, handle);
              }
            };

            jQuery.Event = function (src, props) {
              // Allow instantiation without the 'new' keyword
              if (!(this instanceof jQuery.Event)) {
                return new jQuery.Event(src, props);
              }

              // Event object
              if (src && src.type) {
                this.originalEvent = src;
                this.type = src.type;

                // Events bubbling up the document may have been marked as prevented
                // by a handler lower down the tree; reflect the correct value.
                this.isDefaultPrevented =
                  src.defaultPrevented ||
                  (src.defaultPrevented === undefined &&
                    // Support: Android <=2.3 only
                    src.returnValue === false)
                    ? returnTrue
                    : returnFalse;

                // Create target properties
                // Support: Safari <=6 - 7 only
                // Target should not be a text node (trac-504, trac-13143)
                this.target =
                  src.target && src.target.nodeType === 3
                    ? src.target.parentNode
                    : src.target;

                this.currentTarget = src.currentTarget;
                this.relatedTarget = src.relatedTarget;

                // Event type
              } else {
                this.type = src;
              }

              // Put explicitly provided properties onto the event object
              if (props) {
                jQuery.extend(this, props);
              }

              // Create a timestamp if incoming event doesn't have one
              this.timeStamp = (src && src.timeStamp) || Date.now();

              // Mark it as fixed
              this[jQuery.expando] = true;
            };

            // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
            // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
            jQuery.Event.prototype = {
              constructor: jQuery.Event,
              isDefaultPrevented: returnFalse,
              isPropagationStopped: returnFalse,
              isImmediatePropagationStopped: returnFalse,
              isSimulated: false,

              preventDefault: function () {
                var e = this.originalEvent;

                this.isDefaultPrevented = returnTrue;

                if (e && !this.isSimulated) {
                  e.preventDefault();
                }
              },
              stopPropagation: function () {
                var e = this.originalEvent;

                this.isPropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopPropagation();
                }
              },
              stopImmediatePropagation: function () {
                var e = this.originalEvent;

                this.isImmediatePropagationStopped = returnTrue;

                if (e && !this.isSimulated) {
                  e.stopImmediatePropagation();
                }

                this.stopPropagation();
              },
            };

            // Includes all common event props including KeyEvent and MouseEvent specific props
            jQuery.each(
              {
                altKey: true,
                bubbles: true,
                cancelable: true,
                changedTouches: true,
                ctrlKey: true,
                detail: true,
                eventPhase: true,
                metaKey: true,
                pageX: true,
                pageY: true,
                shiftKey: true,
                view: true,
                char: true,
                code: true,
                charCode: true,
                key: true,
                keyCode: true,
                button: true,
                buttons: true,
                clientX: true,
                clientY: true,
                offsetX: true,
                offsetY: true,
                pointerId: true,
                pointerType: true,
                screenX: true,
                screenY: true,
                targetTouches: true,
                toElement: true,
                touches: true,
                which: true,
              },
              jQuery.event.addProp
            );

            jQuery.each(
              { focus: 'focusin', blur: 'focusout' },
              function (type, delegateType) {
                function focusMappedHandler(nativeEvent) {
                  if (document.documentMode) {
                    // Support: IE 11+
                    // Attach a single focusin/focusout handler on the document while someone wants
                    // focus/blur. This is because the former are synchronous in IE while the latter
                    // are async. In other browsers, all those handlers are invoked synchronously.

                    // `handle` from private data would already wrap the event, but we need
                    // to change the `type` here.
                    var handle = dataPriv.get(this, 'handle'),
                      event = jQuery.event.fix(nativeEvent);
                    event.type =
                      nativeEvent.type === 'focusin' ? 'focus' : 'blur';
                    event.isSimulated = true;

                    // First, handle focusin/focusout
                    handle(nativeEvent);

                    // ...then, handle focus/blur
                    //
                    // focus/blur don't bubble while focusin/focusout do; simulate the former by only
                    // invoking the handler at the lower level.
                    if (event.target === event.currentTarget) {
                      // The setup part calls `leverageNative`, which, in turn, calls
                      // `jQuery.event.add`, so event handle will already have been set
                      // by this point.
                      handle(event);
                    }
                  } else {
                    // For non-IE browsers, attach a single capturing handler on the document
                    // while someone wants focusin/focusout.
                    jQuery.event.simulate(
                      delegateType,
                      nativeEvent.target,
                      jQuery.event.fix(nativeEvent)
                    );
                  }
                }

                jQuery.event.special[type] = {
                  // Utilize native event if possible so blur/focus sequence is correct
                  setup: function () {
                    var attaches;

                    // Claim the first handler
                    // dataPriv.set( this, "focus", ... )
                    // dataPriv.set( this, "blur", ... )
                    leverageNative(this, type, true);

                    if (document.documentMode) {
                      // Support: IE 9 - 11+
                      // We use the same native handler for focusin & focus (and focusout & blur)
                      // so we need to coordinate setup & teardown parts between those events.
                      // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                      attaches = dataPriv.get(this, delegateType);
                      if (!attaches) {
                        this.addEventListener(delegateType, focusMappedHandler);
                      }
                      dataPriv.set(this, delegateType, (attaches || 0) + 1);
                    } else {
                      // Return false to allow normal processing in the caller
                      return false;
                    }
                  },
                  trigger: function () {
                    // Force setup before trigger
                    leverageNative(this, type);

                    // Return non-false to allow normal event-path propagation
                    return true;
                  },

                  teardown: function () {
                    var attaches;

                    if (document.documentMode) {
                      attaches = dataPriv.get(this, delegateType) - 1;
                      if (!attaches) {
                        this.removeEventListener(
                          delegateType,
                          focusMappedHandler
                        );
                        dataPriv.remove(this, delegateType);
                      } else {
                        dataPriv.set(this, delegateType, attaches);
                      }
                    } else {
                      // Return false to indicate standard teardown should be applied
                      return false;
                    }
                  },

                  // Suppress native focus or blur if we're currently inside
                  // a leveraged native-event stack
                  _default: function (event) {
                    return dataPriv.get(event.target, type);
                  },

                  delegateType: delegateType,
                };

                // Support: Firefox <=44
                // Firefox doesn't have focus(in | out) events
                // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
                //
                // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
                // focus(in | out) events fire after focus & blur events,
                // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
                // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
                //
                // Support: IE 9 - 11+
                // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
                // attach a single handler for both events in IE.
                jQuery.event.special[delegateType] = {
                  setup: function () {
                    // Handle: regular nodes (via `this.ownerDocument`), window
                    // (via `this.document`) & document (via `this`).
                    var doc = this.ownerDocument || this.document || this,
                      dataHolder = document.documentMode ? this : doc,
                      attaches = dataPriv.get(dataHolder, delegateType);

                    // Support: IE 9 - 11+
                    // We use the same native handler for focusin & focus (and focusout & blur)
                    // so we need to coordinate setup & teardown parts between those events.
                    // Use `delegateType` as the key as `type` is already used by `leverageNative`.
                    if (!attaches) {
                      if (document.documentMode) {
                        this.addEventListener(delegateType, focusMappedHandler);
                      } else {
                        doc.addEventListener(type, focusMappedHandler, true);
                      }
                    }
                    dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
                  },
                  teardown: function () {
                    var doc = this.ownerDocument || this.document || this,
                      dataHolder = document.documentMode ? this : doc,
                      attaches = dataPriv.get(dataHolder, delegateType) - 1;

                    if (!attaches) {
                      if (document.documentMode) {
                        this.removeEventListener(
                          delegateType,
                          focusMappedHandler
                        );
                      } else {
                        doc.removeEventListener(type, focusMappedHandler, true);
                      }
                      dataPriv.remove(dataHolder, delegateType);
                    } else {
                      dataPriv.set(dataHolder, delegateType, attaches);
                    }
                  },
                };
              }
            );

            // Create mouseenter/leave events using mouseover/out and event-time checks
            // so that event delegation works in jQuery.
            // Do the same for pointerenter/pointerleave and pointerover/pointerout
            //
            // Support: Safari 7 only
            // Safari sends mouseenter too often; see:
            // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
            // for the description of the bug (it existed in older Chrome versions as well).
            jQuery.each(
              {
                mouseenter: 'mouseover',
                mouseleave: 'mouseout',
                pointerenter: 'pointerover',
                pointerleave: 'pointerout',
              },
              function (orig, fix) {
                jQuery.event.special[orig] = {
                  delegateType: fix,
                  bindType: fix,

                  handle: function (event) {
                    var ret,
                      target = this,
                      related = event.relatedTarget,
                      handleObj = event.handleObj;

                    // For mouseenter/leave call the handler if related is outside the target.
                    // NB: No relatedTarget if the mouse left/entered the browser window
                    if (
                      !related ||
                      (related !== target && !jQuery.contains(target, related))
                    ) {
                      event.type = handleObj.origType;
                      ret = handleObj.handler.apply(this, arguments);
                      event.type = fix;
                    }
                    return ret;
                  },
                };
              }
            );

            jQuery.fn.extend({
              on: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn);
              },
              one: function (types, selector, data, fn) {
                return on(this, types, selector, data, fn, 1);
              },
              off: function (types, selector, fn) {
                var handleObj, type;
                if (types && types.preventDefault && types.handleObj) {
                  // ( event )  dispatched jQuery.Event
                  handleObj = types.handleObj;
                  jQuery(types.delegateTarget).off(
                    handleObj.namespace
                      ? handleObj.origType + '.' + handleObj.namespace
                      : handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                  );
                  return this;
                }
                if (typeof types === 'object') {
                  // ( types-object [, selector] )
                  for (type in types) {
                    this.off(type, selector, types[type]);
                  }
                  return this;
                }
                if (selector === false || typeof selector === 'function') {
                  // ( types [, fn] )
                  fn = selector;
                  selector = undefined;
                }
                if (fn === false) {
                  fn = returnFalse;
                }
                return this.each(function () {
                  jQuery.event.remove(this, types, fn, selector);
                });
              },
            });

            var // Support: IE <=10 - 11, Edge 12 - 13 only
              // In IE/Edge using regex groups here causes severe slowdowns.
              // See https://connect.microsoft.com/IE/feedback/details/1736512/
              rnoInnerhtml = /<script|<style|<link/i,
              // checked="checked" or checked
              rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
              rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

            // Prefer a tbody over its parent table for containing new rows
            function manipulationTarget(elem, content) {
              if (
                nodeName(elem, 'table') &&
                nodeName(
                  content.nodeType !== 11 ? content : content.firstChild,
                  'tr'
                )
              ) {
                return jQuery(elem).children('tbody')[0] || elem;
              }

              return elem;
            }

            // Replace/restore the type attribute of script elements for safe DOM manipulation
            function disableScript(elem) {
              elem.type =
                (elem.getAttribute('type') !== null) + '/' + elem.type;
              return elem;
            }
            function restoreScript(elem) {
              if ((elem.type || '').slice(0, 5) === 'true/') {
                elem.type = elem.type.slice(5);
              } else {
                elem.removeAttribute('type');
              }

              return elem;
            }

            function cloneCopyEvent(src, dest) {
              var i, l, type, pdataOld, udataOld, udataCur, events;

              if (dest.nodeType !== 1) {
                return;
              }

              // 1. Copy private data: events, handlers, etc.
              if (dataPriv.hasData(src)) {
                pdataOld = dataPriv.get(src);
                events = pdataOld.events;

                if (events) {
                  dataPriv.remove(dest, 'handle events');

                  for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                      jQuery.event.add(dest, type, events[type][i]);
                    }
                  }
                }
              }

              // 2. Copy user data
              if (dataUser.hasData(src)) {
                udataOld = dataUser.access(src);
                udataCur = jQuery.extend({}, udataOld);

                dataUser.set(dest, udataCur);
              }
            }

            // Fix IE bugs, see support tests
            function fixInput(src, dest) {
              var nodeName = dest.nodeName.toLowerCase();

              // Fails to persist the checked state of a cloned checkbox or radio button.
              if (nodeName === 'input' && rcheckableType.test(src.type)) {
                dest.checked = src.checked;

                // Fails to return the selected option to the default selected state when cloning options
              } else if (nodeName === 'input' || nodeName === 'textarea') {
                dest.defaultValue = src.defaultValue;
              }
            }

            function domManip(collection, args, callback, ignored) {
              // Flatten any nested arrays
              args = flat(args);

              var fragment,
                first,
                scripts,
                hasScripts,
                node,
                doc,
                i = 0,
                l = collection.length,
                iNoClone = l - 1,
                value = args[0],
                valueIsFunction = isFunction(value);

              // We can't cloneNode fragments that contain checked, in WebKit
              if (
                valueIsFunction ||
                (l > 1 &&
                  typeof value === 'string' &&
                  !support.checkClone &&
                  rchecked.test(value))
              ) {
                return collection.each(function (index) {
                  var self = collection.eq(index);
                  if (valueIsFunction) {
                    args[0] = value.call(this, index, self.html());
                  }
                  domManip(self, args, callback, ignored);
                });
              }

              if (l) {
                fragment = buildFragment(
                  args,
                  collection[0].ownerDocument,
                  false,
                  collection,
                  ignored
                );
                first = fragment.firstChild;

                if (fragment.childNodes.length === 1) {
                  fragment = first;
                }

                // Require either new content or an interest in ignored elements to invoke the callback
                if (first || ignored) {
                  scripts = jQuery.map(
                    getAll(fragment, 'script'),
                    disableScript
                  );
                  hasScripts = scripts.length;

                  // Use the original fragment for the last item
                  // instead of the first because it can end up
                  // being emptied incorrectly in certain situations (trac-8070).
                  for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                      node = jQuery.clone(node, true, true);

                      // Keep references to cloned scripts for later restoration
                      if (hasScripts) {
                        // Support: Android <=4.0 only, PhantomJS 1 only
                        // push.apply(_, arraylike) throws on ancient WebKit
                        jQuery.merge(scripts, getAll(node, 'script'));
                      }
                    }

                    callback.call(collection[i], node, i);
                  }

                  if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Re-enable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                      node = scripts[i];
                      if (
                        rscriptType.test(node.type || '') &&
                        !dataPriv.access(node, 'globalEval') &&
                        jQuery.contains(doc, node)
                      ) {
                        if (
                          node.src &&
                          (node.type || '').toLowerCase() !== 'module'
                        ) {
                          // Optional AJAX dependency, but won't run scripts if not present
                          if (jQuery._evalUrl && !node.noModule) {
                            jQuery._evalUrl(
                              node.src,
                              {
                                nonce: node.nonce || node.getAttribute('nonce'),
                              },
                              doc
                            );
                          }
                        } else {
                          // Unwrap a CDATA section containing script contents. This shouldn't be
                          // needed as in XML documents they're already not visible when
                          // inspecting element contents and in HTML documents they have no
                          // meaning but we're preserving that logic for backwards compatibility.
                          // This will be removed completely in 4.0. See gh-4904.
                          DOMEval(
                            node.textContent.replace(rcleanScript, ''),
                            node,
                            doc
                          );
                        }
                      }
                    }
                  }
                }
              }

              return collection;
            }

            function remove(elem, selector, keepData) {
              var node,
                nodes = selector ? jQuery.filter(selector, elem) : elem,
                i = 0;

              for (; (node = nodes[i]) != null; i++) {
                if (!keepData && node.nodeType === 1) {
                  jQuery.cleanData(getAll(node));
                }

                if (node.parentNode) {
                  if (keepData && isAttached(node)) {
                    setGlobalEval(getAll(node, 'script'));
                  }
                  node.parentNode.removeChild(node);
                }
              }

              return elem;
            }

            jQuery.extend({
              htmlPrefilter: function (html) {
                return html;
              },

              clone: function (elem, dataAndEvents, deepDataAndEvents) {
                var i,
                  l,
                  srcElements,
                  destElements,
                  clone = elem.cloneNode(true),
                  inPage = isAttached(elem);

                // Fix IE cloning issues
                if (
                  !support.noCloneChecked &&
                  (elem.nodeType === 1 || elem.nodeType === 11) &&
                  !jQuery.isXMLDoc(elem)
                ) {
                  // We eschew jQuery#find here for performance reasons:
                  // https://jsperf.com/getall-vs-sizzle/2
                  destElements = getAll(clone);
                  srcElements = getAll(elem);

                  for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                  }
                }

                // Copy the events from the original to the clone
                if (dataAndEvents) {
                  if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                      cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                  } else {
                    cloneCopyEvent(elem, clone);
                  }
                }

                // Preserve script evaluation history
                destElements = getAll(clone, 'script');
                if (destElements.length > 0) {
                  setGlobalEval(
                    destElements,
                    !inPage && getAll(elem, 'script')
                  );
                }

                // Return the cloned set
                return clone;
              },

              cleanData: function (elems) {
                var data,
                  elem,
                  type,
                  special = jQuery.event.special,
                  i = 0;

                for (; (elem = elems[i]) !== undefined; i++) {
                  if (acceptData(elem)) {
                    if ((data = elem[dataPriv.expando])) {
                      if (data.events) {
                        for (type in data.events) {
                          if (special[type]) {
                            jQuery.event.remove(elem, type);

                            // This is a shortcut to avoid jQuery.event.remove's overhead
                          } else {
                            jQuery.removeEvent(elem, type, data.handle);
                          }
                        }
                      }

                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {
                      // Support: Chrome <=35 - 45+
                      // Assign undefined instead of using delete, see Data#remove
                      elem[dataUser.expando] = undefined;
                    }
                  }
                }
              },
            });

            jQuery.fn.extend({
              detach: function (selector) {
                return remove(this, selector, true);
              },

              remove: function (selector) {
                return remove(this, selector);
              },

              text: function (value) {
                return access(
                  this,
                  function (value) {
                    return value === undefined
                      ? jQuery.text(this)
                      : this.empty().each(function () {
                          if (
                            this.nodeType === 1 ||
                            this.nodeType === 11 ||
                            this.nodeType === 9
                          ) {
                            this.textContent = value;
                          }
                        });
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              append: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                  }
                });
              },

              prepend: function () {
                return domManip(this, arguments, function (elem) {
                  if (
                    this.nodeType === 1 ||
                    this.nodeType === 11 ||
                    this.nodeType === 9
                  ) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                  }
                });
              },

              before: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                  }
                });
              },

              after: function () {
                return domManip(this, arguments, function (elem) {
                  if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                  }
                });
              },

              empty: function () {
                var elem,
                  i = 0;

                for (; (elem = this[i]) != null; i++) {
                  if (elem.nodeType === 1) {
                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = '';
                  }
                }

                return this;
              },

              clone: function (dataAndEvents, deepDataAndEvents) {
                dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                deepDataAndEvents =
                  deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

                return this.map(function () {
                  return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                });
              },

              html: function (value) {
                return access(
                  this,
                  function (value) {
                    var elem = this[0] || {},
                      i = 0,
                      l = this.length;

                    if (value === undefined && elem.nodeType === 1) {
                      return elem.innerHTML;
                    }

                    // See if we can take a shortcut and just use innerHTML
                    if (
                      typeof value === 'string' &&
                      !rnoInnerhtml.test(value) &&
                      !wrapMap[
                        (rtagName.exec(value) || ['', ''])[1].toLowerCase()
                      ]
                    ) {
                      value = jQuery.htmlPrefilter(value);

                      try {
                        for (; i < l; i++) {
                          elem = this[i] || {};

                          // Remove element nodes and prevent memory leaks
                          if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.innerHTML = value;
                          }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                      } catch (e) {}
                    }

                    if (elem) {
                      this.empty().append(value);
                    }
                  },
                  null,
                  value,
                  arguments.length
                );
              },

              replaceWith: function () {
                var ignored = [];

                // Make the changes, replacing each non-ignored context element with the new content
                return domManip(
                  this,
                  arguments,
                  function (elem) {
                    var parent = this.parentNode;

                    if (jQuery.inArray(this, ignored) < 0) {
                      jQuery.cleanData(getAll(this));
                      if (parent) {
                        parent.replaceChild(elem, this);
                      }
                    }

                    // Force callback invocation
                  },
                  ignored
                );
              },
            });

            jQuery.each(
              {
                appendTo: 'append',
                prependTo: 'prepend',
                insertBefore: 'before',
                insertAfter: 'after',
                replaceAll: 'replaceWith',
              },
              function (name, original) {
                jQuery.fn[name] = function (selector) {
                  var elems,
                    ret = [],
                    insert = jQuery(selector),
                    last = insert.length - 1,
                    i = 0;

                  for (; i <= last; i++) {
                    elems = i === last ? this : this.clone(true);
                    jQuery(insert[i])[original](elems);

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                    push.apply(ret, elems.get());
                  }

                  return this.pushStack(ret);
                };
              }
            );
            var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');

            var rcustomProp = /^--/;

            var getStyles = function (elem) {
              // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
              // IE throws on elements created in popups
              // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
              var view = elem.ownerDocument.defaultView;

              if (!view || !view.opener) {
                view = window;
              }

              return view.getComputedStyle(elem);
            };

            var swap = function (elem, options, callback) {
              var ret,
                name,
                old = {};

              // Remember the old values, and insert the new ones
              for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
              }

              ret = callback.call(elem);

              // Revert the old values
              for (name in options) {
                elem.style[name] = old[name];
              }

              return ret;
            };

            var rboxStyle = new RegExp(cssExpand.join('|'), 'i');

            (function () {
              // Executing both pixelPosition & boxSizingReliable tests require only one layout
              // so they're executed at the same time to save the second computation.
              function computeStyleTests() {
                // This is a singleton, we need to execute it only once
                if (!div) {
                  return;
                }

                container.style.cssText =
                  'position:absolute;left:-11111px;width:60px;' +
                  'margin-top:1px;padding:0;border:0';
                div.style.cssText =
                  'position:relative;display:block;box-sizing:border-box;overflow:scroll;' +
                  'margin:auto;border:1px;padding:1px;' +
                  'width:60%;top:1%';
                documentElement.appendChild(container).appendChild(div);

                var divStyle = window.getComputedStyle(div);
                pixelPositionVal = divStyle.top !== '1%';

                // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
                reliableMarginLeftVal =
                  roundPixelMeasures(divStyle.marginLeft) === 12;

                // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
                // Some styles come back with percentage values, even though they shouldn't
                div.style.right = '60%';
                pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

                // Support: IE 9 - 11 only
                // Detect misreporting of content dimensions for box-sizing:border-box elements
                boxSizingReliableVal =
                  roundPixelMeasures(divStyle.width) === 36;

                // Support: IE 9 only
                // Detect overflow:scroll screwiness (gh-3699)
                // Support: Chrome <=64
                // Don't get tricked when zoom affects offsetWidth (gh-4029)
                div.style.position = 'absolute';
                scrollboxSizeVal =
                  roundPixelMeasures(div.offsetWidth / 3) === 12;

                documentElement.removeChild(container);

                // Nullify the div so it wouldn't be stored in the memory and
                // it will also be a sign that checks already performed
                div = null;
              }

              function roundPixelMeasures(measure) {
                return Math.round(parseFloat(measure));
              }

              var pixelPositionVal,
                boxSizingReliableVal,
                scrollboxSizeVal,
                pixelBoxStylesVal,
                reliableTrDimensionsVal,
                reliableMarginLeftVal,
                container = document.createElement('div'),
                div = document.createElement('div');

              // Finish early in limited (non-browser) environments
              if (!div.style) {
                return;
              }

              // Support: IE <=9 - 11 only
              // Style of cloned element affects source element cloned (trac-8908)
              div.style.backgroundClip = 'content-box';
              div.cloneNode(true).style.backgroundClip = '';
              support.clearCloneStyle =
                div.style.backgroundClip === 'content-box';

              jQuery.extend(support, {
                boxSizingReliable: function () {
                  computeStyleTests();
                  return boxSizingReliableVal;
                },
                pixelBoxStyles: function () {
                  computeStyleTests();
                  return pixelBoxStylesVal;
                },
                pixelPosition: function () {
                  computeStyleTests();
                  return pixelPositionVal;
                },
                reliableMarginLeft: function () {
                  computeStyleTests();
                  return reliableMarginLeftVal;
                },
                scrollboxSize: function () {
                  computeStyleTests();
                  return scrollboxSizeVal;
                },

                // Support: IE 9 - 11+, Edge 15 - 18+
                // IE/Edge misreport `getComputedStyle` of table rows with width/height
                // set in CSS while `offset*` properties report correct values.
                // Behavior in IE 9 is more subtle than in newer versions & it passes
                // some versions of this test; make sure not to make it pass there!
                //
                // Support: Firefox 70+
                // Only Firefox includes border widths
                // in computed dimensions. (gh-4529)
                reliableTrDimensions: function () {
                  var table, tr, trChild, trStyle;
                  if (reliableTrDimensionsVal == null) {
                    table = document.createElement('table');
                    tr = document.createElement('tr');
                    trChild = document.createElement('div');

                    table.style.cssText =
                      'position:absolute;left:-11111px;border-collapse:separate';
                    tr.style.cssText =
                      'box-sizing:content-box;border:1px solid';

                    // Support: Chrome 86+
                    // Height set through cssText does not get applied.
                    // Computed height then comes back as 0.
                    tr.style.height = '1px';
                    trChild.style.height = '9px';

                    // Support: Android 8 Chrome 86+
                    // In our bodyBackground.html iframe,
                    // display for all div elements is set to "inline",
                    // which causes a problem only in Android 8 Chrome 86.
                    // Ensuring the div is `display: block`
                    // gets around this issue.
                    trChild.style.display = 'block';

                    documentElement
                      .appendChild(table)
                      .appendChild(tr)
                      .appendChild(trChild);

                    trStyle = window.getComputedStyle(tr);
                    reliableTrDimensionsVal =
                      parseInt(trStyle.height, 10) +
                        parseInt(trStyle.borderTopWidth, 10) +
                        parseInt(trStyle.borderBottomWidth, 10) ===
                      tr.offsetHeight;

                    documentElement.removeChild(table);
                  }
                  return reliableTrDimensionsVal;
                },
              });
            })();

            function curCSS(elem, name, computed) {
              var width,
                minWidth,
                maxWidth,
                ret,
                isCustomProp = rcustomProp.test(name),
                // Support: Firefox 51+
                // Retrieving style before computed somehow
                // fixes an issue with getting wrong values
                // on detached elements
                style = elem.style;

              computed = computed || getStyles(elem);

              // getPropertyValue is needed for:
              //   .css('filter') (IE 9 only, trac-12537)
              //   .css('--customProperty) (gh-3144)
              if (computed) {
                // Support: IE <=9 - 11+
                // IE only supports `"float"` in `getPropertyValue`; in computed styles
                // it's only available as `"cssFloat"`. We no longer modify properties
                // sent to `.css()` apart from camelCasing, so we need to check both.
                // Normally, this would create difference in behavior: if
                // `getPropertyValue` returns an empty string, the value returned
                // by `.css()` would be `undefined`. This is usually the case for
                // disconnected elements. However, in IE even disconnected elements
                // with no styles return `"none"` for `getPropertyValue( "float" )`
                ret = computed.getPropertyValue(name) || computed[name];

                if (isCustomProp && ret) {
                  // Support: Firefox 105+, Chrome <=105+
                  // Spec requires trimming whitespace for custom properties (gh-4926).
                  // Firefox only trims leading whitespace. Chrome just collapses
                  // both leading & trailing whitespace to a single space.
                  //
                  // Fall back to `undefined` if empty string returned.
                  // This collapses a missing definition with property defined
                  // and set to an empty string but there's no standard API
                  // allowing us to differentiate them without a performance penalty
                  // and returning `undefined` aligns with older jQuery.
                  //
                  // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
                  // as whitespace while CSS does not, but this is not a problem
                  // because CSS preprocessing replaces them with U+000A LINE FEED
                  // (which *is* CSS whitespace)
                  // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
                  ret = ret.replace(rtrimCSS, '$1') || undefined;
                }

                if (ret === '' && !isAttached(elem)) {
                  ret = jQuery.style(elem, name);
                }

                // A tribute to the "awesome hack by Dean Edwards"
                // Android Browser returns percentage for some values,
                // but width seems to be reliably pixels.
                // This is against the CSSOM draft spec:
                // https://drafts.csswg.org/cssom/#resolved-values
                if (
                  !support.pixelBoxStyles() &&
                  rnumnonpx.test(ret) &&
                  rboxStyle.test(name)
                ) {
                  // Remember the original values
                  width = style.width;
                  minWidth = style.minWidth;
                  maxWidth = style.maxWidth;

                  // Put in the new values to get a computed value out
                  style.minWidth = style.maxWidth = style.width = ret;
                  ret = computed.width;

                  // Revert the changed values
                  style.width = width;
                  style.minWidth = minWidth;
                  style.maxWidth = maxWidth;
                }
              }

              return ret !== undefined
                ? // Support: IE <=9 - 11 only
                  // IE returns zIndex value as an integer.
                  ret + ''
                : ret;
            }

            function addGetHookIf(conditionFn, hookFn) {
              // Define the hook, we'll check on the first run if it's really needed.
              return {
                get: function () {
                  if (conditionFn()) {
                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                  }

                  // Hook needed; redefine it so that the support test is not executed again.
                  return (this.get = hookFn).apply(this, arguments);
                },
              };
            }

            var cssPrefixes = ['Webkit', 'Moz', 'ms'],
              emptyStyle = document.createElement('div').style,
              vendorProps = {};

            // Return a vendor-prefixed property or undefined
            function vendorPropName(name) {
              // Check for vendor prefixed names
              var capName = name[0].toUpperCase() + name.slice(1),
                i = cssPrefixes.length;

              while (i--) {
                name = cssPrefixes[i] + capName;
                if (name in emptyStyle) {
                  return name;
                }
              }
            }

            // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
            function finalPropName(name) {
              var final = jQuery.cssProps[name] || vendorProps[name];

              if (final) {
                return final;
              }
              if (name in emptyStyle) {
                return name;
              }
              return (vendorProps[name] = vendorPropName(name) || name);
            }

            var // Swappable if display is none or starts with table
              // except "table", "table-cell", or "table-caption"
              // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
              rdisplayswap = /^(none|table(?!-c[ea]).+)/,
              cssShow = {
                position: 'absolute',
                visibility: 'hidden',
                display: 'block',
              },
              cssNormalTransform = {
                letterSpacing: '0',
                fontWeight: '400',
              };

            function setPositiveNumber(_elem, value, subtract) {
              // Any relative (+/-) values have already been
              // normalized at this point
              var matches = rcssNum.exec(value);
              return matches
                ? // Guard against undefined "subtract", e.g., when used as in cssHooks
                  Math.max(0, matches[2] - (subtract || 0)) +
                    (matches[3] || 'px')
                : value;
            }

            function boxModelAdjustment(
              elem,
              dimension,
              box,
              isBorderBox,
              styles,
              computedVal
            ) {
              var i = dimension === 'width' ? 1 : 0,
                extra = 0,
                delta = 0,
                marginDelta = 0;

              // Adjustment may not be necessary
              if (box === (isBorderBox ? 'border' : 'content')) {
                return 0;
              }

              for (; i < 4; i += 2) {
                // Both box models exclude margin
                // Count margin delta separately to only add it after scroll gutter adjustment.
                // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
                if (box === 'margin') {
                  marginDelta += jQuery.css(
                    elem,
                    box + cssExpand[i],
                    true,
                    styles
                  );
                }

                // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
                if (!isBorderBox) {
                  // Add padding
                  delta += jQuery.css(
                    elem,
                    'padding' + cssExpand[i],
                    true,
                    styles
                  );

                  // For "border" or "margin", add border
                  if (box !== 'padding') {
                    delta += jQuery.css(
                      elem,
                      'border' + cssExpand[i] + 'Width',
                      true,
                      styles
                    );

                    // But still keep track of it otherwise
                  } else {
                    extra += jQuery.css(
                      elem,
                      'border' + cssExpand[i] + 'Width',
                      true,
                      styles
                    );
                  }

                  // If we get here with a border-box (content + padding + border), we're seeking "content" or
                  // "padding" or "margin"
                } else {
                  // For "content", subtract padding
                  if (box === 'content') {
                    delta -= jQuery.css(
                      elem,
                      'padding' + cssExpand[i],
                      true,
                      styles
                    );
                  }

                  // For "content" or "padding", subtract border
                  if (box !== 'margin') {
                    delta -= jQuery.css(
                      elem,
                      'border' + cssExpand[i] + 'Width',
                      true,
                      styles
                    );
                  }
                }
              }

              // Account for positive content-box scroll gutter when requested by providing computedVal
              if (!isBorderBox && computedVal >= 0) {
                // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
                // Assuming integer scroll gutter, subtract the rest and round down
                delta +=
                  Math.max(
                    0,
                    Math.ceil(
                      elem[
                        'offset' +
                          dimension[0].toUpperCase() +
                          dimension.slice(1)
                      ] -
                        computedVal -
                        delta -
                        extra -
                        0.5

                      // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
                      // Use an explicit zero to avoid NaN (gh-3964)
                    )
                  ) || 0;
              }

              return delta + marginDelta;
            }

            function getWidthOrHeight(elem, dimension, extra) {
              // Start with computed style
              var styles = getStyles(elem),
                // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
                // Fake content-box until we know it's needed to know the true value.
                boxSizingNeeded = !support.boxSizingReliable() || extra,
                isBorderBox =
                  boxSizingNeeded &&
                  jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
                valueIsBorderBox = isBorderBox,
                val = curCSS(elem, dimension, styles),
                offsetProp =
                  'offset' + dimension[0].toUpperCase() + dimension.slice(1);

              // Support: Firefox <=54
              // Return a confounding non-pixel value or feign ignorance, as appropriate.
              if (rnumnonpx.test(val)) {
                if (!extra) {
                  return val;
                }
                val = 'auto';
              }

              // Support: IE 9 - 11 only
              // Use offsetWidth/offsetHeight for when box sizing is unreliable.
              // In those cases, the computed value can be trusted to be border-box.
              if (
                ((!support.boxSizingReliable() && isBorderBox) ||
                  // Support: IE 10 - 11+, Edge 15 - 18+
                  // IE/Edge misreport `getComputedStyle` of table rows with width/height
                  // set in CSS while `offset*` properties report correct values.
                  // Interestingly, in some cases IE 9 doesn't suffer from this issue.
                  (!support.reliableTrDimensions() && nodeName(elem, 'tr')) ||
                  // Fall back to offsetWidth/offsetHeight when value is "auto"
                  // This happens for inline elements with no explicit setting (gh-3571)
                  val === 'auto' ||
                  // Support: Android <=4.1 - 4.3 only
                  // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
                  (!parseFloat(val) &&
                    jQuery.css(elem, 'display', false, styles) === 'inline')) &&
                // Make sure the element is visible & connected
                elem.getClientRects().length
              ) {
                isBorderBox =
                  jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';

                // Where available, offsetWidth/offsetHeight approximate border box dimensions.
                // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
                // retrieved value as a content box dimension.
                valueIsBorderBox = offsetProp in elem;
                if (valueIsBorderBox) {
                  val = elem[offsetProp];
                }
              }

              // Normalize "" and auto
              val = parseFloat(val) || 0;

              // Adjust for the element's box model
              return (
                val +
                boxModelAdjustment(
                  elem,
                  dimension,
                  extra || (isBorderBox ? 'border' : 'content'),
                  valueIsBorderBox,
                  styles,

                  // Provide the current computed size to request scroll gutter calculation (gh-3589)
                  val
                ) +
                'px'
              );
            }

            jQuery.extend({
              // Add in style property hooks for overriding the default
              // behavior of getting and setting a style property
              cssHooks: {
                opacity: {
                  get: function (elem, computed) {
                    if (computed) {
                      // We should always get a number back from opacity
                      var ret = curCSS(elem, 'opacity');
                      return ret === '' ? '1' : ret;
                    }
                  },
                },
              },

              // Don't automatically add "px" to these possibly-unitless properties
              cssNumber: {
                animationIterationCount: true,
                aspectRatio: true,
                borderImageSlice: true,
                columnCount: true,
                flexGrow: true,
                flexShrink: true,
                fontWeight: true,
                gridArea: true,
                gridColumn: true,
                gridColumnEnd: true,
                gridColumnStart: true,
                gridRow: true,
                gridRowEnd: true,
                gridRowStart: true,
                lineHeight: true,
                opacity: true,
                order: true,
                orphans: true,
                scale: true,
                widows: true,
                zIndex: true,
                zoom: true,

                // SVG-related
                fillOpacity: true,
                floodOpacity: true,
                stopOpacity: true,
                strokeMiterlimit: true,
                strokeOpacity: true,
              },

              // Add in properties whose names you wish to fix before
              // setting or getting the value
              cssProps: {},

              // Get and set the style property on a DOM Node
              style: function (elem, name, value, extra) {
                // Don't set styles on text and comment nodes
                if (
                  !elem ||
                  elem.nodeType === 3 ||
                  elem.nodeType === 8 ||
                  !elem.style
                ) {
                  return;
                }

                // Make sure that we're working with the right name
                var ret,
                  type,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name),
                  style = elem.style;

                // Make sure that we're working with the right name. We don't
                // want to query the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Gets hook for the prefixed version, then unprefixed version
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // Check if we're setting a value
                if (value !== undefined) {
                  type = typeof value;

                  // Convert "+=" or "-=" to relative numbers (trac-7345)
                  if (
                    type === 'string' &&
                    (ret = rcssNum.exec(value)) &&
                    ret[1]
                  ) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug trac-9237
                    type = 'number';
                  }

                  // Make sure that null and NaN values aren't set (trac-7116)
                  if (value == null || value !== value) {
                    return;
                  }

                  // If a number was passed in, add the unit (except for certain CSS properties)
                  // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
                  // "px" to a few hardcoded values.
                  if (type === 'number' && !isCustomProp) {
                    value +=
                      (ret && ret[3]) ||
                      (jQuery.cssNumber[origName] ? '' : 'px');
                  }

                  // background-* props affect original clone's values
                  if (
                    !support.clearCloneStyle &&
                    value === '' &&
                    name.indexOf('background') === 0
                  ) {
                    style[name] = 'inherit';
                  }

                  // If a hook was provided, use that value, otherwise just set the specified value
                  if (
                    !hooks ||
                    !('set' in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined
                  ) {
                    if (isCustomProp) {
                      style.setProperty(name, value);
                    } else {
                      style[name] = value;
                    }
                  }
                } else {
                  // If a hook was provided get the non-computed value from there
                  if (
                    hooks &&
                    'get' in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined
                  ) {
                    return ret;
                  }

                  // Otherwise just get the value from the style object
                  return style[name];
                }
              },

              css: function (elem, name, extra, styles) {
                var val,
                  num,
                  hooks,
                  origName = camelCase(name),
                  isCustomProp = rcustomProp.test(name);

                // Make sure that we're working with the right name. We don't
                // want to modify the value if it is a CSS custom property
                // since they are user-defined.
                if (!isCustomProp) {
                  name = finalPropName(origName);
                }

                // Try prefixed name followed by the unprefixed name
                hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

                // If a hook was provided get the computed value from there
                if (hooks && 'get' in hooks) {
                  val = hooks.get(elem, true, extra);
                }

                // Otherwise, if a way to get the computed value exists, use that
                if (val === undefined) {
                  val = curCSS(elem, name, styles);
                }

                // Convert "normal" to computed value
                if (val === 'normal' && name in cssNormalTransform) {
                  val = cssNormalTransform[name];
                }

                // Make numeric if forced or a qualifier was provided and val looks numeric
                if (extra === '' || extra) {
                  num = parseFloat(val);
                  return extra === true || isFinite(num) ? num || 0 : val;
                }

                return val;
              },
            });

            jQuery.each(['height', 'width'], function (_i, dimension) {
              jQuery.cssHooks[dimension] = {
                get: function (elem, computed, extra) {
                  if (computed) {
                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, 'display')) &&
                      // Support: Safari 8+
                      // Table columns in Safari have non-zero offsetWidth & zero
                      // getBoundingClientRect().width unless display is changed.
                      // Support: IE <=11 only
                      // Running getBoundingClientRect on a disconnected node
                      // in IE throws an error.
                      (!elem.getClientRects().length ||
                        !elem.getBoundingClientRect().width)
                      ? swap(elem, cssShow, function () {
                          return getWidthOrHeight(elem, dimension, extra);
                        })
                      : getWidthOrHeight(elem, dimension, extra);
                  }
                },

                set: function (elem, value, extra) {
                  var matches,
                    styles = getStyles(elem),
                    // Only read styles.position if the test has a chance to fail
                    // to avoid forcing a reflow.
                    scrollboxSizeBuggy =
                      !support.scrollboxSize() &&
                      styles.position === 'absolute',
                    // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
                    boxSizingNeeded = scrollboxSizeBuggy || extra,
                    isBorderBox =
                      boxSizingNeeded &&
                      jQuery.css(elem, 'boxSizing', false, styles) ===
                        'border-box',
                    subtract = extra
                      ? boxModelAdjustment(
                          elem,
                          dimension,
                          extra,
                          isBorderBox,
                          styles
                        )
                      : 0;

                  // Account for unreliable border-box dimensions by comparing offset* to computed and
                  // faking a content-box to get border and padding (gh-3699)
                  if (isBorderBox && scrollboxSizeBuggy) {
                    subtract -= Math.ceil(
                      elem[
                        'offset' +
                          dimension[0].toUpperCase() +
                          dimension.slice(1)
                      ] -
                        parseFloat(styles[dimension]) -
                        boxModelAdjustment(
                          elem,
                          dimension,
                          'border',
                          false,
                          styles
                        ) -
                        0.5
                    );
                  }

                  // Convert to pixels if value adjustment is needed
                  if (
                    subtract &&
                    (matches = rcssNum.exec(value)) &&
                    (matches[3] || 'px') !== 'px'
                  ) {
                    elem.style[dimension] = value;
                    value = jQuery.css(elem, dimension);
                  }

                  return setPositiveNumber(elem, value, subtract);
                },
              };
            });

            jQuery.cssHooks.marginLeft = addGetHookIf(
              support.reliableMarginLeft,
              function (elem, computed) {
                if (computed) {
                  return (
                    (parseFloat(curCSS(elem, 'marginLeft')) ||
                      elem.getBoundingClientRect().left -
                        swap(elem, { marginLeft: 0 }, function () {
                          return elem.getBoundingClientRect().left;
                        })) + 'px'
                  );
                }
              }
            );

            // These hooks are used by animate to expand properties
            jQuery.each(
              {
                margin: '',
                padding: '',
                border: 'Width',
              },
              function (prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                  expand: function (value) {
                    var i = 0,
                      expanded = {},
                      // Assumes a single number if not a string
                      parts =
                        typeof value === 'string' ? value.split(' ') : [value];

                    for (; i < 4; i++) {
                      expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                    }

                    return expanded;
                  },
                };

                if (prefix !== 'margin') {
                  jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
                }
              }
            );

            jQuery.fn.extend({
              css: function (name, value) {
                return access(
                  this,
                  function (elem, name, value) {
                    var styles,
                      len,
                      map = {},
                      i = 0;

                    if (Array.isArray(name)) {
                      styles = getStyles(elem);
                      len = name.length;

                      for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                      }

                      return map;
                    }

                    return value !== undefined
                      ? jQuery.style(elem, name, value)
                      : jQuery.css(elem, name);
                  },
                  name,
                  value,
                  arguments.length > 1
                );
              },
            });

            function Tween(elem, options, prop, end, easing) {
              return new Tween.prototype.init(elem, options, prop, end, easing);
            }
            jQuery.Tween = Tween;

            Tween.prototype = {
              constructor: Tween,
              init: function (elem, options, prop, end, easing, unit) {
                this.elem = elem;
                this.prop = prop;
                this.easing = easing || jQuery.easing._default;
                this.options = options;
                this.start = this.now = this.cur();
                this.end = end;
                this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
              },
              cur: function () {
                var hooks = Tween.propHooks[this.prop];

                return hooks && hooks.get
                  ? hooks.get(this)
                  : Tween.propHooks._default.get(this);
              },
              run: function (percent) {
                var eased,
                  hooks = Tween.propHooks[this.prop];

                if (this.options.duration) {
                  this.pos = eased = jQuery.easing[this.easing](
                    percent,
                    this.options.duration * percent,
                    0,
                    1,
                    this.options.duration
                  );
                } else {
                  this.pos = eased = percent;
                }
                this.now = (this.end - this.start) * eased + this.start;

                if (this.options.step) {
                  this.options.step.call(this.elem, this.now, this);
                }

                if (hooks && hooks.set) {
                  hooks.set(this);
                } else {
                  Tween.propHooks._default.set(this);
                }
                return this;
              },
            };

            Tween.prototype.init.prototype = Tween.prototype;

            Tween.propHooks = {
              _default: {
                get: function (tween) {
                  var result;

                  // Use a property on the element directly when it is not a DOM element,
                  // or when there is no matching style property that exists.
                  if (
                    tween.elem.nodeType !== 1 ||
                    (tween.elem[tween.prop] != null &&
                      tween.elem.style[tween.prop] == null)
                  ) {
                    return tween.elem[tween.prop];
                  }

                  // Passing an empty string as a 3rd parameter to .css will automatically
                  // attempt a parseFloat and fallback to a string if the parse fails.
                  // Simple values such as "10px" are parsed to Float;
                  // complex values such as "rotate(1rad)" are returned as-is.
                  result = jQuery.css(tween.elem, tween.prop, '');

                  // Empty strings, null, undefined and "auto" are converted to 0.
                  return !result || result === 'auto' ? 0 : result;
                },
                set: function (tween) {
                  // Use step hook for back compat.
                  // Use cssHook if its there.
                  // Use .style if available and use plain properties where available.
                  if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                  } else if (
                    tween.elem.nodeType === 1 &&
                    (jQuery.cssHooks[tween.prop] ||
                      tween.elem.style[finalPropName(tween.prop)] != null)
                  ) {
                    jQuery.style(
                      tween.elem,
                      tween.prop,
                      tween.now + tween.unit
                    );
                  } else {
                    tween.elem[tween.prop] = tween.now;
                  }
                },
              },
            };

            // Support: IE <=9 only
            // Panic based approach to setting things on disconnected nodes
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
              set: function (tween) {
                if (tween.elem.nodeType && tween.elem.parentNode) {
                  tween.elem[tween.prop] = tween.now;
                }
              },
            };

            jQuery.easing = {
              linear: function (p) {
                return p;
              },
              swing: function (p) {
                return 0.5 - Math.cos(p * Math.PI) / 2;
              },
              _default: 'swing',
            };

            jQuery.fx = Tween.prototype.init;

            // Back compat <1.8 extension point
            jQuery.fx.step = {};

            var fxNow,
              inProgress,
              rfxtypes = /^(?:toggle|show|hide)$/,
              rrun = /queueHooks$/;

            function schedule() {
              if (inProgress) {
                if (document.hidden === false && window.requestAnimationFrame) {
                  window.requestAnimationFrame(schedule);
                } else {
                  window.setTimeout(schedule, jQuery.fx.interval);
                }

                jQuery.fx.tick();
              }
            }

            // Animations created synchronously will run synchronously
            function createFxNow() {
              window.setTimeout(function () {
                fxNow = undefined;
              });
              return (fxNow = Date.now());
            }

            // Generate parameters to create a standard animation
            function genFx(type, includeWidth) {
              var which,
                i = 0,
                attrs = { height: type };

              // If we include width, step value is 1 to do all cssExpand values,
              // otherwise step value is 2 to skip over Left and Right
              includeWidth = includeWidth ? 1 : 0;
              for (; i < 4; i += 2 - includeWidth) {
                which = cssExpand[i];
                attrs['margin' + which] = attrs['padding' + which] = type;
              }

              if (includeWidth) {
                attrs.opacity = attrs.width = type;
              }

              return attrs;
            }

            function createTween(value, prop, animation) {
              var tween,
                collection = (Animation.tweeners[prop] || []).concat(
                  Animation.tweeners['*']
                ),
                index = 0,
                length = collection.length;
              for (; index < length; index++) {
                if ((tween = collection[index].call(animation, prop, value))) {
                  // We're done with this property
                  return tween;
                }
              }
            }

            function defaultPrefilter(elem, props, opts) {
              var prop,
                value,
                toggle,
                hooks,
                oldfire,
                propTween,
                restoreDisplay,
                display,
                isBox = 'width' in props || 'height' in props,
                anim = this,
                orig = {},
                style = elem.style,
                hidden = elem.nodeType && isHiddenWithinTree(elem),
                dataShow = dataPriv.get(elem, 'fxshow');

              // Queue-skipping animations hijack the fx hooks
              if (!opts.queue) {
                hooks = jQuery._queueHooks(elem, 'fx');
                if (hooks.unqueued == null) {
                  hooks.unqueued = 0;
                  oldfire = hooks.empty.fire;
                  hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                      oldfire();
                    }
                  };
                }
                hooks.unqueued++;

                anim.always(function () {
                  // Ensure the complete handler is called before this completes
                  anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                      hooks.empty.fire();
                    }
                  });
                });
              }

              // Detect show/hide animations
              for (prop in props) {
                value = props[prop];
                if (rfxtypes.test(value)) {
                  delete props[prop];
                  toggle = toggle || value === 'toggle';
                  if (value === (hidden ? 'hide' : 'show')) {
                    // Pretend to be hidden if this is a "show" and
                    // there is still data from a stopped show/hide
                    if (
                      value === 'show' &&
                      dataShow &&
                      dataShow[prop] !== undefined
                    ) {
                      hidden = true;

                      // Ignore all other no-op show/hide data
                    } else {
                      continue;
                    }
                  }
                  orig[prop] =
                    (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
                }
              }

              // Bail out if this is a no-op like .hide().hide()
              propTween = !jQuery.isEmptyObject(props);
              if (!propTween && jQuery.isEmptyObject(orig)) {
                return;
              }

              // Restrict "overflow" and "display" styles during box animations
              if (isBox && elem.nodeType === 1) {
                // Support: IE <=9 - 11, Edge 12 - 15
                // Record all 3 overflow attributes because IE does not infer the shorthand
                // from identically-valued overflowX and overflowY and Edge just mirrors
                // the overflowX value there.
                opts.overflow = [
                  style.overflow,
                  style.overflowX,
                  style.overflowY,
                ];

                // Identify a display type, preferring old show/hide data over the CSS cascade
                restoreDisplay = dataShow && dataShow.display;
                if (restoreDisplay == null) {
                  restoreDisplay = dataPriv.get(elem, 'display');
                }
                display = jQuery.css(elem, 'display');
                if (display === 'none') {
                  if (restoreDisplay) {
                    display = restoreDisplay;
                  } else {
                    // Get nonempty value(s) by temporarily forcing visibility
                    showHide([elem], true);
                    restoreDisplay = elem.style.display || restoreDisplay;
                    display = jQuery.css(elem, 'display');
                    showHide([elem]);
                  }
                }

                // Animate inline elements as inline-block
                if (
                  display === 'inline' ||
                  (display === 'inline-block' && restoreDisplay != null)
                ) {
                  if (jQuery.css(elem, 'float') === 'none') {
                    // Restore the original display value at the end of pure show/hide animations
                    if (!propTween) {
                      anim.done(function () {
                        style.display = restoreDisplay;
                      });
                      if (restoreDisplay == null) {
                        display = style.display;
                        restoreDisplay = display === 'none' ? '' : display;
                      }
                    }
                    style.display = 'inline-block';
                  }
                }
              }

              if (opts.overflow) {
                style.overflow = 'hidden';
                anim.always(function () {
                  style.overflow = opts.overflow[0];
                  style.overflowX = opts.overflow[1];
                  style.overflowY = opts.overflow[2];
                });
              }

              // Implement show/hide animations
              propTween = false;
              for (prop in orig) {
                // General show/hide setup for this element animation
                if (!propTween) {
                  if (dataShow) {
                    if ('hidden' in dataShow) {
                      hidden = dataShow.hidden;
                    }
                  } else {
                    dataShow = dataPriv.access(elem, 'fxshow', {
                      display: restoreDisplay,
                    });
                  }

                  // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
                  if (toggle) {
                    dataShow.hidden = !hidden;
                  }

                  // Show elements before animating them
                  if (hidden) {
                    showHide([elem], true);
                  }

                  /* eslint-disable no-loop-func */

                  anim.done(function () {
                    /* eslint-enable no-loop-func */

                    // The final step of a "hide" animation is actually hiding the element
                    if (!hidden) {
                      showHide([elem]);
                    }
                    dataPriv.remove(elem, 'fxshow');
                    for (prop in orig) {
                      jQuery.style(elem, prop, orig[prop]);
                    }
                  });
                }

                // Per-property setup
                propTween = createTween(
                  hidden ? dataShow[prop] : 0,
                  prop,
                  anim
                );
                if (!(prop in dataShow)) {
                  dataShow[prop] = propTween.start;
                  if (hidden) {
                    propTween.end = propTween.start;
                    propTween.start = 0;
                  }
                }
              }
            }

            function propFilter(props, specialEasing) {
              var index, name, easing, value, hooks;

              // camelCase, specialEasing and expand cssHook pass
              for (index in props) {
                name = camelCase(index);
                easing = specialEasing[name];
                value = props[index];
                if (Array.isArray(value)) {
                  easing = value[1];
                  value = props[index] = value[0];
                }

                if (index !== name) {
                  props[name] = value;
                  delete props[index];
                }

                hooks = jQuery.cssHooks[name];
                if (hooks && 'expand' in hooks) {
                  value = hooks.expand(value);
                  delete props[name];

                  // Not quite $.extend, this won't overwrite existing keys.
                  // Reusing 'index' because we have the correct "name"
                  for (index in value) {
                    if (!(index in props)) {
                      props[index] = value[index];
                      specialEasing[index] = easing;
                    }
                  }
                } else {
                  specialEasing[name] = easing;
                }
              }
            }

            function Animation(elem, properties, options) {
              var result,
                stopped,
                index = 0,
                length = Animation.prefilters.length,
                deferred = jQuery.Deferred().always(function () {
                  // Don't match elem in the :animated selector
                  delete tick.elem;
                }),
                tick = function () {
                  if (stopped) {
                    return false;
                  }
                  var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(
                      0,
                      animation.startTime + animation.duration - currentTime
                    ),
                    // Support: Android 2.3 only
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                  for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                  }

                  deferred.notifyWith(elem, [animation, percent, remaining]);

                  // If there's more to do, yield
                  if (percent < 1 && length) {
                    return remaining;
                  }

                  // If this was an empty animation, synthesize a final progress notification
                  if (!length) {
                    deferred.notifyWith(elem, [animation, 1, 0]);
                  }

                  // Resolve the animation and report its conclusion
                  deferred.resolveWith(elem, [animation]);
                  return false;
                },
                animation = deferred.promise({
                  elem: elem,
                  props: jQuery.extend({}, properties),
                  opts: jQuery.extend(
                    true,
                    {
                      specialEasing: {},
                      easing: jQuery.easing._default,
                    },
                    options
                  ),
                  originalProperties: properties,
                  originalOptions: options,
                  startTime: fxNow || createFxNow(),
                  duration: options.duration,
                  tweens: [],
                  createTween: function (prop, end) {
                    var tween = jQuery.Tween(
                      elem,
                      animation.opts,
                      prop,
                      end,
                      animation.opts.specialEasing[prop] ||
                        animation.opts.easing
                    );
                    animation.tweens.push(tween);
                    return tween;
                  },
                  stop: function (gotoEnd) {
                    var index = 0,
                      // If we are going to the end, we want to run all the tweens
                      // otherwise we skip this part
                      length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                      return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                      animation.tweens[index].run(1);
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if (gotoEnd) {
                      deferred.notifyWith(elem, [animation, 1, 0]);
                      deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                      deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                  },
                }),
                props = animation.props;

              propFilter(props, animation.opts.specialEasing);

              for (; index < length; index++) {
                result = Animation.prefilters[index].call(
                  animation,
                  elem,
                  props,
                  animation.opts
                );
                if (result) {
                  if (isFunction(result.stop)) {
                    jQuery._queueHooks(
                      animation.elem,
                      animation.opts.queue
                    ).stop = result.stop.bind(result);
                  }
                  return result;
                }
              }

              jQuery.map(props, createTween, animation);

              if (isFunction(animation.opts.start)) {
                animation.opts.start.call(elem, animation);
              }

              // Attach callbacks from options
              animation
                .progress(animation.opts.progress)
                .done(animation.opts.done, animation.opts.complete)
                .fail(animation.opts.fail)
                .always(animation.opts.always);

              jQuery.fx.timer(
                jQuery.extend(tick, {
                  elem: elem,
                  anim: animation,
                  queue: animation.opts.queue,
                })
              );

              return animation;
            }

            jQuery.Animation = jQuery.extend(Animation, {
              tweeners: {
                '*': [
                  function (prop, value) {
                    var tween = this.createTween(prop, value);
                    adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                    return tween;
                  },
                ],
              },

              tweener: function (props, callback) {
                if (isFunction(props)) {
                  callback = props;
                  props = ['*'];
                } else {
                  props = props.match(rnothtmlwhite);
                }

                var prop,
                  index = 0,
                  length = props.length;

                for (; index < length; index++) {
                  prop = props[index];
                  Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                  Animation.tweeners[prop].unshift(callback);
                }
              },

              prefilters: [defaultPrefilter],

              prefilter: function (callback, prepend) {
                if (prepend) {
                  Animation.prefilters.unshift(callback);
                } else {
                  Animation.prefilters.push(callback);
                }
              },
            });

            jQuery.speed = function (speed, easing, fn) {
              var opt =
                speed && typeof speed === 'object'
                  ? jQuery.extend({}, speed)
                  : {
                      complete:
                        fn || (!fn && easing) || (isFunction(speed) && speed),
                      duration: speed,
                      easing:
                        (fn && easing) ||
                        (easing && !isFunction(easing) && easing),
                    };

              // Go to the end state if fx are off
              if (jQuery.fx.off) {
                opt.duration = 0;
              } else {
                if (typeof opt.duration !== 'number') {
                  if (opt.duration in jQuery.fx.speeds) {
                    opt.duration = jQuery.fx.speeds[opt.duration];
                  } else {
                    opt.duration = jQuery.fx.speeds._default;
                  }
                }
              }

              // Normalize opt.queue - true/undefined/null -> "fx"
              if (opt.queue == null || opt.queue === true) {
                opt.queue = 'fx';
              }

              // Queueing
              opt.old = opt.complete;

              opt.complete = function () {
                if (isFunction(opt.old)) {
                  opt.old.call(this);
                }

                if (opt.queue) {
                  jQuery.dequeue(this, opt.queue);
                }
              };

              return opt;
            };

            jQuery.fn.extend({
              fadeTo: function (speed, to, easing, callback) {
                // Show any hidden elements after setting opacity to 0
                return (
                  this.filter(isHiddenWithinTree)
                    .css('opacity', 0)
                    .show()

                    // Animate to the value specified
                    .end()
                    .animate({ opacity: to }, speed, easing, callback)
                );
              },
              animate: function (prop, speed, easing, callback) {
                var empty = jQuery.isEmptyObject(prop),
                  optall = jQuery.speed(speed, easing, callback),
                  doAnimation = function () {
                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || dataPriv.get(this, 'finish')) {
                      anim.stop(true);
                    }
                  };

                doAnimation.finish = doAnimation;

                return empty || optall.queue === false
                  ? this.each(doAnimation)
                  : this.queue(optall.queue, doAnimation);
              },
              stop: function (type, clearQueue, gotoEnd) {
                var stopQueue = function (hooks) {
                  var stop = hooks.stop;
                  delete hooks.stop;
                  stop(gotoEnd);
                };

                if (typeof type !== 'string') {
                  gotoEnd = clearQueue;
                  clearQueue = type;
                  type = undefined;
                }
                if (clearQueue) {
                  this.queue(type || 'fx', []);
                }

                return this.each(function () {
                  var dequeue = true,
                    index = type != null && type + 'queueHooks',
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                  if (index) {
                    if (data[index] && data[index].stop) {
                      stopQueue(data[index]);
                    }
                  } else {
                    for (index in data) {
                      if (data[index] && data[index].stop && rrun.test(index)) {
                        stopQueue(data[index]);
                      }
                    }
                  }

                  for (index = timers.length; index--; ) {
                    if (
                      timers[index].elem === this &&
                      (type == null || timers[index].queue === type)
                    ) {
                      timers[index].anim.stop(gotoEnd);
                      dequeue = false;
                      timers.splice(index, 1);
                    }
                  }

                  // Start the next in the queue if the last step wasn't forced.
                  // Timers currently will call their complete callbacks, which
                  // will dequeue but only if they were gotoEnd.
                  if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                  }
                });
              },
              finish: function (type) {
                if (type !== false) {
                  type = type || 'fx';
                }
                return this.each(function () {
                  var index,
                    data = dataPriv.get(this),
                    queue = data[type + 'queue'],
                    hooks = data[type + 'queueHooks'],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                  // Enable finishing flag on private data
                  data.finish = true;

                  // Empty the queue first
                  jQuery.queue(this, type, []);

                  if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                  }

                  // Look for any active animations, and finish them
                  for (index = timers.length; index--; ) {
                    if (
                      timers[index].elem === this &&
                      timers[index].queue === type
                    ) {
                      timers[index].anim.stop(true);
                      timers.splice(index, 1);
                    }
                  }

                  // Look for any animations in the old queue and finish them
                  for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                      queue[index].finish.call(this);
                    }
                  }

                  // Turn off finishing flag
                  delete data.finish;
                });
              },
            });

            jQuery.each(['toggle', 'show', 'hide'], function (_i, name) {
              var cssFn = jQuery.fn[name];
              jQuery.fn[name] = function (speed, easing, callback) {
                return speed == null || typeof speed === 'boolean'
                  ? cssFn.apply(this, arguments)
                  : this.animate(genFx(name, true), speed, easing, callback);
              };
            });

            // Generate shortcuts for custom animations
            jQuery.each(
              {
                slideDown: genFx('show'),
                slideUp: genFx('hide'),
                slideToggle: genFx('toggle'),
                fadeIn: { opacity: 'show' },
                fadeOut: { opacity: 'hide' },
                fadeToggle: { opacity: 'toggle' },
              },
              function (name, props) {
                jQuery.fn[name] = function (speed, easing, callback) {
                  return this.animate(props, speed, easing, callback);
                };
              }
            );

            jQuery.timers = [];
            jQuery.fx.tick = function () {
              var timer,
                i = 0,
                timers = jQuery.timers;

              fxNow = Date.now();

              for (; i < timers.length; i++) {
                timer = timers[i];

                // Run the timer and safely remove it when done (allowing for external removal)
                if (!timer() && timers[i] === timer) {
                  timers.splice(i--, 1);
                }
              }

              if (!timers.length) {
                jQuery.fx.stop();
              }
              fxNow = undefined;
            };

            jQuery.fx.timer = function (timer) {
              jQuery.timers.push(timer);
              jQuery.fx.start();
            };

            jQuery.fx.interval = 13;
            jQuery.fx.start = function () {
              if (inProgress) {
                return;
              }

              inProgress = true;
              schedule();
            };

            jQuery.fx.stop = function () {
              inProgress = null;
            };

            jQuery.fx.speeds = {
              slow: 600,
              fast: 200,

              // Default speed
              _default: 400,
            };

            // Based off of the plugin by Clint Helfers, with permission.
            jQuery.fn.delay = function (time, type) {
              time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
              type = type || 'fx';

              return this.queue(type, function (next, hooks) {
                var timeout = window.setTimeout(next, time);
                hooks.stop = function () {
                  window.clearTimeout(timeout);
                };
              });
            };

            (function () {
              var input = document.createElement('input'),
                select = document.createElement('select'),
                opt = select.appendChild(document.createElement('option'));

              input.type = 'checkbox';

              // Support: Android <=4.3 only
              // Default value for a checkbox should be "on"
              support.checkOn = input.value !== '';

              // Support: IE <=11 only
              // Must access selectedIndex to make default options select
              support.optSelected = opt.selected;

              // Support: IE <=11 only
              // An input loses its value after becoming a radio
              input = document.createElement('input');
              input.value = 't';
              input.type = 'radio';
              support.radioValue = input.value === 't';
            })();

            var boolHook,
              attrHandle = jQuery.expr.attrHandle;

            jQuery.fn.extend({
              attr: function (name, value) {
                return access(
                  this,
                  jQuery.attr,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeAttr: function (name) {
                return this.each(function () {
                  jQuery.removeAttr(this, name);
                });
              },
            });

            jQuery.extend({
              attr: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set attributes on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                // Fallback to prop when attributes are not supported
                if (typeof elem.getAttribute === 'undefined') {
                  return jQuery.prop(elem, name, value);
                }

                // Attribute hooks are determined by the lowercase version
                // Grab necessary hook if one is defined
                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  hooks =
                    jQuery.attrHooks[name.toLowerCase()] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
                }

                if (value !== undefined) {
                  if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                  }

                  if (
                    hooks &&
                    'set' in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  elem.setAttribute(name, value + '');
                  return value;
                }

                if (
                  hooks &&
                  'get' in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                ret = jQuery.find.attr(elem, name);

                // Non-existent attributes return null, we normalize to undefined
                return ret == null ? undefined : ret;
              },

              attrHooks: {
                type: {
                  set: function (elem, value) {
                    if (
                      !support.radioValue &&
                      value === 'radio' &&
                      nodeName(elem, 'input')
                    ) {
                      var val = elem.value;
                      elem.setAttribute('type', value);
                      if (val) {
                        elem.value = val;
                      }
                      return value;
                    }
                  },
                },
              },

              removeAttr: function (elem, value) {
                var name,
                  i = 0,
                  // Attribute names can contain non-HTML whitespace characters
                  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
                  attrNames = value && value.match(rnothtmlwhite);

                if (attrNames && elem.nodeType === 1) {
                  while ((name = attrNames[i++])) {
                    elem.removeAttribute(name);
                  }
                }
              },
            });

            // Hooks for boolean attributes
            boolHook = {
              set: function (elem, value, name) {
                if (value === false) {
                  // Remove boolean attributes when set to false
                  jQuery.removeAttr(elem, name);
                } else {
                  elem.setAttribute(name, name);
                }
                return name;
              },
            };

            jQuery.each(
              jQuery.expr.match.bool.source.match(/\w+/g),
              function (_i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;

                attrHandle[name] = function (elem, name, isXML) {
                  var ret,
                    handle,
                    lowercaseName = name.toLowerCase();

                  if (!isXML) {
                    // Avoid an infinite loop by temporarily removing this function from the getter
                    handle = attrHandle[lowercaseName];
                    attrHandle[lowercaseName] = ret;
                    ret =
                      getter(elem, name, isXML) != null ? lowercaseName : null;
                    attrHandle[lowercaseName] = handle;
                  }
                  return ret;
                };
              }
            );

            var rfocusable = /^(?:input|select|textarea|button)$/i,
              rclickable = /^(?:a|area)$/i;

            jQuery.fn.extend({
              prop: function (name, value) {
                return access(
                  this,
                  jQuery.prop,
                  name,
                  value,
                  arguments.length > 1
                );
              },

              removeProp: function (name) {
                return this.each(function () {
                  delete this[jQuery.propFix[name] || name];
                });
              },
            });

            jQuery.extend({
              prop: function (elem, name, value) {
                var ret,
                  hooks,
                  nType = elem.nodeType;

                // Don't get/set properties on text, comment and attribute nodes
                if (nType === 3 || nType === 8 || nType === 2) {
                  return;
                }

                if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                  // Fix name and attach hooks
                  name = jQuery.propFix[name] || name;
                  hooks = jQuery.propHooks[name];
                }

                if (value !== undefined) {
                  if (
                    hooks &&
                    'set' in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined
                  ) {
                    return ret;
                  }

                  return (elem[name] = value);
                }

                if (
                  hooks &&
                  'get' in hooks &&
                  (ret = hooks.get(elem, name)) !== null
                ) {
                  return ret;
                }

                return elem[name];
              },

              propHooks: {
                tabIndex: {
                  get: function (elem) {
                    // Support: IE <=9 - 11 only
                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // Use proper attribute retrieval (trac-12072)
                    var tabindex = jQuery.find.attr(elem, 'tabindex');

                    if (tabindex) {
                      return parseInt(tabindex, 10);
                    }

                    if (
                      rfocusable.test(elem.nodeName) ||
                      (rclickable.test(elem.nodeName) && elem.href)
                    ) {
                      return 0;
                    }

                    return -1;
                  },
                },
              },

              propFix: {
                for: 'htmlFor',
                class: 'className',
              },
            });

            // Support: IE <=11 only
            // Accessing the selectedIndex property
            // forces the browser to respect setting selected
            // on the option
            // The getter ensures a default option is selected
            // when in an optgroup
            // eslint rule "no-unused-expressions" is disabled for this code
            // since it considers such accessions noop
            if (!support.optSelected) {
              jQuery.propHooks.selected = {
                get: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                  }
                  return null;
                },
                set: function (elem) {
                  /* eslint no-unused-expressions: "off" */

                  var parent = elem.parentNode;
                  if (parent) {
                    parent.selectedIndex;

                    if (parent.parentNode) {
                      parent.parentNode.selectedIndex;
                    }
                  }
                },
              };
            }

            jQuery.each(
              [
                'tabIndex',
                'readOnly',
                'maxLength',
                'cellSpacing',
                'cellPadding',
                'rowSpan',
                'colSpan',
                'useMap',
                'frameBorder',
                'contentEditable',
              ],
              function () {
                jQuery.propFix[this.toLowerCase()] = this;
              }
            );

            // Strip and collapse whitespace according to HTML spec
            // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
            function stripAndCollapse(value) {
              var tokens = value.match(rnothtmlwhite) || [];
              return tokens.join(' ');
            }

            function getClass(elem) {
              return (elem.getAttribute && elem.getAttribute('class')) || '';
            }

            function classesToArray(value) {
              if (Array.isArray(value)) {
                return value;
              }
              if (typeof value === 'string') {
                return value.match(rnothtmlwhite) || [];
              }
              return [];
            }

            jQuery.fn.extend({
              addClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                  });
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);
                    cur =
                      this.nodeType === 1 &&
                      ' ' + stripAndCollapse(curValue) + ' ';

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];
                        if (cur.indexOf(' ' + className + ' ') < 0) {
                          cur += className + ' ';
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute('class', finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              removeClass: function (value) {
                var classNames, cur, curValue, className, i, finalValue;

                if (isFunction(value)) {
                  return this.each(function (j) {
                    jQuery(this).removeClass(
                      value.call(this, j, getClass(this))
                    );
                  });
                }

                if (!arguments.length) {
                  return this.attr('class', '');
                }

                classNames = classesToArray(value);

                if (classNames.length) {
                  return this.each(function () {
                    curValue = getClass(this);

                    // This expression is here for better compressibility (see addClass)
                    cur =
                      this.nodeType === 1 &&
                      ' ' + stripAndCollapse(curValue) + ' ';

                    if (cur) {
                      for (i = 0; i < classNames.length; i++) {
                        className = classNames[i];

                        // Remove *all* instances
                        while (cur.indexOf(' ' + className + ' ') > -1) {
                          cur = cur.replace(' ' + className + ' ', ' ');
                        }
                      }

                      // Only assign if different to avoid unneeded rendering.
                      finalValue = stripAndCollapse(cur);
                      if (curValue !== finalValue) {
                        this.setAttribute('class', finalValue);
                      }
                    }
                  });
                }

                return this;
              },

              toggleClass: function (value, stateVal) {
                var classNames,
                  className,
                  i,
                  self,
                  type = typeof value,
                  isValidValue = type === 'string' || Array.isArray(value);

                if (isFunction(value)) {
                  return this.each(function (i) {
                    jQuery(this).toggleClass(
                      value.call(this, i, getClass(this), stateVal),
                      stateVal
                    );
                  });
                }

                if (typeof stateVal === 'boolean' && isValidValue) {
                  return stateVal
                    ? this.addClass(value)
                    : this.removeClass(value);
                }

                classNames = classesToArray(value);

                return this.each(function () {
                  if (isValidValue) {
                    // Toggle individual class names
                    self = jQuery(this);

                    for (i = 0; i < classNames.length; i++) {
                      className = classNames[i];

                      // Check each className given, space separated list
                      if (self.hasClass(className)) {
                        self.removeClass(className);
                      } else {
                        self.addClass(className);
                      }
                    }

                    // Toggle whole class name
                  } else if (value === undefined || type === 'boolean') {
                    className = getClass(this);
                    if (className) {
                      // Store className if set
                      dataPriv.set(this, '__className__', className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) {
                      this.setAttribute(
                        'class',
                        className || value === false
                          ? ''
                          : dataPriv.get(this, '__className__') || ''
                      );
                    }
                  }
                });
              },

              hasClass: function (selector) {
                var className,
                  elem,
                  i = 0;

                className = ' ' + selector + ' ';
                while ((elem = this[i++])) {
                  if (
                    elem.nodeType === 1 &&
                    (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(
                      className
                    ) > -1
                  ) {
                    return true;
                  }
                }

                return false;
              },
            });

            var rreturn = /\r/g;

            jQuery.fn.extend({
              val: function (value) {
                var hooks,
                  ret,
                  valueIsFunction,
                  elem = this[0];

                if (!arguments.length) {
                  if (elem) {
                    hooks =
                      jQuery.valHooks[elem.type] ||
                      jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (
                      hooks &&
                      'get' in hooks &&
                      (ret = hooks.get(elem, 'value')) !== undefined
                    ) {
                      return ret;
                    }

                    ret = elem.value;

                    // Handle most common string cases
                    if (typeof ret === 'string') {
                      return ret.replace(rreturn, '');
                    }

                    // Handle cases where value is null/undef or number
                    return ret == null ? '' : ret;
                  }

                  return;
                }

                valueIsFunction = isFunction(value);

                return this.each(function (i) {
                  var val;

                  if (this.nodeType !== 1) {
                    return;
                  }

                  if (valueIsFunction) {
                    val = value.call(this, i, jQuery(this).val());
                  } else {
                    val = value;
                  }

                  // Treat null/undefined as ""; convert numbers to string
                  if (val == null) {
                    val = '';
                  } else if (typeof val === 'number') {
                    val += '';
                  } else if (Array.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                      return value == null ? '' : value + '';
                    });
                  }

                  hooks =
                    jQuery.valHooks[this.type] ||
                    jQuery.valHooks[this.nodeName.toLowerCase()];

                  // If set returns undefined, fall back to normal setting
                  if (
                    !hooks ||
                    !('set' in hooks) ||
                    hooks.set(this, val, 'value') === undefined
                  ) {
                    this.value = val;
                  }
                });
              },
            });

            jQuery.extend({
              valHooks: {
                option: {
                  get: function (elem) {
                    var val = jQuery.find.attr(elem, 'value');
                    return val != null
                      ? val
                      : // Support: IE <=10 - 11 only
                        // option.text throws exceptions (trac-14686, trac-14858)
                        // Strip and collapse whitespace
                        // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
                        stripAndCollapse(jQuery.text(elem));
                  },
                },
                select: {
                  get: function (elem) {
                    var value,
                      option,
                      i,
                      options = elem.options,
                      index = elem.selectedIndex,
                      one = elem.type === 'select-one',
                      values = one ? null : [],
                      max = one ? index + 1 : options.length;

                    if (index < 0) {
                      i = max;
                    } else {
                      i = one ? index : 0;
                    }

                    // Loop through all the selected options
                    for (; i < max; i++) {
                      option = options[i];

                      // Support: IE <=9 only
                      // IE8-9 doesn't update selected after form reset (trac-2551)
                      if (
                        (option.selected || i === index) &&
                        // Don't return options that are disabled or in a disabled optgroup
                        !option.disabled &&
                        (!option.parentNode.disabled ||
                          !nodeName(option.parentNode, 'optgroup'))
                      ) {
                        // Get the specific value for the option
                        value = jQuery(option).val();

                        // We don't need an array for one selects
                        if (one) {
                          return value;
                        }

                        // Multi-Selects return an array
                        values.push(value);
                      }
                    }

                    return values;
                  },

                  set: function (elem, value) {
                    var optionSet,
                      option,
                      options = elem.options,
                      values = jQuery.makeArray(value),
                      i = options.length;

                    while (i--) {
                      option = options[i];

                      /* eslint-disable no-cond-assign */

                      if (
                        (option.selected =
                          jQuery.inArray(
                            jQuery.valHooks.option.get(option),
                            values
                          ) > -1)
                      ) {
                        optionSet = true;
                      }

                      /* eslint-enable no-cond-assign */
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                      elem.selectedIndex = -1;
                    }
                    return values;
                  },
                },
              },
            });

            // Radios and checkboxes getter/setter
            jQuery.each(['radio', 'checkbox'], function () {
              jQuery.valHooks[this] = {
                set: function (elem, value) {
                  if (Array.isArray(value)) {
                    return (elem.checked =
                      jQuery.inArray(jQuery(elem).val(), value) > -1);
                  }
                },
              };
              if (!support.checkOn) {
                jQuery.valHooks[this].get = function (elem) {
                  return elem.getAttribute('value') === null
                    ? 'on'
                    : elem.value;
                };
              }
            });

            // Return jQuery for attributes-only inclusion
            var location = window.location;

            var nonce = { guid: Date.now() };

            var rquery = /\?/;

            // Cross-browser xml parsing
            jQuery.parseXML = function (data) {
              var xml, parserErrorElem;
              if (!data || typeof data !== 'string') {
                return null;
              }

              // Support: IE 9 - 11 only
              // IE throws on parseFromString with invalid input.
              try {
                xml = new window.DOMParser().parseFromString(data, 'text/xml');
              } catch (e) {}

              parserErrorElem =
                xml && xml.getElementsByTagName('parsererror')[0];
              if (!xml || parserErrorElem) {
                jQuery.error(
                  'Invalid XML: ' +
                    (parserErrorElem
                      ? jQuery
                          .map(parserErrorElem.childNodes, function (el) {
                            return el.textContent;
                          })
                          .join('\n')
                      : data)
                );
              }
              return xml;
            };

            var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
              stopPropagationCallback = function (e) {
                e.stopPropagation();
              };

            jQuery.extend(jQuery.event, {
              trigger: function (event, data, elem, onlyHandlers) {
                var i,
                  cur,
                  tmp,
                  bubbleType,
                  ontype,
                  handle,
                  special,
                  lastElement,
                  eventPath = [elem || document],
                  type = hasOwn.call(event, 'type') ? event.type : event,
                  namespaces = hasOwn.call(event, 'namespace')
                    ? event.namespace.split('.')
                    : [];

                cur = lastElement = tmp = elem = elem || document;

                // Don't do events on text and comment nodes
                if (elem.nodeType === 3 || elem.nodeType === 8) {
                  return;
                }

                // focus/blur morphs to focusin/out; ensure we're not firing them right now
                if (rfocusMorph.test(type + jQuery.event.triggered)) {
                  return;
                }

                if (type.indexOf('.') > -1) {
                  // Namespaced trigger; create a regexp to match event type in handle()
                  namespaces = type.split('.');
                  type = namespaces.shift();
                  namespaces.sort();
                }
                ontype = type.indexOf(':') < 0 && 'on' + type;

                // Caller can pass in a jQuery.Event object, Object, or just an event type string
                event = event[jQuery.expando]
                  ? event
                  : new jQuery.Event(type, typeof event === 'object' && event);

                // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
                event.isTrigger = onlyHandlers ? 2 : 3;
                event.namespace = namespaces.join('.');
                event.rnamespace = event.namespace
                  ? new RegExp(
                      '(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)'
                    )
                  : null;

                // Clean up the event in case it is being reused
                event.result = undefined;
                if (!event.target) {
                  event.target = elem;
                }

                // Clone any incoming data and prepend the event, creating the handler arg list
                data = data == null ? [event] : jQuery.makeArray(data, [event]);

                // Allow special events to draw outside the lines
                special = jQuery.event.special[type] || {};
                if (
                  !onlyHandlers &&
                  special.trigger &&
                  special.trigger.apply(elem, data) === false
                ) {
                  return;
                }

                // Determine event propagation path in advance, per W3C events spec (trac-9951)
                // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
                if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
                  bubbleType = special.delegateType || type;
                  if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                  }
                  for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                  }

                  // Only add window if we got to document (e.g., not plain obj or detached DOM)
                  if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(
                      tmp.defaultView || tmp.parentWindow || window
                    );
                  }
                }

                // Fire handlers on the event path
                i = 0;
                while (
                  (cur = eventPath[i++]) &&
                  !event.isPropagationStopped()
                ) {
                  lastElement = cur;
                  event.type = i > 1 ? bubbleType : special.bindType || type;

                  // jQuery handler
                  handle =
                    (dataPriv.get(cur, 'events') || Object.create(null))[
                      event.type
                    ] && dataPriv.get(cur, 'handle');
                  if (handle) {
                    handle.apply(cur, data);
                  }

                  // Native handler
                  handle = ontype && cur[ontype];
                  if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                      event.preventDefault();
                    }
                  }
                }
                event.type = type;

                // If nobody prevented the default action, do it now
                if (!onlyHandlers && !event.isDefaultPrevented()) {
                  if (
                    (!special._default ||
                      special._default.apply(eventPath.pop(), data) ===
                        false) &&
                    acceptData(elem)
                  ) {
                    // Call a native DOM method on the target with the same name as the event.
                    // Don't do default actions on window, that's where global variables be (trac-6170)
                    if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                      // Don't re-trigger an onFOO event when we call its FOO() method
                      tmp = elem[ontype];

                      if (tmp) {
                        elem[ontype] = null;
                      }

                      // Prevent re-triggering of the same event, since we already bubbled it above
                      jQuery.event.triggered = type;

                      if (event.isPropagationStopped()) {
                        lastElement.addEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      elem[type]();

                      if (event.isPropagationStopped()) {
                        lastElement.removeEventListener(
                          type,
                          stopPropagationCallback
                        );
                      }

                      jQuery.event.triggered = undefined;

                      if (tmp) {
                        elem[ontype] = tmp;
                      }
                    }
                  }
                }

                return event.result;
              },

              // Piggyback on a donor event to simulate a different one
              // Used only for `focus(in | out)` events
              simulate: function (type, elem, event) {
                var e = jQuery.extend(new jQuery.Event(), event, {
                  type: type,
                  isSimulated: true,
                });

                jQuery.event.trigger(e, null, elem);
              },
            });

            jQuery.fn.extend({
              trigger: function (type, data) {
                return this.each(function () {
                  jQuery.event.trigger(type, data, this);
                });
              },
              triggerHandler: function (type, data) {
                var elem = this[0];
                if (elem) {
                  return jQuery.event.trigger(type, data, elem, true);
                }
              },
            });

            var rbracket = /\[\]$/,
              rCRLF = /\r?\n/g,
              rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
              rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
              var name;

              if (Array.isArray(obj)) {
                // Serialize array item.
                jQuery.each(obj, function (i, v) {
                  if (traditional || rbracket.test(prefix)) {
                    // Treat each array item as a scalar.
                    add(prefix, v);
                  } else {
                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                      prefix +
                        '[' +
                        (typeof v === 'object' && v != null ? i : '') +
                        ']',
                      v,
                      traditional,
                      add
                    );
                  }
                });
              } else if (!traditional && toType(obj) === 'object') {
                // Serialize object item.
                for (name in obj) {
                  buildParams(
                    prefix + '[' + name + ']',
                    obj[name],
                    traditional,
                    add
                  );
                }
              } else {
                // Serialize scalar item.
                add(prefix, obj);
              }
            }

            // Serialize an array of form elements or a set of
            // key/values into a query string
            jQuery.param = function (a, traditional) {
              var prefix,
                s = [],
                add = function (key, valueOrFunction) {
                  // If value is a function, invoke it and use its return value
                  var value = isFunction(valueOrFunction)
                    ? valueOrFunction()
                    : valueOrFunction;

                  s[s.length] =
                    encodeURIComponent(key) +
                    '=' +
                    encodeURIComponent(value == null ? '' : value);
                };

              if (a == null) {
                return '';
              }

              // If an array was passed in, assume that it is an array of form elements.
              if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
                // Serialize the form elements
                jQuery.each(a, function () {
                  add(this.name, this.value);
                });
              } else {
                // If traditional, encode the "old" way (the way 1.3.2 or older
                // did it), otherwise encode params recursively.
                for (prefix in a) {
                  buildParams(prefix, a[prefix], traditional, add);
                }
              }

              // Return the resulting serialization
              return s.join('&');
            };

            jQuery.fn.extend({
              serialize: function () {
                return jQuery.param(this.serializeArray());
              },
              serializeArray: function () {
                return this.map(function () {
                  // Can add propHook for "elements" to filter or add form elements
                  var elements = jQuery.prop(this, 'elements');
                  return elements ? jQuery.makeArray(elements) : this;
                })
                  .filter(function () {
                    var type = this.type;

                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                    return (
                      this.name &&
                      !jQuery(this).is(':disabled') &&
                      rsubmittable.test(this.nodeName) &&
                      !rsubmitterTypes.test(type) &&
                      (this.checked || !rcheckableType.test(type))
                    );
                  })
                  .map(function (_i, elem) {
                    var val = jQuery(this).val();

                    if (val == null) {
                      return null;
                    }

                    if (Array.isArray(val)) {
                      return jQuery.map(val, function (val) {
                        return {
                          name: elem.name,
                          value: val.replace(rCRLF, '\r\n'),
                        };
                      });
                    }

                    return {
                      name: elem.name,
                      value: val.replace(rCRLF, '\r\n'),
                    };
                  })
                  .get();
              },
            });

            var r20 = /%20/g,
              rhash = /#.*$/,
              rantiCache = /([?&])_=[^&]*/,
              rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
              // trac-7653, trac-8125, trac-8152: local protocol detection
              rlocalProtocol =
                /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
              rnoContent = /^(?:GET|HEAD)$/,
              rprotocol = /^\/\//,
              /* Prefilters
               * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
               * 2) These are called:
               *    - BEFORE asking for a transport
               *    - AFTER param serialization (s.data is a string if s.processData is true)
               * 3) key is the dataType
               * 4) the catchall symbol "*" can be used
               * 5) execution will start with transport dataType and THEN continue down to "*" if needed
               */
              prefilters = {},
              /* Transports bindings
               * 1) key is the dataType
               * 2) the catchall symbol "*" can be used
               * 3) selection will start with transport dataType and THEN go to "*" if needed
               */
              transports = {},
              // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
              allTypes = '*/'.concat('*'),
              // Anchor tag for parsing the document origin
              originAnchor = document.createElement('a');

            originAnchor.href = location.href;

            // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
            function addToPrefiltersOrTransports(structure) {
              // dataTypeExpression is optional and defaults to "*"
              return function (dataTypeExpression, func) {
                if (typeof dataTypeExpression !== 'string') {
                  func = dataTypeExpression;
                  dataTypeExpression = '*';
                }

                var dataType,
                  i = 0,
                  dataTypes =
                    dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

                if (isFunction(func)) {
                  // For each dataType in the dataTypeExpression
                  while ((dataType = dataTypes[i++])) {
                    // Prepend if requested
                    if (dataType[0] === '+') {
                      dataType = dataType.slice(1) || '*';
                      (structure[dataType] = structure[dataType] || []).unshift(
                        func
                      );

                      // Otherwise append
                    } else {
                      (structure[dataType] = structure[dataType] || []).push(
                        func
                      );
                    }
                  }
                }
              };
            }

            // Base inspection function for prefilters and transports
            function inspectPrefiltersOrTransports(
              structure,
              options,
              originalOptions,
              jqXHR
            ) {
              var inspected = {},
                seekingTransport = structure === transports;

              function inspect(dataType) {
                var selected;
                inspected[dataType] = true;
                jQuery.each(
                  structure[dataType] || [],
                  function (_, prefilterOrFactory) {
                    var dataTypeOrTransport = prefilterOrFactory(
                      options,
                      originalOptions,
                      jqXHR
                    );
                    if (
                      typeof dataTypeOrTransport === 'string' &&
                      !seekingTransport &&
                      !inspected[dataTypeOrTransport]
                    ) {
                      options.dataTypes.unshift(dataTypeOrTransport);
                      inspect(dataTypeOrTransport);
                      return false;
                    } else if (seekingTransport) {
                      return !(selected = dataTypeOrTransport);
                    }
                  }
                );
                return selected;
              }

              return (
                inspect(options.dataTypes[0]) ||
                (!inspected['*'] && inspect('*'))
              );
            }

            // A special extend for ajax options
            // that takes "flat" options (not to be deep extended)
            // Fixes trac-9887
            function ajaxExtend(target, src) {
              var key,
                deep,
                flatOptions = jQuery.ajaxSettings.flatOptions || {};

              for (key in src) {
                if (src[key] !== undefined) {
                  (flatOptions[key] ? target : deep || (deep = {}))[key] =
                    src[key];
                }
              }
              if (deep) {
                jQuery.extend(true, target, deep);
              }

              return target;
            }

            /* Handles responses to an ajax request:
             * - finds the right dataType (mediates between content-type and expected dataType)
             * - returns the corresponding response
             */
            function ajaxHandleResponses(s, jqXHR, responses) {
              var ct,
                type,
                finalDataType,
                firstDataType,
                contents = s.contents,
                dataTypes = s.dataTypes;

              // Remove auto dataType and get content-type in the process
              while (dataTypes[0] === '*') {
                dataTypes.shift();
                if (ct === undefined) {
                  ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
                }
              }

              // Check if we're dealing with a known content-type
              if (ct) {
                for (type in contents) {
                  if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                  }
                }
              }

              // Check to see if we have a response for the expected dataType
              if (dataTypes[0] in responses) {
                finalDataType = dataTypes[0];
              } else {
                // Try convertible dataTypes
                for (type in responses) {
                  if (
                    !dataTypes[0] ||
                    s.converters[type + ' ' + dataTypes[0]]
                  ) {
                    finalDataType = type;
                    break;
                  }
                  if (!firstDataType) {
                    firstDataType = type;
                  }
                }

                // Or just use first one
                finalDataType = finalDataType || firstDataType;
              }

              // If we found a dataType
              // We add the dataType to the list if needed
              // and return the corresponding response
              if (finalDataType) {
                if (finalDataType !== dataTypes[0]) {
                  dataTypes.unshift(finalDataType);
                }
                return responses[finalDataType];
              }
            }

            /* Chain conversions given the request and the original response
             * Also sets the responseXXX fields on the jqXHR instance
             */
            function ajaxConvert(s, response, jqXHR, isSuccess) {
              var conv2,
                current,
                conv,
                tmp,
                prev,
                converters = {},
                // Work with a copy of dataTypes in case we need to modify it for conversion
                dataTypes = s.dataTypes.slice();

              // Create converters map with lowercased keys
              if (dataTypes[1]) {
                for (conv in s.converters) {
                  converters[conv.toLowerCase()] = s.converters[conv];
                }
              }

              current = dataTypes.shift();

              // Convert to each sequential dataType
              while (current) {
                if (s.responseFields[current]) {
                  jqXHR[s.responseFields[current]] = response;
                }

                // Apply the dataFilter if provided
                if (!prev && isSuccess && s.dataFilter) {
                  response = s.dataFilter(response, s.dataType);
                }

                prev = current;
                current = dataTypes.shift();

                if (current) {
                  // There's only work to do if current dataType is non-auto
                  if (current === '*') {
                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                  } else if (prev !== '*' && prev !== current) {
                    // Seek a direct converter
                    conv =
                      converters[prev + ' ' + current] ||
                      converters['* ' + current];

                    // If none found, seek a pair
                    if (!conv) {
                      for (conv2 in converters) {
                        // If conv2 outputs current
                        tmp = conv2.split(' ');
                        if (tmp[1] === current) {
                          // If prev can be converted to accepted input
                          conv =
                            converters[prev + ' ' + tmp[0]] ||
                            converters['* ' + tmp[0]];
                          if (conv) {
                            // Condense equivalence converters
                            if (conv === true) {
                              conv = converters[conv2];

                              // Otherwise, insert the intermediate dataType
                            } else if (converters[conv2] !== true) {
                              current = tmp[0];
                              dataTypes.unshift(tmp[1]);
                            }
                            break;
                          }
                        }
                      }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {
                      // Unless errors are allowed to bubble, catch and return them
                      if (conv && s.throws) {
                        response = conv(response);
                      } else {
                        try {
                          response = conv(response);
                        } catch (e) {
                          return {
                            state: 'parsererror',
                            error: conv
                              ? e
                              : 'No conversion from ' + prev + ' to ' + current,
                          };
                        }
                      }
                    }
                  }
                }
              }

              return { state: 'success', data: response };
            }

            jQuery.extend({
              // Counter for holding the number of active queries
              active: 0,

              // Last-Modified header cache for next request
              lastModified: {},
              etag: {},

              ajaxSettings: {
                url: location.href,
                type: 'GET',
                isLocal: rlocalProtocol.test(location.protocol),
                global: true,
                processData: true,
                async: true,
                contentType: 'application/x-www-form-urlencoded; charset=UTF-8',

                /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

                accepts: {
                  '*': allTypes,
                  text: 'text/plain',
                  html: 'text/html',
                  xml: 'application/xml, text/xml',
                  json: 'application/json, text/javascript',
                },

                contents: {
                  xml: /\bxml\b/,
                  html: /\bhtml/,
                  json: /\bjson\b/,
                },

                responseFields: {
                  xml: 'responseXML',
                  text: 'responseText',
                  json: 'responseJSON',
                },

                // Data converters
                // Keys separate source (or catchall "*") and destination types with a single space
                converters: {
                  // Convert anything to text
                  '* text': String,

                  // Text to html (true = no transformation)
                  'text html': true,

                  // Evaluate text as a json expression
                  'text json': JSON.parse,

                  // Parse text as xml
                  'text xml': jQuery.parseXML,
                },

                // For options that shouldn't be deep extended:
                // you can add your own custom options here if
                // and when you create one that shouldn't be
                // deep extended (see ajaxExtend)
                flatOptions: {
                  url: true,
                  context: true,
                },
              },

              // Creates a full fledged settings object into target
              // with both ajaxSettings and settings fields.
              // If target is omitted, writes into ajaxSettings.
              ajaxSetup: function (target, settings) {
                return settings
                  ? // Building a settings object
                    ajaxExtend(
                      ajaxExtend(target, jQuery.ajaxSettings),
                      settings
                    )
                  : // Extending ajaxSettings
                    ajaxExtend(jQuery.ajaxSettings, target);
              },

              ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
              ajaxTransport: addToPrefiltersOrTransports(transports),

              // Main method
              ajax: function (url, options) {
                // If url is an object, simulate pre-1.5 signature
                if (typeof url === 'object') {
                  options = url;
                  url = undefined;
                }

                // Force options to be an object
                options = options || {};

                var transport,
                  // URL without anti-cache param
                  cacheURL,
                  // Response headers
                  responseHeadersString,
                  responseHeaders,
                  // timeout handle
                  timeoutTimer,
                  // Url cleanup var
                  urlAnchor,
                  // Request state (becomes false upon send and true upon completion)
                  completed,
                  // To know if global events are to be dispatched
                  fireGlobals,
                  // Loop variable
                  i,
                  // uncached part of the url
                  uncached,
                  // Create the final options object
                  s = jQuery.ajaxSetup({}, options),
                  // Callbacks context
                  callbackContext = s.context || s,
                  // Context for global events is callbackContext if it is a DOM node or jQuery collection
                  globalEventContext =
                    s.context &&
                    (callbackContext.nodeType || callbackContext.jquery)
                      ? jQuery(callbackContext)
                      : jQuery.event,
                  // Deferreds
                  deferred = jQuery.Deferred(),
                  completeDeferred = jQuery.Callbacks('once memory'),
                  // Status-dependent callbacks
                  statusCode = s.statusCode || {},
                  // Headers (they are sent all at once)
                  requestHeaders = {},
                  requestHeadersNames = {},
                  // Default abort message
                  strAbort = 'canceled',
                  // Fake xhr
                  jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function (key) {
                      var match;
                      if (completed) {
                        if (!responseHeaders) {
                          responseHeaders = {};
                          while (
                            (match = rheaders.exec(responseHeadersString))
                          ) {
                            responseHeaders[match[1].toLowerCase() + ' '] = (
                              responseHeaders[match[1].toLowerCase() + ' '] ||
                              []
                            ).concat(match[2]);
                          }
                        }
                        match = responseHeaders[key.toLowerCase() + ' '];
                      }
                      return match == null ? null : match.join(', ');
                    },

                    // Raw string
                    getAllResponseHeaders: function () {
                      return completed ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function (name, value) {
                      if (completed == null) {
                        name = requestHeadersNames[name.toLowerCase()] =
                          requestHeadersNames[name.toLowerCase()] || name;
                        requestHeaders[name] = value;
                      }
                      return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function (type) {
                      if (completed == null) {
                        s.mimeType = type;
                      }
                      return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function (map) {
                      var code;
                      if (map) {
                        if (completed) {
                          // Execute the appropriate callbacks
                          jqXHR.always(map[jqXHR.status]);
                        } else {
                          // Lazy-add the new callbacks in a way that preserves old ones
                          for (code in map) {
                            statusCode[code] = [statusCode[code], map[code]];
                          }
                        }
                      }
                      return this;
                    },

                    // Cancel the request
                    abort: function (statusText) {
                      var finalText = statusText || strAbort;
                      if (transport) {
                        transport.abort(finalText);
                      }
                      done(0, finalText);
                      return this;
                    },
                  };

                // Attach deferreds
                deferred.promise(jqXHR);

                // Add protocol if not provided (prefilters might expect it)
                // Handle falsy url in the settings object (trac-10093: consistency with old signature)
                // We also use the url parameter if available
                s.url = ((url || s.url || location.href) + '').replace(
                  rprotocol,
                  location.protocol + '//'
                );

                // Alias method option to type as per ticket trac-12004
                s.type = options.method || options.type || s.method || s.type;

                // Extract dataTypes list
                s.dataTypes = (s.dataType || '*')
                  .toLowerCase()
                  .match(rnothtmlwhite) || [''];

                // A cross-domain request is in order when the origin doesn't match the current origin.
                if (s.crossDomain == null) {
                  urlAnchor = document.createElement('a');

                  // Support: IE <=8 - 11, Edge 12 - 15
                  // IE throws exception on accessing the href property if url is malformed,
                  // e.g. http://example.com:80x/
                  try {
                    urlAnchor.href = s.url;

                    // Support: IE <=8 - 11 only
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain =
                      originAnchor.protocol + '//' + originAnchor.host !==
                      urlAnchor.protocol + '//' + urlAnchor.host;
                  } catch (e) {
                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                  }
                }

                // Convert data if not already a string
                if (s.data && s.processData && typeof s.data !== 'string') {
                  s.data = jQuery.param(s.data, s.traditional);
                }

                // Apply prefilters
                inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

                // If request was aborted inside a prefilter, stop there
                if (completed) {
                  return jqXHR;
                }

                // We can fire global events as of now if asked to
                // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
                fireGlobals = jQuery.event && s.global;

                // Watch for a new set of requests
                if (fireGlobals && jQuery.active++ === 0) {
                  jQuery.event.trigger('ajaxStart');
                }

                // Uppercase the type
                s.type = s.type.toUpperCase();

                // Determine if request has content
                s.hasContent = !rnoContent.test(s.type);

                // Save the URL in case we're toying with the If-Modified-Since
                // and/or If-None-Match header later on
                // Remove hash to simplify url manipulation
                cacheURL = s.url.replace(rhash, '');

                // More options handling for requests with no content
                if (!s.hasContent) {
                  // Remember the hash so we can put it back
                  uncached = s.url.slice(cacheURL.length);

                  // If data is available and should be processed, append data to url
                  if (s.data && (s.processData || typeof s.data === 'string')) {
                    cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;

                    // trac-9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                  }

                  // Add or update anti-cache param if needed
                  if (s.cache === false) {
                    cacheURL = cacheURL.replace(rantiCache, '$1');
                    uncached =
                      (rquery.test(cacheURL) ? '&' : '?') +
                      '_=' +
                      nonce.guid++ +
                      uncached;
                  }

                  // Put hash and anti-cache on the URL that will be requested (gh-1732)
                  s.url = cacheURL + uncached;

                  // Change '%20' to '+' if this is encoded form body content (gh-2658)
                } else if (
                  s.data &&
                  s.processData &&
                  (s.contentType || '').indexOf(
                    'application/x-www-form-urlencoded'
                  ) === 0
                ) {
                  s.data = s.data.replace(r20, '+');
                }

                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                if (s.ifModified) {
                  if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader(
                      'If-Modified-Since',
                      jQuery.lastModified[cacheURL]
                    );
                  }
                  if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader(
                      'If-None-Match',
                      jQuery.etag[cacheURL]
                    );
                  }
                }

                // Set the correct header, if data is being sent
                if (
                  (s.data && s.hasContent && s.contentType !== false) ||
                  options.contentType
                ) {
                  jqXHR.setRequestHeader('Content-Type', s.contentType);
                }

                // Set the Accepts header for the server, depending on the dataType
                jqXHR.setRequestHeader(
                  'Accept',
                  s.dataTypes[0] && s.accepts[s.dataTypes[0]]
                    ? s.accepts[s.dataTypes[0]] +
                        (s.dataTypes[0] !== '*'
                          ? ', ' + allTypes + '; q=0.01'
                          : '')
                    : s.accepts['*']
                );

                // Check for headers option
                for (i in s.headers) {
                  jqXHR.setRequestHeader(i, s.headers[i]);
                }

                // Allow custom headers/mimetypes and early abort
                if (
                  s.beforeSend &&
                  (s.beforeSend.call(callbackContext, jqXHR, s) === false ||
                    completed)
                ) {
                  // Abort if not done already and return
                  return jqXHR.abort();
                }

                // Aborting is no longer a cancellation
                strAbort = 'abort';

                // Install callbacks on deferreds
                completeDeferred.add(s.complete);
                jqXHR.done(s.success);
                jqXHR.fail(s.error);

                // Get transport
                transport = inspectPrefiltersOrTransports(
                  transports,
                  s,
                  options,
                  jqXHR
                );

                // If no transport, we auto-abort
                if (!transport) {
                  done(-1, 'No Transport');
                } else {
                  jqXHR.readyState = 1;

                  // Send global event
                  if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [jqXHR, s]);
                  }

                  // If request was aborted inside ajaxSend, stop there
                  if (completed) {
                    return jqXHR;
                  }

                  // Timeout
                  if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function () {
                      jqXHR.abort('timeout');
                    }, s.timeout);
                  }

                  try {
                    completed = false;
                    transport.send(requestHeaders, done);
                  } catch (e) {
                    // Rethrow post-completion exceptions
                    if (completed) {
                      throw e;
                    }

                    // Propagate others as results
                    done(-1, e);
                  }
                }

                // Callback for when everything is done
                function done(status, nativeStatusText, responses, headers) {
                  var isSuccess,
                    success,
                    error,
                    response,
                    modified,
                    statusText = nativeStatusText;

                  // Ignore repeat invocations
                  if (completed) {
                    return;
                  }

                  completed = true;

                  // Clear timeout if it exists
                  if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                  }

                  // Dereference transport for early garbage collection
                  // (no matter how long the jqXHR object will be used)
                  transport = undefined;

                  // Cache response headers
                  responseHeadersString = headers || '';

                  // Set readyState
                  jqXHR.readyState = status > 0 ? 4 : 0;

                  // Determine if successful
                  isSuccess = (status >= 200 && status < 300) || status === 304;

                  // Get response data
                  if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                  }

                  // Use a noop converter for missing script but not if jsonp
                  if (
                    !isSuccess &&
                    jQuery.inArray('script', s.dataTypes) > -1 &&
                    jQuery.inArray('json', s.dataTypes) < 0
                  ) {
                    s.converters['text script'] = function () {};
                  }

                  // Convert no matter what (that way responseXXX fields are always set)
                  response = ajaxConvert(s, response, jqXHR, isSuccess);

                  // If successful, handle type chaining
                  if (isSuccess) {
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                      modified = jqXHR.getResponseHeader('Last-Modified');
                      if (modified) {
                        jQuery.lastModified[cacheURL] = modified;
                      }
                      modified = jqXHR.getResponseHeader('etag');
                      if (modified) {
                        jQuery.etag[cacheURL] = modified;
                      }
                    }

                    // if no content
                    if (status === 204 || s.type === 'HEAD') {
                      statusText = 'nocontent';

                      // if not modified
                    } else if (status === 304) {
                      statusText = 'notmodified';

                      // If we have data, let's convert it
                    } else {
                      statusText = response.state;
                      success = response.data;
                      error = response.error;
                      isSuccess = !error;
                    }
                  } else {
                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                      statusText = 'error';
                      if (status < 0) {
                        status = 0;
                      }
                    }
                  }

                  // Set data for the fake xhr object
                  jqXHR.status = status;
                  jqXHR.statusText = (nativeStatusText || statusText) + '';

                  // Success/Error
                  if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                      success,
                      statusText,
                      jqXHR,
                    ]);
                  } else {
                    deferred.rejectWith(callbackContext, [
                      jqXHR,
                      statusText,
                      error,
                    ]);
                  }

                  // Status-dependent callbacks
                  jqXHR.statusCode(statusCode);
                  statusCode = undefined;

                  if (fireGlobals) {
                    globalEventContext.trigger(
                      isSuccess ? 'ajaxSuccess' : 'ajaxError',
                      [jqXHR, s, isSuccess ? success : error]
                    );
                  }

                  // Complete
                  completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText,
                  ]);

                  if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!--jQuery.active) {
                      jQuery.event.trigger('ajaxStop');
                    }
                  }
                }

                return jqXHR;
              },

              getJSON: function (url, data, callback) {
                return jQuery.get(url, data, callback, 'json');
              },

              getScript: function (url, callback) {
                return jQuery.get(url, undefined, callback, 'script');
              },
            });

            jQuery.each(['get', 'post'], function (_i, method) {
              jQuery[method] = function (url, data, callback, type) {
                // Shift arguments if data argument was omitted
                if (isFunction(data)) {
                  type = type || callback;
                  callback = data;
                  data = undefined;
                }

                // The url can be an options object (which then must have .url)
                return jQuery.ajax(
                  jQuery.extend(
                    {
                      url: url,
                      type: method,
                      dataType: type,
                      data: data,
                      success: callback,
                    },
                    jQuery.isPlainObject(url) && url
                  )
                );
              };
            });

            jQuery.ajaxPrefilter(function (s) {
              var i;
              for (i in s.headers) {
                if (i.toLowerCase() === 'content-type') {
                  s.contentType = s.headers[i] || '';
                }
              }
            });

            jQuery._evalUrl = function (url, options, doc) {
              return jQuery.ajax({
                url: url,

                // Make this explicit, since user can override this through ajaxSetup (trac-11264)
                type: 'GET',
                dataType: 'script',
                cache: true,
                async: false,
                global: false,

                // Only evaluate the response if it is successful (gh-4126)
                // dataFilter is not invoked for failure responses, so using it instead
                // of the default converter is kludgy but it works.
                converters: {
                  'text script': function () {},
                },
                dataFilter: function (response) {
                  jQuery.globalEval(response, options, doc);
                },
              });
            };

            jQuery.fn.extend({
              wrapAll: function (html) {
                var wrap;

                if (this[0]) {
                  if (isFunction(html)) {
                    html = html.call(this[0]);
                  }

                  // The elements to wrap the target around
                  wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                  if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                  }

                  wrap
                    .map(function () {
                      var elem = this;

                      while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                      }

                      return elem;
                    })
                    .append(this);
                }

                return this;
              },

              wrapInner: function (html) {
                if (isFunction(html)) {
                  return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                  });
                }

                return this.each(function () {
                  var self = jQuery(this),
                    contents = self.contents();

                  if (contents.length) {
                    contents.wrapAll(html);
                  } else {
                    self.append(html);
                  }
                });
              },

              wrap: function (html) {
                var htmlIsFunction = isFunction(html);

                return this.each(function (i) {
                  jQuery(this).wrapAll(
                    htmlIsFunction ? html.call(this, i) : html
                  );
                });
              },

              unwrap: function (selector) {
                this.parent(selector)
                  .not('body')
                  .each(function () {
                    jQuery(this).replaceWith(this.childNodes);
                  });
                return this;
              },
            });

            jQuery.expr.pseudos.hidden = function (elem) {
              return !jQuery.expr.pseudos.visible(elem);
            };
            jQuery.expr.pseudos.visible = function (elem) {
              return !!(
                elem.offsetWidth ||
                elem.offsetHeight ||
                elem.getClientRects().length
              );
            };

            jQuery.ajaxSettings.xhr = function () {
              try {
                return new window.XMLHttpRequest();
              } catch (e) {}
            };

            var xhrSuccessStatus = {
                // File protocol always yields status code 0, assume 200
                0: 200,

                // Support: IE <=9 only
                // trac-1450: sometimes IE returns 1223 when it should be 204
                1223: 204,
              },
              xhrSupported = jQuery.ajaxSettings.xhr();

            support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;

            jQuery.ajaxTransport(function (options) {
              var callback, errorCallback;

              // Cross domain only allowed if supported through XMLHttpRequest
              if (support.cors || (xhrSupported && !options.crossDomain)) {
                return {
                  send: function (headers, complete) {
                    var i,
                      xhr = options.xhr();

                    xhr.open(
                      options.type,
                      options.url,
                      options.async,
                      options.username,
                      options.password
                    );

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                      for (i in options.xhrFields) {
                        xhr[i] = options.xhrFields[i];
                      }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                      xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers['X-Requested-With']) {
                      headers['X-Requested-With'] = 'XMLHttpRequest';
                    }

                    // Set headers
                    for (i in headers) {
                      xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function (type) {
                      return function () {
                        if (callback) {
                          callback =
                            errorCallback =
                            xhr.onload =
                            xhr.onerror =
                            xhr.onabort =
                            xhr.ontimeout =
                            xhr.onreadystatechange =
                              null;

                          if (type === 'abort') {
                            xhr.abort();
                          } else if (type === 'error') {
                            // Support: IE <=9 only
                            // On a manual native abort, IE9 throws
                            // errors on any property access that is not readyState
                            if (typeof xhr.status !== 'number') {
                              complete(0, 'error');
                            } else {
                              complete(
                                // File: protocol always yields status 0; see trac-8605, trac-14207
                                xhr.status,
                                xhr.statusText
                              );
                            }
                          } else {
                            complete(
                              xhrSuccessStatus[xhr.status] || xhr.status,
                              xhr.statusText,

                              // Support: IE <=9 only
                              // IE9 has no XHR2 but throws on binary (trac-11426)
                              // For XHR2 non-text, let the caller handle it (gh-2498)
                              (xhr.responseType || 'text') !== 'text' ||
                                typeof xhr.responseText !== 'string'
                                ? { binary: xhr.response }
                                : { text: xhr.responseText },
                              xhr.getAllResponseHeaders()
                            );
                          }
                        }
                      };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback =
                      xhr.onerror =
                      xhr.ontimeout =
                        callback('error');

                    // Support: IE 9 only
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if (xhr.onabort !== undefined) {
                      xhr.onabort = errorCallback;
                    } else {
                      xhr.onreadystatechange = function () {
                        // Check readyState before timeout as it changes
                        if (xhr.readyState === 4) {
                          // Allow onerror to be called first,
                          // but that will not handle a native abort
                          // Also, save errorCallback to a variable
                          // as xhr.onerror cannot be accessed
                          window.setTimeout(function () {
                            if (callback) {
                              errorCallback();
                            }
                          });
                        }
                      };
                    }

                    // Create the abort callback
                    callback = callback('abort');

                    try {
                      // Do send the request (this may raise an exception)
                      xhr.send((options.hasContent && options.data) || null);
                    } catch (e) {
                      // trac-14683: Only rethrow if this hasn't been notified as an error yet
                      if (callback) {
                        throw e;
                      }
                    }
                  },

                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
            jQuery.ajaxPrefilter(function (s) {
              if (s.crossDomain) {
                s.contents.script = false;
              }
            });

            // Install script dataType
            jQuery.ajaxSetup({
              accepts: {
                script:
                  'text/javascript, application/javascript, ' +
                  'application/ecmascript, application/x-ecmascript',
              },
              contents: {
                script: /\b(?:java|ecma)script\b/,
              },
              converters: {
                'text script': function (text) {
                  jQuery.globalEval(text);
                  return text;
                },
              },
            });

            // Handle cache's special case and crossDomain
            jQuery.ajaxPrefilter('script', function (s) {
              if (s.cache === undefined) {
                s.cache = false;
              }
              if (s.crossDomain) {
                s.type = 'GET';
              }
            });

            // Bind script tag hack transport
            jQuery.ajaxTransport('script', function (s) {
              // This transport only deals with cross domain or forced-by-attrs requests
              if (s.crossDomain || s.scriptAttrs) {
                var script, callback;
                return {
                  send: function (_, complete) {
                    script = jQuery('<script>')
                      .attr(s.scriptAttrs || {})
                      .prop({ charset: s.scriptCharset, src: s.url })
                      .on(
                        'load error',
                        (callback = function (evt) {
                          script.remove();
                          callback = null;
                          if (evt) {
                            complete(
                              evt.type === 'error' ? 404 : 200,
                              evt.type
                            );
                          }
                        })
                      );

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                  },
                  abort: function () {
                    if (callback) {
                      callback();
                    }
                  },
                };
              }
            });

            var oldCallbacks = [],
              rjsonp = /(=)\?(?=&|$)|\?\?/;

            // Default jsonp settings
            jQuery.ajaxSetup({
              jsonp: 'callback',
              jsonpCallback: function () {
                var callback =
                  oldCallbacks.pop() || jQuery.expando + '_' + nonce.guid++;
                this[callback] = true;
                return callback;
              },
            });

            // Detect, normalize options and install callbacks for jsonp requests
            jQuery.ajaxPrefilter(
              'json jsonp',
              function (s, originalSettings, jqXHR) {
                var callbackName,
                  overwritten,
                  responseContainer,
                  jsonProp =
                    s.jsonp !== false &&
                    (rjsonp.test(s.url)
                      ? 'url'
                      : typeof s.data === 'string' &&
                        (s.contentType || '').indexOf(
                          'application/x-www-form-urlencoded'
                        ) === 0 &&
                        rjsonp.test(s.data) &&
                        'data');

                // Handle iff the expected data type is "jsonp" or we have a parameter to set
                if (jsonProp || s.dataTypes[0] === 'jsonp') {
                  // Get callback name, remembering preexisting value associated with it
                  callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
                    ? s.jsonpCallback()
                    : s.jsonpCallback;

                  // Insert callback into url or form data
                  if (jsonProp) {
                    s[jsonProp] = s[jsonProp].replace(
                      rjsonp,
                      '$1' + callbackName
                    );
                  } else if (s.jsonp !== false) {
                    s.url +=
                      (rquery.test(s.url) ? '&' : '?') +
                      s.jsonp +
                      '=' +
                      callbackName;
                  }

                  // Use data converter to retrieve json after script execution
                  s.converters['script json'] = function () {
                    if (!responseContainer) {
                      jQuery.error(callbackName + ' was not called');
                    }
                    return responseContainer[0];
                  };

                  // Force json dataType
                  s.dataTypes[0] = 'json';

                  // Install callback
                  overwritten = window[callbackName];
                  window[callbackName] = function () {
                    responseContainer = arguments;
                  };

                  // Clean-up function (fires after converters)
                  jqXHR.always(function () {
                    // If previous value didn't exist - remove it
                    if (overwritten === undefined) {
                      jQuery(window).removeProp(callbackName);

                      // Otherwise restore preexisting value
                    } else {
                      window[callbackName] = overwritten;
                    }

                    // Save back as free
                    if (s[callbackName]) {
                      // Make sure that re-using the options doesn't screw things around
                      s.jsonpCallback = originalSettings.jsonpCallback;

                      // Save the callback name for future use
                      oldCallbacks.push(callbackName);
                    }

                    // Call if it was a function and we have a response
                    if (responseContainer && isFunction(overwritten)) {
                      overwritten(responseContainer[0]);
                    }

                    responseContainer = overwritten = undefined;
                  });

                  // Delegate to script
                  return 'script';
                }
              }
            );

            // Support: Safari 8 only
            // In Safari 8 documents created via document.implementation.createHTMLDocument
            // collapse sibling forms: the second one becomes a child of the first one.
            // Because of that, this security measure has to be disabled in Safari 8.
            // https://bugs.webkit.org/show_bug.cgi?id=137337
            support.createHTMLDocument = (function () {
              var body = document.implementation.createHTMLDocument('').body;
              body.innerHTML = '<form></form><form></form>';
              return body.childNodes.length === 2;
            })();

            // Argument "data" should be string of html
            // context (optional): If specified, the fragment will be created in this context,
            // defaults to document
            // keepScripts (optional): If true, will include scripts passed in the html string
            jQuery.parseHTML = function (data, context, keepScripts) {
              if (typeof data !== 'string') {
                return [];
              }
              if (typeof context === 'boolean') {
                keepScripts = context;
                context = false;
              }

              var base, parsed, scripts;

              if (!context) {
                // Stop scripts or inline event handlers from being executed immediately
                // by using document.implementation
                if (support.createHTMLDocument) {
                  context = document.implementation.createHTMLDocument('');

                  // Set the base href for the created document
                  // so any parsed elements with URLs
                  // are based on the document's URL (gh-2965)
                  base = context.createElement('base');
                  base.href = document.location.href;
                  context.head.appendChild(base);
                } else {
                  context = document;
                }
              }

              parsed = rsingleTag.exec(data);
              scripts = !keepScripts && [];

              // Single tag
              if (parsed) {
                return [context.createElement(parsed[1])];
              }

              parsed = buildFragment([data], context, scripts);

              if (scripts && scripts.length) {
                jQuery(scripts).remove();
              }

              return jQuery.merge([], parsed.childNodes);
            };

            /**
             * Load a url into a page
             */
            jQuery.fn.load = function (url, params, callback) {
              var selector,
                type,
                response,
                self = this,
                off = url.indexOf(' ');

              if (off > -1) {
                selector = stripAndCollapse(url.slice(off));
                url = url.slice(0, off);
              }

              // If it's a function
              if (isFunction(params)) {
                // We assume that it's the callback
                callback = params;
                params = undefined;

                // Otherwise, build a param string
              } else if (params && typeof params === 'object') {
                type = 'POST';
              }

              // If we have elements to modify, make the request
              if (self.length > 0) {
                jQuery
                  .ajax({
                    url: url,

                    // If "type" variable is undefined, then "GET" method will be used.
                    // Make value of this field explicit since
                    // user can override it through ajaxSetup method
                    type: type || 'GET',
                    dataType: 'html',
                    data: params,
                  })
                  .done(function (responseText) {
                    // Save response for use in complete callback
                    response = arguments;

                    self.html(
                      selector
                        ? // If a selector was specified, locate the right elements in a dummy div
                          // Exclude scripts to avoid IE 'Permission Denied' errors
                          jQuery('<div>')
                            .append(jQuery.parseHTML(responseText))
                            .find(selector)
                        : // Otherwise use the full result
                          responseText
                    );

                    // If the request succeeds, this function gets "data", "status", "jqXHR"
                    // but they are ignored because response was set above.
                    // If it fails, this function gets "jqXHR", "status", "error"
                  })
                  .always(
                    callback &&
                      function (jqXHR, status) {
                        self.each(function () {
                          callback.apply(
                            this,
                            response || [jqXHR.responseText, status, jqXHR]
                          );
                        });
                      }
                  );
              }

              return this;
            };

            jQuery.expr.pseudos.animated = function (elem) {
              return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
              }).length;
            };

            jQuery.offset = {
              setOffset: function (elem, options, i) {
                var curPosition,
                  curLeft,
                  curCSSTop,
                  curTop,
                  curOffset,
                  curCSSLeft,
                  calculatePosition,
                  position = jQuery.css(elem, 'position'),
                  curElem = jQuery(elem),
                  props = {};

                // Set position first, in-case top/left are set even on static elem
                if (position === 'static') {
                  elem.style.position = 'relative';
                }

                curOffset = curElem.offset();
                curCSSTop = jQuery.css(elem, 'top');
                curCSSLeft = jQuery.css(elem, 'left');
                calculatePosition =
                  (position === 'absolute' || position === 'fixed') &&
                  (curCSSTop + curCSSLeft).indexOf('auto') > -1;

                // Need to be able to calculate position if either
                // top or left is auto and position is either absolute or fixed
                if (calculatePosition) {
                  curPosition = curElem.position();
                  curTop = curPosition.top;
                  curLeft = curPosition.left;
                } else {
                  curTop = parseFloat(curCSSTop) || 0;
                  curLeft = parseFloat(curCSSLeft) || 0;
                }

                if (isFunction(options)) {
                  // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                  options = options.call(elem, i, jQuery.extend({}, curOffset));
                }

                if (options.top != null) {
                  props.top = options.top - curOffset.top + curTop;
                }
                if (options.left != null) {
                  props.left = options.left - curOffset.left + curLeft;
                }

                if ('using' in options) {
                  options.using.call(elem, props);
                } else {
                  curElem.css(props);
                }
              },
            };

            jQuery.fn.extend({
              // offset() relates an element's border box to the document origin
              offset: function (options) {
                // Preserve chaining for setter
                if (arguments.length) {
                  return options === undefined
                    ? this
                    : this.each(function (i) {
                        jQuery.offset.setOffset(this, options, i);
                      });
                }

                var rect,
                  win,
                  elem = this[0];

                if (!elem) {
                  return;
                }

                // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
                // Support: IE <=11 only
                // Running getBoundingClientRect on a
                // disconnected node in IE throws an error
                if (!elem.getClientRects().length) {
                  return { top: 0, left: 0 };
                }

                // Get document-relative position by adding viewport scroll to viewport-relative gBCR
                rect = elem.getBoundingClientRect();
                win = elem.ownerDocument.defaultView;
                return {
                  top: rect.top + win.pageYOffset,
                  left: rect.left + win.pageXOffset,
                };
              },

              // position() relates an element's margin box to its offset parent's padding box
              // This corresponds to the behavior of CSS absolute positioning
              position: function () {
                if (!this[0]) {
                  return;
                }

                var offsetParent,
                  offset,
                  doc,
                  elem = this[0],
                  parentOffset = { top: 0, left: 0 };

                // position:fixed elements are offset from the viewport, which itself always has zero offset
                if (jQuery.css(elem, 'position') === 'fixed') {
                  // Assume position:fixed implies availability of getBoundingClientRect
                  offset = elem.getBoundingClientRect();
                } else {
                  offset = this.offset();

                  // Account for the *real* offset parent, which can be the document or its root element
                  // when a statically positioned element is identified
                  doc = elem.ownerDocument;
                  offsetParent = elem.offsetParent || doc.documentElement;
                  while (
                    offsetParent &&
                    (offsetParent === doc.body ||
                      offsetParent === doc.documentElement) &&
                    jQuery.css(offsetParent, 'position') === 'static'
                  ) {
                    offsetParent = offsetParent.parentNode;
                  }
                  if (
                    offsetParent &&
                    offsetParent !== elem &&
                    offsetParent.nodeType === 1
                  ) {
                    // Incorporate borders into its offset, since they are outside its content origin
                    parentOffset = jQuery(offsetParent).offset();
                    parentOffset.top += jQuery.css(
                      offsetParent,
                      'borderTopWidth',
                      true
                    );
                    parentOffset.left += jQuery.css(
                      offsetParent,
                      'borderLeftWidth',
                      true
                    );
                  }
                }

                // Subtract parent offsets and element margins
                return {
                  top:
                    offset.top -
                    parentOffset.top -
                    jQuery.css(elem, 'marginTop', true),
                  left:
                    offset.left -
                    parentOffset.left -
                    jQuery.css(elem, 'marginLeft', true),
                };
              },

              // This method will return documentElement in the following cases:
              // 1) For the element inside the iframe without offsetParent, this method will return
              //    documentElement of the parent window
              // 2) For the hidden or detached element
              // 3) For body or html element, i.e. in case of the html node - it will return itself
              //
              // but those exceptions were never presented as a real life use-cases
              // and might be considered as more preferable results.
              //
              // This logic, however, is not guaranteed and can change at any point in the future
              offsetParent: function () {
                return this.map(function () {
                  var offsetParent = this.offsetParent;

                  while (
                    offsetParent &&
                    jQuery.css(offsetParent, 'position') === 'static'
                  ) {
                    offsetParent = offsetParent.offsetParent;
                  }

                  return offsetParent || documentElement;
                });
              },
            });

            // Create scrollLeft and scrollTop methods
            jQuery.each(
              { scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' },
              function (method, prop) {
                var top = 'pageYOffset' === prop;

                jQuery.fn[method] = function (val) {
                  return access(
                    this,
                    function (elem, method, val) {
                      // Coalesce documents and windows
                      var win;
                      if (isWindow(elem)) {
                        win = elem;
                      } else if (elem.nodeType === 9) {
                        win = elem.defaultView;
                      }

                      if (val === undefined) {
                        return win ? win[prop] : elem[method];
                      }

                      if (win) {
                        win.scrollTo(
                          !top ? val : win.pageXOffset,
                          top ? val : win.pageYOffset
                        );
                      } else {
                        elem[method] = val;
                      }
                    },
                    method,
                    val,
                    arguments.length
                  );
                };
              }
            );

            // Support: Safari <=7 - 9.1, Chrome <=37 - 49
            // Add the top/left cssHooks using jQuery.fn.position
            // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
            // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
            // getComputedStyle returns percent when specified for top/left/bottom/right;
            // rather than make the css module depend on the offset module, just check for it here
            jQuery.each(['top', 'left'], function (_i, prop) {
              jQuery.cssHooks[prop] = addGetHookIf(
                support.pixelPosition,
                function (elem, computed) {
                  if (computed) {
                    computed = curCSS(elem, prop);

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed)
                      ? jQuery(elem).position()[prop] + 'px'
                      : computed;
                  }
                }
              );
            });

            // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
            jQuery.each(
              { Height: 'height', Width: 'width' },
              function (name, type) {
                jQuery.each(
                  {
                    padding: 'inner' + name,
                    content: type,
                    '': 'outer' + name,
                  },
                  function (defaultExtra, funcName) {
                    // Margin is only for outerHeight, outerWidth
                    jQuery.fn[funcName] = function (margin, value) {
                      var chainable =
                          arguments.length &&
                          (defaultExtra || typeof margin !== 'boolean'),
                        extra =
                          defaultExtra ||
                          (margin === true || value === true
                            ? 'margin'
                            : 'border');

                      return access(
                        this,
                        function (elem, type, value) {
                          var doc;

                          if (isWindow(elem)) {
                            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                            return funcName.indexOf('outer') === 0
                              ? elem['inner' + name]
                              : elem.document.documentElement['client' + name];
                          }

                          // Get document width or height
                          if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            return Math.max(
                              elem.body['scroll' + name],
                              doc['scroll' + name],
                              elem.body['offset' + name],
                              doc['offset' + name],
                              doc['client' + name]
                            );
                          }

                          return value === undefined
                            ? // Get width or height on the element, requesting but not forcing parseFloat
                              jQuery.css(elem, type, extra)
                            : // Set width or height on the element
                              jQuery.style(elem, type, value, extra);
                        },
                        type,
                        chainable ? margin : undefined,
                        chainable
                      );
                    };
                  }
                );
              }
            );

            jQuery.each(
              [
                'ajaxStart',
                'ajaxStop',
                'ajaxComplete',
                'ajaxError',
                'ajaxSuccess',
                'ajaxSend',
              ],
              function (_i, type) {
                jQuery.fn[type] = function (fn) {
                  return this.on(type, fn);
                };
              }
            );

            jQuery.fn.extend({
              bind: function (types, data, fn) {
                return this.on(types, null, data, fn);
              },
              unbind: function (types, fn) {
                return this.off(types, null, fn);
              },

              delegate: function (selector, types, data, fn) {
                return this.on(types, selector, data, fn);
              },
              undelegate: function (selector, types, fn) {
                // ( namespace ) or ( selector, types [, fn] )
                return arguments.length === 1
                  ? this.off(selector, '**')
                  : this.off(types, selector || '**', fn);
              },

              hover: function (fnOver, fnOut) {
                return this.on('mouseenter', fnOver).on(
                  'mouseleave',
                  fnOut || fnOver
                );
              },
            });

            jQuery.each(
              (
                'blur focus focusin focusout resize scroll click dblclick ' +
                'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
                'change select submit keydown keypress keyup contextmenu'
              ).split(' '),
              function (_i, name) {
                // Handle event binding
                jQuery.fn[name] = function (data, fn) {
                  return arguments.length > 0
                    ? this.on(name, null, data, fn)
                    : this.trigger(name);
                };
              }
            );

            // Support: Android <=4.0 only
            // Make sure we trim BOM and NBSP
            // Require that the "whitespace run" starts from a non-whitespace
            // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
            var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

            // Bind a function to a context, optionally partially applying any
            // arguments.
            // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
            // However, it is not slated for removal any time soon
            jQuery.proxy = function (fn, context) {
              var tmp, args, proxy;

              if (typeof context === 'string') {
                tmp = fn[context];
                context = fn;
                fn = tmp;
              }

              // Quick check to determine if target is callable, in the spec
              // this throws a TypeError, but we will just return undefined.
              if (!isFunction(fn)) {
                return undefined;
              }

              // Simulated bind
              args = slice.call(arguments, 2);
              proxy = function () {
                return fn.apply(
                  context || this,
                  args.concat(slice.call(arguments))
                );
              };

              // Set the guid of unique handler to the same of original handler, so it can be removed
              proxy.guid = fn.guid = fn.guid || jQuery.guid++;

              return proxy;
            };

            jQuery.holdReady = function (hold) {
              if (hold) {
                jQuery.readyWait++;
              } else {
                jQuery.ready(true);
              }
            };
            jQuery.isArray = Array.isArray;
            jQuery.parseJSON = JSON.parse;
            jQuery.nodeName = nodeName;
            jQuery.isFunction = isFunction;
            jQuery.isWindow = isWindow;
            jQuery.camelCase = camelCase;
            jQuery.type = toType;

            jQuery.now = Date.now;

            jQuery.isNumeric = function (obj) {
              // As of jQuery 3.0, isNumeric is limited to
              // strings and numbers (primitives or objects)
              // that can be coerced to finite numbers (gh-2662)
              var type = jQuery.type(obj);
              return (
                (type === 'number' || type === 'string') &&
                // parseFloat NaNs numeric-cast false positives ("")
                // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
                // subtraction forces infinities to NaN
                !isNaN(obj - parseFloat(obj))
              );
            };

            jQuery.trim = function (text) {
              return text == null ? '' : (text + '').replace(rtrim, '$1');
            };

            // Register as a named AMD module, since jQuery can be concatenated with other
            // files that may use define, but not via a proper concatenation script that
            // understands anonymous AMD modules. A named AMD is safest and most robust
            // way to register. Lowercase jquery is used because AMD module names are
            // derived from file names, and jQuery is normally delivered in a lowercase
            // file name. Do this after creating the global so that if an AMD module wants
            // to call noConflict to hide this version of jQuery, it will work.

            // Note that for maximum portability, libraries that are not jQuery should
            // declare themselves as anonymous modules, and avoid setting a global if an
            // AMD loader is present. jQuery is a special case. For more information, see
            // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

            if (true) {
              !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
              (__WEBPACK_AMD_DEFINE_RESULT__ = function () {
                return jQuery;
              }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)),
              __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
                (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            }

            var // Map over jQuery in case of overwrite
              _jQuery = window.jQuery,
              // Map over the $ in case of overwrite
              _$ = window.$;

            jQuery.noConflict = function (deep) {
              if (window.$ === jQuery) {
                window.$ = _$;
              }

              if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
              }

              return jQuery;
            };

            // Expose jQuery and $ identifiers, even in AMD
            // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
            // and CommonJS for browser emulators (trac-13566)
            if (typeof noGlobal === 'undefined') {
              window.jQuery = window.$ = jQuery;
            }

            return jQuery;
          }
        );

        /***/
      },

    /***/ './node_modules/react-refresh/cjs/react-refresh-runtime.development.js':
      /*!*****************************************************************************!*\
  !*** ./node_modules/react-refresh/cjs/react-refresh-runtime.development.js ***!
  \*****************************************************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        /**
         * @license React
         * react-refresh-runtime.development.js
         *
         * Copyright (c) Facebook, Inc. and its affiliates.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        if (true) {
          (function () {
            'use strict';

            // ATTENTION
            var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
            var REACT_MEMO_TYPE = Symbol.for('react.memo');

            var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
            // It's OK to reference families, but use WeakMap/Set for types.

            var allFamiliesByID = new Map();
            var allFamiliesByType = new PossiblyWeakMap();
            var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
            // that have actually been edited here. This keeps checks fast.
            // $FlowIssue

            var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
            // It is an array of [Family, NextType] tuples.

            var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.

            var helpersByRendererID = new Map();
            var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.

            var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.

            var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
            // It needs to be weak because we do this even for roots that failed to mount.
            // If there is no WeakMap, we won't attempt to do retrying.
            // $FlowIssue

            var rootElements = // $FlowIssue
              typeof WeakMap === 'function' ? new WeakMap() : null;
            var isPerformingRefresh = false;

            function computeFullKey(signature) {
              if (signature.fullKey !== null) {
                return signature.fullKey;
              }

              var fullKey = signature.ownKey;
              var hooks;

              try {
                hooks = signature.getCustomHooks();
              } catch (err) {
                // This can happen in an edge case, e.g. if expression like Foo.useSomething
                // depends on Foo which is lazily initialized during rendering.
                // In that case just assume we'll have to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
              }

              for (var i = 0; i < hooks.length; i++) {
                var hook = hooks[i];

                if (typeof hook !== 'function') {
                  // Something's wrong. Assume we need to remount.
                  signature.forceReset = true;
                  signature.fullKey = fullKey;
                  return fullKey;
                }

                var nestedHookSignature = allSignaturesByType.get(hook);

                if (nestedHookSignature === undefined) {
                  // No signature means Hook wasn't in the source code, e.g. in a library.
                  // We'll skip it because we can assume it won't change during this session.
                  continue;
                }

                var nestedHookKey = computeFullKey(nestedHookSignature);

                if (nestedHookSignature.forceReset) {
                  signature.forceReset = true;
                }

                fullKey += '\n---\n' + nestedHookKey;
              }

              signature.fullKey = fullKey;
              return fullKey;
            }

            function haveEqualSignatures(prevType, nextType) {
              var prevSignature = allSignaturesByType.get(prevType);
              var nextSignature = allSignaturesByType.get(nextType);

              if (prevSignature === undefined && nextSignature === undefined) {
                return true;
              }

              if (prevSignature === undefined || nextSignature === undefined) {
                return false;
              }

              if (
                computeFullKey(prevSignature) !== computeFullKey(nextSignature)
              ) {
                return false;
              }

              if (nextSignature.forceReset) {
                return false;
              }

              return true;
            }

            function isReactClass(type) {
              return type.prototype && type.prototype.isReactComponent;
            }

            function canPreserveStateBetween(prevType, nextType) {
              if (isReactClass(prevType) || isReactClass(nextType)) {
                return false;
              }

              if (haveEqualSignatures(prevType, nextType)) {
                return true;
              }

              return false;
            }

            function resolveFamily(type) {
              // Only check updated types to keep lookups fast.
              return updatedFamiliesByType.get(type);
            } // If we didn't care about IE11, we could use new Map/Set(iterable).

            function cloneMap(map) {
              var clone = new Map();
              map.forEach(function (value, key) {
                clone.set(key, value);
              });
              return clone;
            }

            function cloneSet(set) {
              var clone = new Set();
              set.forEach(function (value) {
                clone.add(value);
              });
              return clone;
            } // This is a safety mechanism to protect against rogue getters and Proxies.

            function getProperty(object, property) {
              try {
                return object[property];
              } catch (err) {
                // Intentionally ignore.
                return undefined;
              }
            }

            function performReactRefresh() {
              if (pendingUpdates.length === 0) {
                return null;
              }

              if (isPerformingRefresh) {
                return null;
              }

              isPerformingRefresh = true;

              try {
                var staleFamilies = new Set();
                var updatedFamilies = new Set();
                var updates = pendingUpdates;
                pendingUpdates = [];
                updates.forEach(function (_ref) {
                  var family = _ref[0],
                    nextType = _ref[1];
                  // Now that we got a real edit, we can create associations
                  // that will be read by the React reconciler.
                  var prevType = family.current;
                  updatedFamiliesByType.set(prevType, family);
                  updatedFamiliesByType.set(nextType, family);
                  family.current = nextType; // Determine whether this should be a re-render or a re-mount.

                  if (canPreserveStateBetween(prevType, nextType)) {
                    updatedFamilies.add(family);
                  } else {
                    staleFamilies.add(family);
                  }
                }); // TODO: rename these fields to something more meaningful.

                var update = {
                  updatedFamilies: updatedFamilies,
                  // Families that will re-render preserving state
                  staleFamilies: staleFamilies, // Families that will be remounted
                };
                helpersByRendererID.forEach(function (helpers) {
                  // Even if there are no roots, set the handler on first update.
                  // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                  helpers.setRefreshHandler(resolveFamily);
                });
                var didError = false;
                var firstError = null; // We snapshot maps and sets that are mutated during commits.
                // If we don't do this, there is a risk they will be mutated while
                // we iterate over them. For example, trying to recover a failed root
                // may cause another root to be added to the failed list -- an infinite loop.

                var failedRootsSnapshot = cloneSet(failedRoots);
                var mountedRootsSnapshot = cloneSet(mountedRoots);
                var helpersByRootSnapshot = cloneMap(helpersByRoot);
                failedRootsSnapshot.forEach(function (root) {
                  var helpers = helpersByRootSnapshot.get(root);

                  if (helpers === undefined) {
                    throw new Error(
                      'Could not find helpers for a root. This is a bug in React Refresh.'
                    );
                  }

                  if (!failedRoots.has(root)) {
                    // No longer failed.
                  }

                  if (rootElements === null) {
                    return;
                  }

                  if (!rootElements.has(root)) {
                    return;
                  }

                  var element = rootElements.get(root);

                  try {
                    helpers.scheduleRoot(root, element);
                  } catch (err) {
                    if (!didError) {
                      didError = true;
                      firstError = err;
                    } // Keep trying other roots.
                  }
                });
                mountedRootsSnapshot.forEach(function (root) {
                  var helpers = helpersByRootSnapshot.get(root);

                  if (helpers === undefined) {
                    throw new Error(
                      'Could not find helpers for a root. This is a bug in React Refresh.'
                    );
                  }

                  if (!mountedRoots.has(root)) {
                    // No longer mounted.
                  }

                  try {
                    helpers.scheduleRefresh(root, update);
                  } catch (err) {
                    if (!didError) {
                      didError = true;
                      firstError = err;
                    } // Keep trying other roots.
                  }
                });

                if (didError) {
                  throw firstError;
                }

                return update;
              } finally {
                isPerformingRefresh = false;
              }
            }
            function register(type, id) {
              {
                if (type === null) {
                  return;
                }

                if (typeof type !== 'function' && typeof type !== 'object') {
                  return;
                } // This can happen in an edge case, e.g. if we register
                // return value of a HOC but it returns a cached component.
                // Ignore anything but the first registration for each type.

                if (allFamiliesByType.has(type)) {
                  return;
                } // Create family or remember to update it.
                // None of this bookkeeping affects reconciliation
                // until the first performReactRefresh() call above.

                var family = allFamiliesByID.get(id);

                if (family === undefined) {
                  family = {
                    current: type,
                  };
                  allFamiliesByID.set(id, family);
                } else {
                  pendingUpdates.push([family, type]);
                }

                allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.

                if (typeof type === 'object' && type !== null) {
                  switch (getProperty(type, '$$typeof')) {
                    case REACT_FORWARD_REF_TYPE:
                      register(type.render, id + '$render');
                      break;

                    case REACT_MEMO_TYPE:
                      register(type.type, id + '$type');
                      break;
                  }
                }
              }
            }
            function setSignature(type, key) {
              var forceReset =
                arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : false;
              var getCustomHooks =
                arguments.length > 3 ? arguments[3] : undefined;

              {
                if (!allSignaturesByType.has(type)) {
                  allSignaturesByType.set(type, {
                    forceReset: forceReset,
                    ownKey: key,
                    fullKey: null,
                    getCustomHooks:
                      getCustomHooks ||
                      function () {
                        return [];
                      },
                  });
                } // Visit inner types because we might not have signed them.

                if (typeof type === 'object' && type !== null) {
                  switch (getProperty(type, '$$typeof')) {
                    case REACT_FORWARD_REF_TYPE:
                      setSignature(
                        type.render,
                        key,
                        forceReset,
                        getCustomHooks
                      );
                      break;

                    case REACT_MEMO_TYPE:
                      setSignature(type.type, key, forceReset, getCustomHooks);
                      break;
                  }
                }
              }
            } // This is lazily called during first render for a type.
            // It captures Hook list at that time so inline requires don't break comparisons.

            function collectCustomHooksForSignature(type) {
              {
                var signature = allSignaturesByType.get(type);

                if (signature !== undefined) {
                  computeFullKey(signature);
                }
              }
            }
            function getFamilyByID(id) {
              {
                return allFamiliesByID.get(id);
              }
            }
            function getFamilyByType(type) {
              {
                return allFamiliesByType.get(type);
              }
            }
            function findAffectedHostInstances(families) {
              {
                var affectedInstances = new Set();
                mountedRoots.forEach(function (root) {
                  var helpers = helpersByRoot.get(root);

                  if (helpers === undefined) {
                    throw new Error(
                      'Could not find helpers for a root. This is a bug in React Refresh.'
                    );
                  }

                  var instancesForRoot = helpers.findHostInstancesForRefresh(
                    root,
                    families
                  );
                  instancesForRoot.forEach(function (inst) {
                    affectedInstances.add(inst);
                  });
                });
                return affectedInstances;
              }
            }
            function injectIntoGlobalHook(globalObject) {
              {
                // For React Native, the global hook will be set up by require('react-devtools-core').
                // That code will run before us. So we need to monkeypatch functions on existing hook.
                // For React Web, the global hook will be set up by the extension.
                // This will also run before us.
                var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;

                if (hook === undefined) {
                  // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
                  // Note that in this case it's important that renderer code runs *after* this method call.
                  // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
                  var nextID = 0;
                  globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                    renderers: new Map(),
                    supportsFiber: true,
                    inject: function (injected) {
                      return nextID++;
                    },
                    onScheduleFiberRoot: function (id, root, children) {},
                    onCommitFiberRoot: function (
                      id,
                      root,
                      maybePriorityLevel,
                      didError
                    ) {},
                    onCommitFiberUnmount: function () {},
                  };
                }

                if (hook.isDisabled) {
                  // This isn't a real property on the hook, but it can be set to opt out
                  // of DevTools integration and associated warnings and logs.
                  // Using console['warn'] to evade Babel and ESLint
                  console['warn'](
                    'Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). ' +
                      'Fast Refresh is not compatible with this shim and will be disabled.'
                  );
                  return;
                } // Here, we just want to get a reference to scheduleRefresh.

                var oldInject = hook.inject;

                hook.inject = function (injected) {
                  var id = oldInject.apply(this, arguments);

                  if (
                    typeof injected.scheduleRefresh === 'function' &&
                    typeof injected.setRefreshHandler === 'function'
                  ) {
                    // This version supports React Refresh.
                    helpersByRendererID.set(id, injected);
                  }

                  return id;
                }; // Do the same for any already injected roots.
                // This is useful if ReactDOM has already been initialized.
                // https://github.com/facebook/react/issues/17626

                hook.renderers.forEach(function (injected, id) {
                  if (
                    typeof injected.scheduleRefresh === 'function' &&
                    typeof injected.setRefreshHandler === 'function'
                  ) {
                    // This version supports React Refresh.
                    helpersByRendererID.set(id, injected);
                  }
                }); // We also want to track currently mounted roots.

                var oldOnCommitFiberRoot = hook.onCommitFiberRoot;

                var oldOnScheduleFiberRoot =
                  hook.onScheduleFiberRoot || function () {};

                hook.onScheduleFiberRoot = function (id, root, children) {
                  if (!isPerformingRefresh) {
                    // If it was intentionally scheduled, don't attempt to restore.
                    // This includes intentionally scheduled unmounts.
                    failedRoots.delete(root);

                    if (rootElements !== null) {
                      rootElements.set(root, children);
                    }
                  }

                  return oldOnScheduleFiberRoot.apply(this, arguments);
                };

                hook.onCommitFiberRoot = function (
                  id,
                  root,
                  maybePriorityLevel,
                  didError
                ) {
                  var helpers = helpersByRendererID.get(id);

                  if (helpers !== undefined) {
                    helpersByRoot.set(root, helpers);
                    var current = root.current;
                    var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
                    // This logic is copy-pasted from similar logic in the DevTools backend.
                    // If this breaks with some refactoring, you'll want to update DevTools too.

                    if (alternate !== null) {
                      var wasMounted =
                        alternate.memoizedState != null &&
                        alternate.memoizedState.element != null &&
                        mountedRoots.has(root);
                      var isMounted =
                        current.memoizedState != null &&
                        current.memoizedState.element != null;

                      if (!wasMounted && isMounted) {
                        // Mount a new root.
                        mountedRoots.add(root);
                        failedRoots.delete(root);
                      } else if (wasMounted && isMounted);
                      else if (wasMounted && !isMounted) {
                        // Unmount an existing root.
                        mountedRoots.delete(root);

                        if (didError) {
                          // We'll remount it on future edits.
                          failedRoots.add(root);
                        } else {
                          helpersByRoot.delete(root);
                        }
                      } else if (!wasMounted && !isMounted) {
                        if (didError) {
                          // We'll remount it on future edits.
                          failedRoots.add(root);
                        }
                      }
                    } else {
                      // Mount a new root.
                      mountedRoots.add(root);
                    }
                  } // Always call the decorated DevTools hook.

                  return oldOnCommitFiberRoot.apply(this, arguments);
                };
              }
            }
            function hasUnrecoverableErrors() {
              // TODO: delete this after removing dependency in RN.
              return false;
            } // Exposed for testing.

            function _getMountedRootCount() {
              {
                return mountedRoots.size;
              }
            } // This is a wrapper over more primitive functions for setting signature.
            // Signatures let us decide whether the Hook order has changed on refresh.
            //
            // This function is intended to be used as a transform target, e.g.:
            // var _s = createSignatureFunctionForTransform()
            //
            // function Hello() {
            //   const [foo, setFoo] = useState(0);
            //   const value = useCustomHook();
            //   _s(); /* Call without arguments triggers collecting the custom Hook list.
            //          * This doesn't happen during the module evaluation because we
            //          * don't want to change the module order with inline requires.
            //          * Next calls are noops. */
            //   return <h1>Hi</h1>;
            // }
            //
            // /* Call with arguments attaches the signature to the type: */
            // _s(
            //   Hello,
            //   'useState{[foo, setFoo]}(0)',
            //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
            // );

            function createSignatureFunctionForTransform() {
              {
                var savedType;
                var hasCustomHooks;
                var didCollectHooks = false;
                return function (type, key, forceReset, getCustomHooks) {
                  if (typeof key === 'string') {
                    // We're in the initial phase that associates signatures
                    // with the functions. Note this may be called multiple times
                    // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).
                    if (!savedType) {
                      // We're in the innermost call, so this is the actual type.
                      savedType = type;
                      hasCustomHooks = typeof getCustomHooks === 'function';
                    } // Set the signature for all types (even wrappers!) in case
                    // they have no signatures of their own. This is to prevent
                    // problems like https://github.com/facebook/react/issues/20417.

                    if (
                      type != null &&
                      (typeof type === 'function' || typeof type === 'object')
                    ) {
                      setSignature(type, key, forceReset, getCustomHooks);
                    }

                    return type;
                  } else {
                    // We're in the _s() call without arguments, which means
                    // this is the time to collect custom Hook signatures.
                    // Only do this once. This path is hot and runs *inside* every render!
                    if (!didCollectHooks && hasCustomHooks) {
                      didCollectHooks = true;
                      collectCustomHooksForSignature(savedType);
                    }
                  }
                };
              }
            }
            function isLikelyComponentType(type) {
              {
                switch (typeof type) {
                  case 'function': {
                    // First, deal with classes.
                    if (type.prototype != null) {
                      if (type.prototype.isReactComponent) {
                        // React class.
                        return true;
                      }

                      var ownNames = Object.getOwnPropertyNames(type.prototype);

                      if (
                        ownNames.length > 1 ||
                        ownNames[0] !== 'constructor'
                      ) {
                        // This looks like a class.
                        return false;
                      } // eslint-disable-next-line no-proto

                      if (type.prototype.__proto__ !== Object.prototype) {
                        // It has a superclass.
                        return false;
                      } // Pass through.
                      // This looks like a regular function with empty prototype.
                    } // For plain functions and arrows, use name as a heuristic.

                    var name = type.name || type.displayName;
                    return typeof name === 'string' && /^[A-Z]/.test(name);
                  }

                  case 'object': {
                    if (type != null) {
                      switch (getProperty(type, '$$typeof')) {
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_MEMO_TYPE:
                          // Definitely React components.
                          return true;

                        default:
                          return false;
                      }
                    }

                    return false;
                  }

                  default: {
                    return false;
                  }
                }
              }
            }

            exports._getMountedRootCount = _getMountedRootCount;
            exports.collectCustomHooksForSignature =
              collectCustomHooksForSignature;
            exports.createSignatureFunctionForTransform =
              createSignatureFunctionForTransform;
            exports.findAffectedHostInstances = findAffectedHostInstances;
            exports.getFamilyByID = getFamilyByID;
            exports.getFamilyByType = getFamilyByType;
            exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
            exports.injectIntoGlobalHook = injectIntoGlobalHook;
            exports.isLikelyComponentType = isLikelyComponentType;
            exports.performReactRefresh = performReactRefresh;
            exports.register = register;
            exports.setSignature = setSignature;
          })();
        }

        /***/
      },

    /***/ './node_modules/react-refresh/runtime.js':
      /*!***********************************************!*\
  !*** ./node_modules/react-refresh/runtime.js ***!
  \***********************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        'use strict';

        if (false) {
        } else {
          module.exports = __webpack_require__(
            /*! ./cjs/react-refresh-runtime.development.js */ './node_modules/react-refresh/cjs/react-refresh-runtime.development.js'
          );
        }

        /***/
      },

    /***/ './node_modules/stackframe/stackframe.js':
      /*!***********************************************!*\
  !*** ./node_modules/stackframe/stackframe.js ***!
  \***********************************************/
      /***/ function (module, exports) {
        var __WEBPACK_AMD_DEFINE_FACTORY__,
          __WEBPACK_AMD_DEFINE_ARRAY__,
          __WEBPACK_AMD_DEFINE_RESULT__;
        (function (root, factory) {
          'use strict';
          // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

          /* istanbul ignore next */
          if (true) {
            !((__WEBPACK_AMD_DEFINE_ARRAY__ = []),
            (__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
            (__WEBPACK_AMD_DEFINE_RESULT__ =
              typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function'
                ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(
                    exports,
                    __WEBPACK_AMD_DEFINE_ARRAY__
                  )
                : __WEBPACK_AMD_DEFINE_FACTORY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined &&
              (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {
          }
        })(this, function () {
          'use strict';
          function _isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
          }

          function _capitalize(str) {
            return str.charAt(0).toUpperCase() + str.substring(1);
          }

          function _getter(p) {
            return function () {
              return this[p];
            };
          }

          var booleanProps = [
            'isConstructor',
            'isEval',
            'isNative',
            'isToplevel',
          ];
          var numericProps = ['columnNumber', 'lineNumber'];
          var stringProps = ['fileName', 'functionName', 'source'];
          var arrayProps = ['args'];
          var objectProps = ['evalOrigin'];

          var props = booleanProps.concat(
            numericProps,
            stringProps,
            arrayProps,
            objectProps
          );

          function StackFrame(obj) {
            if (!obj) return;
            for (var i = 0; i < props.length; i++) {
              if (obj[props[i]] !== undefined) {
                this['set' + _capitalize(props[i])](obj[props[i]]);
              }
            }
          }

          StackFrame.prototype = {
            getArgs: function () {
              return this.args;
            },
            setArgs: function (v) {
              if (Object.prototype.toString.call(v) !== '[object Array]') {
                throw new TypeError('Args must be an Array');
              }
              this.args = v;
            },

            getEvalOrigin: function () {
              return this.evalOrigin;
            },
            setEvalOrigin: function (v) {
              if (v instanceof StackFrame) {
                this.evalOrigin = v;
              } else if (v instanceof Object) {
                this.evalOrigin = new StackFrame(v);
              } else {
                throw new TypeError(
                  'Eval Origin must be an Object or StackFrame'
                );
              }
            },

            toString: function () {
              var fileName = this.getFileName() || '';
              var lineNumber = this.getLineNumber() || '';
              var columnNumber = this.getColumnNumber() || '';
              var functionName = this.getFunctionName() || '';
              if (this.getIsEval()) {
                if (fileName) {
                  return (
                    '[eval] (' +
                    fileName +
                    ':' +
                    lineNumber +
                    ':' +
                    columnNumber +
                    ')'
                  );
                }
                return '[eval]:' + lineNumber + ':' + columnNumber;
              }
              if (functionName) {
                return (
                  functionName +
                  ' (' +
                  fileName +
                  ':' +
                  lineNumber +
                  ':' +
                  columnNumber +
                  ')'
                );
              }
              return fileName + ':' + lineNumber + ':' + columnNumber;
            },
          };

          StackFrame.fromString = function StackFrame$$fromString(str) {
            var argsStartIndex = str.indexOf('(');
            var argsEndIndex = str.lastIndexOf(')');

            var functionName = str.substring(0, argsStartIndex);
            var args = str
              .substring(argsStartIndex + 1, argsEndIndex)
              .split(',');
            var locationString = str.substring(argsEndIndex + 1);

            if (locationString.indexOf('@') === 0) {
              var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(
                locationString,
                ''
              );
              var fileName = parts[1];
              var lineNumber = parts[2];
              var columnNumber = parts[3];
            }

            return new StackFrame({
              functionName: functionName,
              args: args || undefined,
              fileName: fileName,
              lineNumber: lineNumber || undefined,
              columnNumber: columnNumber || undefined,
            });
          };

          for (var i = 0; i < booleanProps.length; i++) {
            StackFrame.prototype['get' + _capitalize(booleanProps[i])] =
              _getter(booleanProps[i]);
            StackFrame.prototype['set' + _capitalize(booleanProps[i])] =
              (function (p) {
                return function (v) {
                  this[p] = Boolean(v);
                };
              })(booleanProps[i]);
          }

          for (var j = 0; j < numericProps.length; j++) {
            StackFrame.prototype['get' + _capitalize(numericProps[j])] =
              _getter(numericProps[j]);
            StackFrame.prototype['set' + _capitalize(numericProps[j])] =
              (function (p) {
                return function (v) {
                  if (!_isNumber(v)) {
                    throw new TypeError(p + ' must be a Number');
                  }
                  this[p] = Number(v);
                };
              })(numericProps[j]);
          }

          for (var k = 0; k < stringProps.length; k++) {
            StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(
              stringProps[k]
            );
            StackFrame.prototype['set' + _capitalize(stringProps[k])] =
              (function (p) {
                return function (v) {
                  this[p] = String(v);
                };
              })(stringProps[k]);
          }

          return StackFrame;
        });

        /***/
      },

    /***/ './node_modules/textarea-caret/index.js':
      /*!**********************************************!*\
  !*** ./node_modules/textarea-caret/index.js ***!
  \**********************************************/
      /***/ (module) => {
        /* jshint browser: true */

        (function () {
          // We'll copy the properties below into the mirror div.
          // Note that some browsers, such as Firefox, do not concatenate properties
          // into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),
          // so we have to list every single property explicitly.
          var properties = [
            'direction', // RTL support
            'boxSizing',
            'width', // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
            'height',
            'overflowX',
            'overflowY', // copy the scrollbar for IE

            'borderTopWidth',
            'borderRightWidth',
            'borderBottomWidth',
            'borderLeftWidth',
            'borderStyle',

            'paddingTop',
            'paddingRight',
            'paddingBottom',
            'paddingLeft',

            // https://developer.mozilla.org/en-US/docs/Web/CSS/font
            'fontStyle',
            'fontVariant',
            'fontWeight',
            'fontStretch',
            'fontSize',
            'fontSizeAdjust',
            'lineHeight',
            'fontFamily',

            'textAlign',
            'textTransform',
            'textIndent',
            'textDecoration', // might not make a difference, but better be safe

            'letterSpacing',
            'wordSpacing',

            'tabSize',
            'MozTabSize',
          ];

          var isBrowser = typeof window !== 'undefined';
          var isFirefox = isBrowser && window.mozInnerScreenX != null;

          function getCaretCoordinates(element, position, options) {
            if (!isBrowser) {
              throw new Error(
                'textarea-caret-position#getCaretCoordinates should only be called in a browser'
              );
            }

            var debug = (options && options.debug) || false;
            if (debug) {
              var el = document.querySelector(
                '#input-textarea-caret-position-mirror-div'
              );
              if (el) el.parentNode.removeChild(el);
            }

            // The mirror div will replicate the textarea's style
            var div = document.createElement('div');
            div.id = 'input-textarea-caret-position-mirror-div';
            document.body.appendChild(div);

            var style = div.style;
            var computed = window.getComputedStyle
              ? window.getComputedStyle(element)
              : element.currentStyle; // currentStyle for IE < 9
            var isInput = element.nodeName === 'INPUT';

            // Default textarea styles
            style.whiteSpace = 'pre-wrap';
            if (!isInput) style.wordWrap = 'break-word'; // only for textarea-s

            // Position off-screen
            style.position = 'absolute'; // required to return coordinates properly
            if (!debug) style.visibility = 'hidden'; // not 'display: none' because we want rendering

            // Transfer the element's properties to the div
            properties.forEach(function (prop) {
              if (isInput && prop === 'lineHeight') {
                // Special case for <input>s because text is rendered centered and line height may be != height
                style.lineHeight = computed.height;
              } else {
                style[prop] = computed[prop];
              }
            });

            if (isFirefox) {
              // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
              if (element.scrollHeight > parseInt(computed.height))
                style.overflowY = 'scroll';
            } else {
              style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
            }

            div.textContent = element.value.substring(0, position);
            // The second special handling for input type="text" vs textarea:
            // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
            if (isInput)
              div.textContent = div.textContent.replace(/\s/g, '\u00a0');

            var span = document.createElement('span');
            // Wrapping must be replicated *exactly*, including when a long word gets
            // onto the next line, with whitespace at the end of the line before (#7).
            // The  *only* reliable way to do that is to copy the *entire* rest of the
            // textarea's content into the <span> created at the caret position.
            // For inputs, just '.' would be enough, but no need to bother.
            span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all
            div.appendChild(span);

            var coordinates = {
              top: span.offsetTop + parseInt(computed['borderTopWidth']),
              left: span.offsetLeft + parseInt(computed['borderLeftWidth']),
              height: parseInt(computed['lineHeight']),
            };

            if (debug) {
              span.style.backgroundColor = '#aaa';
            } else {
              document.body.removeChild(div);
            }

            return coordinates;
          }

          if (true && typeof module.exports != 'undefined') {
            module.exports = getCaretCoordinates;
          } else if (isBrowser) {
            window.getCaretCoordinates = getCaretCoordinates;
          }
        })();

        /***/
      },

    /***/ './src/contentScript.js':
      /*!******************************!*\
  !*** ./src/contentScript.js ***!
  \******************************/
      /***/ (
        __unused_webpack_module,
        __webpack_exports__,
        __webpack_require__
      ) => {
        'use strict';
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */ var diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ =
          __webpack_require__(
            /*! diff-match-patch */ './node_modules/diff-match-patch/index.js'
          );
        /* harmony import */ var diff_match_patch__WEBPACK_IMPORTED_MODULE_0___default =
          /*#__PURE__*/ __webpack_require__.n(
            diff_match_patch__WEBPACK_IMPORTED_MODULE_0__
          );
        /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ =
          __webpack_require__(
            /*! jquery */ './node_modules/jquery/dist/jquery.js'
          );
        /* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default =
          /*#__PURE__*/ __webpack_require__.n(
            jquery__WEBPACK_IMPORTED_MODULE_1__
          );
        /* harmony import */ var textarea_caret__WEBPACK_IMPORTED_MODULE_2__ =
          __webpack_require__(
            /*! textarea-caret */ './node_modules/textarea-caret/index.js'
          );
        /* harmony import */ var textarea_caret__WEBPACK_IMPORTED_MODULE_2___default =
          /*#__PURE__*/ __webpack_require__.n(
            textarea_caret__WEBPACK_IMPORTED_MODULE_2__
          );
        /* provided dependency */ var __react_refresh_utils__ =
          __webpack_require__(
            /*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js'
          );
        __webpack_require__.$Refresh$.runtime = __webpack_require__(
          /*! ./node_modules/react-refresh/runtime.js */ './node_modules/react-refresh/runtime.js'
        );

        ('use strict');

        // import $ from 'jquery';

        // var getCaretCoordinates = require('textarea-caret');

        // Content script file will run in the contextCopy of web page.
        // With content script you can manipulate the web pages using
        // Document Object Model (DOM).
        // You can also pass information to the parent extension.

        // We execute this script by making an entry in manifest.json file
        // under `content_scripts` property

        // For more information on Content Scripts,
        // See https://developer.chrome.com/extensions/content_scripts

        // Log `title` of current active web page
        // const pageTitle = document.head.getElementsByTagName('title')[0].innerHTML;
        // console.log(
        //   `Page title is: '${pageTitle}' - evaluated by Chrome extension's 'contentScript.js' file`
        // );

        // Communicate with background file by sending a message
        // chrome.runtime.sendMessage(
        //   {
        //     type: 'GREETINGS',
        //     payload: {
        //       message: 'Hello, my name is Con. I am from ContentScript.',
        //     },
        //   },
        //   (response) => {
        //     console.log(response.message);
        //   }
        // );

        // // Listen for message
        // chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        //   if (request.type === 'COUNT') {
        //     console.log(`Current count is ${request.payload.count}`);
        //   }

        //   // Send an empty response
        //   // See https://github.com/mozilla/webextension-polyfill/issues/130#issuecomment-531531890
        //   sendResponse({});
        //   return true;
        // });

        // chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        //   chrome.storage.sync.get('extensionState', (data) => {
        //     var currentState = data.extensionState || 'off'; //default to off
        //     if (currentState === 'on') {
        //       console.log('Extension is on hihi');
        //     } else {
        //       console.log('Extension is off hihi');
        //     }
        //   });
        // });

        // function sendWord(word) {
        //   var keyCodes = {
        //     H: 72,
        //     e: 101,
        //     l: 108,
        //     o: 111,
        //   };

        //   for (var i = 0; i < word.length; i++) {
        //     var key = word[i];
        //     var keyCode = keyCodes[key];
        //     var event = new KeyboardEvent('keydown', { keyCode: keyCode, key: key });
        //     document.dispatchEvent(event);
        //   }
        // }

        // Example usage:

        // document.addEventListener('click', (e) => {
        //   chrome.storage.sync.get('extensionState', (data) => {
        //     var currentState = data.extensionState || 'off'; //default to off
        //     if (currentState === 'on') {
        //       console.log('clicked');
        //       sendWord('Hello');
        //       console.log('Extension is on');
        //     } else {
        //       console.log('Extension is off');
        //     }
        //   });
        // });

        // Check the initial state when the content script is injected
        // chrome.storage.sync.get('extensionState', (data) => {
        //   const initialState = data.extensionState || 'off'; //default to off
        //   if (initialState === 'on') {
        //     console.log('Extension is on haha');
        //     document.addEventListener('click keydown', (e) => {
        //       console.log('key triggered');
        //       console.log('key is: ' + e.key);
        //       e.preventDefault();
        //     });
        //   } else {
        //     console.log('Extension is off');
        //   }
        // });

        // chrome.storage.sync.get('extensionState', (data) => {
        //   const initialState = data.extensionState || 'off'; // default to off
        //   if (initialState === 'on') {
        //     console.log('Extension is on hyhy');
        //   } else {
        //     console.log('Extension is off');
        //   }
        // });

        //***************************************************************** */
        //***************************************************************** */
        //***************************************************************** */
        //***************************************************************** */

        //SETTING PERSISTENT STORAGE VARIABLES

        // const extensionStateSetting = ['onOff', 'contextAware', 'emojiInput', 'emojiOutput', 'aiModel', 'userApiKey', 'metaShortcut', 'keyShortcut', 'autoSelectcontext']
        // chrome.storage.sync.get(extensionStateSetting, (data) => {
        //   const onOff = data.onOff || 'on'; //default to off;
        //   const contextAware = data.contextAware || 'off'; //default to off;
        //   const emojiInput = data.emojiInput || '🤖'; //default to off;
        //   const emojiOutput = data.emojiOutput || '✨'; //default to off;
        //   const aiModel = data.aiModel || 'ChatGPT'; //default to curie;
        //   const userApiKey = data.userApiKey || ''; //default to '';
        //   const metaShortcut = data.metaShortcut || 'ctrl'; //default to off;
        //   const keyShortcut = data.keyShortcut || 'space'; //default to space;
        //   const autoSelectcontext = data.autoSelectcontext || 'off'; //default to off;
        // })

        //THIS IS WHERE THE APP IS STARTED
        $(function () {
          const dmp =
            new (diff_match_patch__WEBPACK_IMPORTED_MODULE_0___default())();

          // INITIAL VALUES OF DYNAMIC VARIABLES

          const conversation = [];

          var sessionOn = false;
          var submitedAnswerReturned = false;
          var generatingResponse = false;
          var inputtingPrompt = false;
          // var rectDivs = null;
          var rectEmojiInput = null;
          var rectEmojiOutput = null;
          var fontSize = null;
          var rectBeforePrompt = null;
          var rectAfterPrompt = null;
          var textFieldPosition = null;
          var textFieldPositionTop = null;
          var textFieldPositionLeft = null;
          var textFieldScrollTop = null;
          var textFieldScrollLeft = null;
          var rectBeforePromptTop = null;
          var rectBeforePromptLeft = null;
          var rectAfterPromptTop = null;
          var rectAfterPromptLeft = null;

          var prompt = '';
          var contextCopy = '';
          var contextBeforePrompt = '';
          var contextAfterPrompt = '';
          var initialValue;
          var currentValue;
          var valueLengthAfterCursorInputOffset = 0; //must be initialized to zero
          var promptCursorStart;
          var currentCaretPos;
          var textField;

          var indexLimitAfterPrompt;
          var indexLimitBeforePrompt;
          const regexWhiteSpace = /^\s$/;

          //used to prevent selection of text outside of index limit
          //determine if selection is forward or backward
          var prevSelectionStart = 0;
          var prevSelectionEnd = 0;
          var mouseMoved = false;
          var mouseDown = false;
          var direction = null;

          //used to prevent clicking to move cursor outside of index limit
          //compare with caret coordinates
          //pairs of both top and left cooridnates
          var indexLimitBeforeCoordinates;
          var indexLimitAfterCoordinates;
          //caret coordinates - constantly tracking
          var currentCursorX = null;
          var currentCursorY = null;
          //specific coordinates break down for easier comparison
          var indexLimitAfterCoordinatesLeft;
          var indexLimitAfterCoordinatesTop;
          var indexLimitBeforeCoordinatesLeft;
          var indexLimitBeforeCoordinatesTop;

          function insertUpdateHtmlRectAtIndex(index) {
            // console.log('updated');
            if (index === 'rect-before-prompt') {
              createRect('rect', 'rect-before-prompt');
              rectBeforePrompt = document.getElementById('rect-before-prompt');
            } else if (index === 'rect-after-prompt') {
              createRect('rect', 'rect-after-prompt');
              rectAfterPrompt = document.getElementById('rect-after-prompt');
            }

            var coordinates;
            textFieldPosition = textField.getBoundingClientRect();
            textFieldPositionTop = textFieldPosition.top;
            textFieldPositionLeft = textFieldPosition.left;
            textFieldScrollTop = textField.scrollTop;
            textFieldScrollLeft = textField.scrollLeft;

            if (index === 'rect-before-prompt') {
              coordinates =
                textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                  textField,
                  indexLimitBeforePrompt
                );
              rectBeforePromptTop =
                textFieldPositionTop -
                textFieldScrollTop +
                coordinates.top +
                'px';
              rectBeforePrompt.style.top = rectBeforePromptTop;
              rectBeforePromptLeft =
                textFieldPositionLeft -
                textFieldScrollLeft +
                coordinates.left -
                25 +
                'px';
              rectBeforePrompt.style.left = rectBeforePromptLeft;
            } else if (index === 'rect-after-prompt') {
              coordinates =
                textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                  textField,
                  indexLimitAfterPrompt
                );

              rectAfterPromptTop =
                textFieldPositionTop -
                textFieldScrollTop +
                coordinates.top +
                'px';
              rectAfterPrompt.style.top = rectAfterPromptTop;
              rectAfterPromptLeft =
                textFieldPositionLeft -
                textFieldScrollLeft +
                coordinates.left +
                3 +
                'px';
              rectAfterPrompt.style.left = rectAfterPromptLeft;
            }

            checkRectWithinTextArea(index);
            // updateRect(index);
          }

          function createRect(classRect, idRect) {
            console.log('create rect triggered hhhhhhhhhhhh');
            fontSize = parseFloat(
              getComputedStyle(textField).getPropertyValue('font-size')
            );
            let bodyColor = window.getComputedStyle(
              document.body
            ).backgroundColor;
            var backgroundColor =
              getComputedStyle(textField).getPropertyValue('background-color');

            if ((backgroundColor = 'rgba(0, 0, 0, 0)')) {
              backgroundColor = bodyColor;
            }
            var rect = document.createElement('div');
            rect.innerHTML = rectEmojiInput;

            var cssLoading = `
  @keyframes fadeInOut {
    0% { opacity: 0; }
    50% { opacity: 1; }
    100% { opacity: 0; }
  }
  
  .animate {
    animation: fadeInOut 2s ease-in-out infinite;
  }`;

            // Check if the browser supports textContent property for style elements.
            // This is a safer way as Internet Explorer only supports the 'styleSheet.cssText' property to add styles
            var styleElement = document.getElementById('secretgpt-style');
            if (styleElement.styleSheet) {
              styleElement.styleSheet.cssText += cssLoading;
            } else {
              styleElement.appendChild(document.createTextNode(cssLoading));
            }

            // Add 'user-select: none' style to make it non-selectable
            // rect.style.userSelect = 'none';
            // rect.style.MozUserSelect = 'none';
            // rect.style.msUserSelect = 'none';

            // Add 'pointer-events: none' style to make clicks pass through
            // rect.style.pointerEvents = 'none';

            rect.setAttribute('class', classRect);
            rect.setAttribute('id', idRect);
            document.body.appendChild(rect);
            // var body = document.body;
            // var firstChild = body.firstChild;

            // body.insertBefore(rect, firstChild);
            console.log(
              'yoloooooooooooooo' + getParentFixedOrSticky(textField)
            );

            rect.style.position = 'fixed';
            // rect.style.backgroundColor = '#8238c0';
            rect.style.backgroundColor = backgroundColor;
            rect.style.borderRadius = '50%';
            rect.style.height = fontSize * 1.5 + 'px';
            rect.style.width = fontSize * 1.5 + 'px';
            // rect.style.padding = '10px';
            // rect.style.opacity = '0.5';
            rect.style.zIndex = '9999';

            rect.style.display = 'flex';
            rect.style.justifyContent = 'center';
            rect.style.alignItems = 'center';
            // rect.style.height = '100%'; // Or another height depending on your layout
            rect.style.textAlign = 'center';
            // rect.style.transform = 'translate3d(0, 0, 0)';

            return rect;
          }

          //find top parent that is not body
          function findTopParent(textField) {
            let currentElement = textField;

            while (
              currentElement.parentElement !== null &&
              currentElement.parentElement.tagName !== 'BODY'
            ) {
              currentElement = currentElement.parentElement;
            }

            return currentElement;
          }

          function getParentFixedOrSticky(element) {
            let parentNode = element.parentNode;

            while (parentNode != null && parentNode instanceof Element) {
              const position = window.getComputedStyle(parentNode).position;
              if (position === 'fixed' || position === 'sticky') {
                return position; // return the position value ('fixed' or 'sticky') instead of true
              }
              parentNode = parentNode.parentNode;
            }

            return false;
          }

          var startTime = new Date().getTime();
          function updateRect(index) {
            try {
              //get coordinates of index limit to place rect

              var coordinates;
              textFieldPosition = textField.getBoundingClientRect();
              textFieldPositionTop = textFieldPosition.top;
              textFieldPositionLeft = textFieldPosition.left;
              textFieldScrollTop = textField.scrollTop;
              textFieldScrollLeft = textField.scrollLeft;

              //check if text field is input element

              // if (index === 'rect-before-prompt') {
              //   coordinates = getCaretCoordinates(textField, indexLimitBeforePrompt);
              //   rectBeforePrompt.style.top =
              //     textFieldPositionTop - textFieldScrollTop + coordinates.top + 'px';
              //   rectBeforePrompt.style.left =
              //     textFieldPositionLeft -
              //     textFieldScrollLeft +
              //     coordinates.left -
              //     25 +
              //     'px';
              // } else if (index === 'rect-after-prompt') {
              //   coordinates = getCaretCoordinates(textField, indexLimitAfterPrompt);

              //   rectAfterPrompt.style.top =
              //     textFieldPositionTop - textFieldScrollTop + coordinates.top + 'px';
              //   rectAfterPrompt.style.left =
              //     textFieldPositionLeft -
              //     textFieldScrollLeft +
              //     coordinates.left +
              //     3 +
              //     'px';
              // }

              if (index === 'rect-before-prompt') {
                coordinates =
                  textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                    textField,
                    indexLimitBeforePrompt
                  );
                let newXPosition =
                  textFieldPositionLeft -
                  textFieldScrollLeft +
                  coordinates.left -
                  25 -
                  parseInt(rectBeforePromptLeft);
                let newYPosition =
                  textFieldPositionTop -
                  textFieldScrollTop +
                  coordinates.top -
                  parseInt(rectBeforePromptTop);
                rectBeforePrompt.style.transform = `translate3d(${newXPosition}px, ${newYPosition}px, 0)`;
              } else if (index === 'rect-after-prompt') {
                coordinates =
                  textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                    textField,
                    indexLimitAfterPrompt
                  );
                let newXPosition =
                  textFieldPositionLeft -
                  textFieldScrollLeft +
                  coordinates.left +
                  3 -
                  parseInt(rectAfterPromptLeft);
                let newYPosition =
                  textFieldPositionTop -
                  textFieldScrollTop +
                  coordinates.top -
                  parseInt(rectAfterPromptTop);
                rectAfterPrompt.style.transform = `translate3d(${newXPosition}px, ${newYPosition}px, 0)`;
              }
            } catch (error) {
              console.log(error);
            }
          }

          function checkRectWithinTextArea(index) {
            var rect;

            if (index === 'rect-before-prompt') {
              rect = rectBeforePrompt;
            } else if (index === 'rect-after-prompt') {
              rect = rectAfterPrompt;
            }

            //parse values into int to compare below with text area coordinates
            var rectPosition = rect.getBoundingClientRect();

            var rectTop = rectPosition.top;
            var rectLeft = rectPosition.left;

            //adding some buffer pixels because divs are nested
            //hence coordinates might be overflow hidden and not correct
            if (
              rectTop > textFieldPosition.bottom + 5 ||
              rectTop < textFieldPositionTop - 5 ||
              rectLeft < textFieldPositionLeft - 30 ||
              rectLeft > textFieldPosition.right + 5
            ) {
              rect.style.display = 'none';
              //console.log('RECT IS OUTSIDE TEXTAREA');
            } else {
              // If the div is inside the textarea, show it
              rect.style.display = 'block';
              //console.log('RECT IS INSIDE TEXTAREA');
            }
          }

          //check for overflowing behavior in textfield to add more row or height
          function adjustTextArea(textField) {
            const isOverflowing =
              textField.scrollHeight > textField.clientHeight;

            if (isOverflowing) {
              // Check if the textarea has a 'rows' attribute
              if (textField.hasAttribute('rows')) {
                // Increase the number of rows by 1
                const rows = parseInt(textField.getAttribute('rows'), 10);
                textField.setAttribute('rows', rows + 1);
                console.log('rows added');
              } else if (textField.style.height) {
                // If no 'rows' attribute, check for 'height' attribute and double it
                const height = parseInt(textField.style.height, 10);
                textField.style.height = height * 2 + 'px';
                console.log('height added');
              }
            }
          }

          //used to simulate chatgpt response

          function typeTextAtCaret(textField, textToInsert, delay) {
            return new Promise((resolve, reject) => {
              var caretPos = textField.selectionStart;
              var inputText = textField.value;
              var words = textToInsert.split(' ');
              var i = 0;

              textField.setAttribute('readonly', 'true');
              function typeWord() {
                //Disable the textField

                if (i < words.length && generatingResponse === true) {
                  var space = i < words.length - 1 ? ' ' : ''; // if it's not the last word, append a space
                  inputText =
                    inputText.substring(0, caretPos) +
                    words[i] +
                    space +
                    inputText.substring(caretPos);
                  textField.value = inputText;

                  //triggers input to handle input and update rect positions
                  $(textField).trigger('input');
                  adjustTextArea(textField);
                  caretPos += words[i].length + space.length; // update caret position

                  // Immediately update caret position in the text field
                  textField.setSelectionRange(caretPos, caretPos);

                  i++;
                  // textField.dispatchEvent(new Event('keydown'));
                  console.log;
                  if (generatingResponse === true) {
                    setTimeout(typeWord, delay);
                  } else {
                    reject('generating response stopped');
                  }
                } else {
                  //Enable the textField
                  resolve();
                }
              }
              try {
                setTimeout(typeWord, delay * 2);
              } catch {
                reject('generating response stopped');
              }
              textField.removeAttribute('readonly');
            });
          }

          function reCaptureInitialValue(e) {
            // console.log('RECAPTURE VALUE TRIGGERED');
            if (
              prompt.length === 0 &&
              [
                'ArrowLeft',
                'ArrowRight',
                'ArrowUp',
                'ArrowDown',
                'Delete',
                'Backspace',
              ].includes(e.key)
            ) {
              //don't allow users to move arround cursor once mode is on and prompt is 0
              e.preventDefault();
            } else if (
              prompt.length === 0 &&
              e.type === 'mousedown' &&
              !$(this).hasClass('exclude-checkbox')
            ) {
              //don't allow users to move arround cursor once mode is on and prompt is 0
              e.preventDefault();
            }
          }

          //IF ALREADY FOCUS IN INPUT/TEXT AREA, ALSO CAPTURES THE INITIAL VALUE BY CALLING THIS FUNCTION
          //USE THIS FUNCTION TO CAPTURE THE ELEMENT THAT THE INITIAL VALUE BELONGS TO
          //THIS IS TO ENSURE THAT THE INITIAL VALUE IS RETURNED TO THE CORRECT ELEMENT WHEN MODE IS OFF

          function captureInitialValue(element) {
            //CHECK IF MODE IS ON AND IF THE INPUT/TEXTAREA IS NOT EXCLUDED (BECAUSE MIGHT BE A BUTTON)
            if (
              sessionOn === true &&
              !$(element).hasClass('exclude-checkbox')
            ) {
              initialValue = $(element).val();

              //STORE THE INITIAL VALUE IN THE ELEMENT'S ATTRIBUTE "data-initial-value"
              $(element).attr('data-initial-value', initialValue);
              console.log('CAPTURE VALUE TRIGGERED');

              //GET INITIAL CURSOR POSITION WHEN MODE JUST TURNED ON
              promptCursorStart = element.selectionEnd;

              //INITIALS LIMIT THRESHOLD BEFORE TYPING IN THE PROMPT (TO CONTROL THE CURSOR NOT TO GO OUTSIDE OF THE PROMPT)
              //CAPTURE INITIAL VALUE ONLY, SO indexLimitBeforePrompt = indexLimitAfterPrompt - WILL BE UPDATED LATER IN handleInput FUNCTION
              //valueLengthAfterCursorInputOffset IS THE LENGTH OF THE PROMPT AFTER USER HAS TYPED IN IT
              indexLimitBeforePrompt = promptCursorStart;

              indexLimitAfterPrompt =
                indexLimitBeforePrompt + valueLengthAfterCursorInputOffset;

              //get context for before and after prompt
              contextBeforePrompt = initialValue.substring(
                0,
                indexLimitBeforePrompt
              );
              contextAfterPrompt = initialValue.substring(
                indexLimitAfterPrompt
              );

              //initalize the rect thresholds - only do this once
              insertUpdateHtmlRectAtIndex('rect-before-prompt');
              insertUpdateHtmlRectAtIndex('rect-after-prompt');

              //console.log('prompt cursor start ' + promptCursorStart);
              //console.log('Index limit before prompt ' + indexLimitBeforePrompt);
              //console.log(
              //   'Offset limit after prompt ' + valueLengthAfterCursorInputOffset
              // );
              //console.log('Index limit after prompt ' + indexLimitAfterPrompt);
            }
          }

          //PREVENT DELETE WHEN THERE IS NO PROMPT TO AVOID CHANGING THE INITIAL VALUE
          //THIS IS FOR MOUSEDOWN TO PREVENT PRESSING DELETE CONTINUOUSLY, WORKS WITH KEYUP PREVENT DELETE IN RECAPTUREVALUE ABOVE
          function handleWhiteSpace(e) {
            if (sessionOn === true) {
              if (
                prompt.length === 0 &&
                (regexWhiteSpace.test(e.key) ||
                  (e.ctrlKey && e.key === 'a') ||
                  ['Enter', 'Backspace', 'Delete', 'Tab', 'Escape'].includes(
                    e.key
                  ))
              ) {
                console.log('WHITE SPACE HANDLE TRIGGERED');
                //IF INPUT IS NOT A NON-WHITE SPACE CHARACTER, PREVENT DEFAULT
                e.preventDefault();
                //console.log('prevent default and non-arrow keys');
                return;
              }
            }
          }

          function handleInput(e) {
            //OPERATIONS WHEN INPUT IS FOCUSED AND MODE IS ON
            //UPDATE INITIAL AND CURRENT VALUE TO COMPARE LATER AND EXTRACT THE PROMPT
            if (sessionOn === true) {
              console.log('INPUT TRIGGERED');
              // console.log('current value is ' + textField.value);

              var previousPrompt = prompt;
              currentValue = textField.value; //GET THE CURRENT VALUE OF THE INPUT/TEXT AREA FOR PROMPT EXTRACTION

              var currentPrompt = dmp.diff_main(initialValue, currentValue);
              dmp.diff_cleanupSemantic(currentPrompt);
              //console.log(currentPrompt);
              currentPrompt = currentPrompt
                .filter((diff) => diff[0] === 1)
                .map((diff) => diff[1])
                .join('');

              //console.log('previous prompt is ' + previousPrompt);
              //console.log('current prompt is ' + currentPrompt);

              if (currentPrompt.length - previousPrompt.length > 0) {
                valueLengthAfterCursorInputOffset +=
                  currentPrompt.length - previousPrompt.length;
              } else if (currentPrompt.length - previousPrompt.length < 0) {
                valueLengthAfterCursorInputOffset -=
                  previousPrompt.length - currentPrompt.length;
              }

              //IF INPUTTING, UPDATE THE CURRENT PROMPT (EXTRACT THE CURRENT PROMPT)

              //UPDATE THE LIMIT AFTER PROMPT THRESHOLD
              indexLimitAfterPrompt =
                promptCursorStart + valueLengthAfterCursorInputOffset;
              // indexLimitAfterCoordinates = getCaretCoordinates(
              //   e.target,
              //   indexLimitAfterPrompt
              // );
              // indexLimitBeforeCoordinates = getCaretCoordinates(
              //   e.target,
              //   indexLimitBeforePrompt
              // );

              updateRect('rect-before-prompt');
              updateRect('rect-after-prompt');
              checkRectWithinTextArea('rect-before-prompt');
              checkRectWithinTextArea('rect-after-prompt');

              //console.log('prompt cursor start ' + promptCursorStart);
              //console.log('Index limit after prompt ' + indexLimitAfterPrompt);
              prompt = currentPrompt;
              currentCaretPos = textField.selectionEnd;
            }
          }

          //PREVENTS THE CURSOR FROM GOING OUTSIDE OF THE PROMPT
          //BY LIMITING THE ARROW KEYS AND BACKSPACE/DELETE TO THE PROMPT ONLY
          function handleKeyArrows(e) {
            //and delete keys
            if (sessionOn === true) {
              //console.log('KEY ARROW TRIGGERED');

              if (e.key === 'ArrowLeft') {
                currentCaretPos = e.target.selectionStart - 1;
              } else if (e.key === 'ArrowRight') {
                currentCaretPos = e.target.selectionEnd + 1;
              }

              //HANDLE ARROW UP AND DOWN - RESET AT START AND END OF PROMPT FOR SIMPLICITY
              if (e.key === 'ArrowUp') {
                e.preventDefault();
                e.target.setSelectionRange(
                  indexLimitBeforePrompt,
                  indexLimitBeforePrompt
                );
                currentCaretPos = indexLimitBeforePrompt;
              } else if (e.key === 'ArrowDown') {
                e.preventDefault();
                e.target.setSelectionRange(
                  indexLimitAfterPrompt,
                  indexLimitAfterPrompt
                );
                currentCaretPos = indexLimitAfterPrompt;
              }

              //HANDLE CONTROL ALL WHEN PROMPT IS NOT 0

              if (prompt.length > 0 && e.ctrlKey && e.key === 'a') {
                e.preventDefault();
                e.target.setSelectionRange(
                  indexLimitBeforePrompt,
                  indexLimitAfterPrompt
                );
              }

              //IFF ARROW LEFT AND UP WHEN THRESHOLD AT THE START OF THE PROMPT IS TOUCHED
              //IF ARROW RIGHT AND DOWN WHEN THRESHOLD AT THE END OF THE PROMPT IS TOUCHED
              //THEN RESET CURSOR TO THE ENDING POSITION OF THE PROMPT AND PREVENT DEFAULT VALUE
              //ALSO CHECKS IF SHIFT KEY IS PRESSED TO STILL ALLOW FOR TEXT SELECTION ONCE

              if (
                e.shiftKey &&
                ['ArrowLeft', 'ArrowUp', 'Backspace'].includes(e.key) &&
                currentCaretPos < indexLimitBeforePrompt &&
                prompt.length > 0
              ) {
                //console.log('HAS SHIFT');
                e.target.setSelectionRange(
                  indexLimitBeforePrompt,
                  indexLimitBeforePrompt
                );
                e.preventDefault();
                //console.log('crossing start prevented');
              } else if (
                !e.shiftKey &&
                ['ArrowLeft', 'ArrowUp', 'Backspace'].includes(e.key) &&
                currentCaretPos <= indexLimitBeforePrompt &&
                prompt.length > 0
              ) {
                //console.log('NO SHIFT');
                e.target.setSelectionRange(
                  indexLimitBeforePrompt,
                  indexLimitBeforePrompt
                );
                e.preventDefault();
                //console.log('crossing start prevented');
              }

              if (
                e.shiftKey &&
                ['ArrowRight', 'ArrowDown', 'Delete'].includes(e.key) &&
                currentCaretPos > indexLimitAfterPrompt &&
                prompt.length > 0
              ) {
                e.target.setSelectionRange(
                  indexLimitAfterPrompt,
                  indexLimitAfterPrompt
                );
                e.preventDefault();
                //console.log('crossing end prevented');
              } else if (
                !e.shiftKey &&
                ['ArrowRight', 'ArrowDown', 'Delete'].includes(e.key) &&
                currentCaretPos >= indexLimitAfterPrompt &&
                prompt.length > 0
              ) {
                e.target.setSelectionRange(
                  indexLimitAfterPrompt,
                  indexLimitAfterPrompt
                );
                e.preventDefault();
                //console.log('crossing end prevented');
              }
            }
          }

          //recalculate index limits accounting for scrolls and offsets
          //to be used in higher functions
          //update cursor and caret coordinates any time a mouse move
          //for preventing action outside of index limit
          function updateCooridnates(e) {
            // var textField = e.target;
            //note that the scroll event does not give the current cursor coordinates offsetX and offsetY
            // console.log('MOUSE MOVE UPDATE PIXELS TRIGGERED because of ' + e.type);
            currentCursorX = e.offsetX;
            currentCursorY = e.offsetY;
            indexLimitAfterCoordinates =
              textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                textField,
                indexLimitAfterPrompt
              );
            indexLimitBeforeCoordinates =
              textarea_caret__WEBPACK_IMPORTED_MODULE_2___default()(
                textField,
                indexLimitBeforePrompt
              );

            //before
            indexLimitBeforeCoordinatesLeft =
              -textField.scrollLeft + indexLimitBeforeCoordinates.left;

            indexLimitBeforeCoordinatesTop =
              -textField.scrollTop + indexLimitBeforeCoordinates.top;

            //after
            indexLimitAfterCoordinatesLeft =
              -textField.scrollLeft + indexLimitAfterCoordinates.left;

            indexLimitAfterCoordinatesTop =
              -textField.scrollTop + indexLimitAfterCoordinates.top;

            // console.log('index limit after coordinates left ' + indexLimitAfterCoordinatesLeft);
            // console.log('index limit after coordinates top ' + indexLimitAfterCoordinatesTop);
            // console.log(
            //   'index limit before coordinates left ' + indexLimitBeforeCoordinatesLeft
            // );
            // console.log(
            //   'index limit before coordinates top ' + indexLimitBeforeCoordinatesTop
            // );
            // console.log('current cursor x ' + currentCursorX);
            // console.log('current cursor y ' + currentCursorY);
          }

          const cssClassHideSelect =
            '.textarea-blind-select::selection { background-color: transparent; }';

          function handleMouseDown(e) {
            //CHECK COORDINATES OF CURSOR (NOT CLICKED) AND COMPARE WITH COORDINATES OF INDEX BEFORE AND AFTER
            //IF BEYOND THRESHOLD, PREVENT MOUSE DOWN EVENT CLICKING OUTSIDE OF THRESHOLD
            let clickOutside = false;
            setTimeout(() => {
              currentCaretPos = e.target.selectionEnd;
              mouseDown = true;
              prevSelectionStart = e.target.selectionStart;
              prevSelectionEnd = e.target.selectionEnd;
            }, 0);

            updateCooridnates(e);

            //check if click is on the left or above the index before limit
            //to prevent default click outside of index limit
            if (
              currentCursorY < indexLimitBeforeCoordinatesTop ||
              (currentCursorY > indexLimitBeforeCoordinatesTop &&
                currentCursorY < indexLimitBeforeCoordinatesTop + fontSize &&
                currentCursorX < indexLimitBeforeCoordinatesLeft)
            ) {
              clickOutside = true;
              console.log('click outside prevented above');
              e.preventDefault();
              e.target.setSelectionRange(
                indexLimitBeforePrompt,
                indexLimitBeforePrompt
              );
            } else if (
              //check if click is on the right or below the index after limit
              currentCursorY > indexLimitAfterCoordinatesTop + fontSize ||
              (currentCursorY > indexLimitAfterCoordinatesTop &&
                currentCursorY < indexLimitAfterCoordinatesTop + fontSize &&
                currentCursorX > indexLimitAfterCoordinatesLeft)
            ) {
              clickOutside = true;
              console.log('click outside prevented below');
              e.preventDefault();
              e.target.setSelectionRange(
                indexLimitAfterPrompt,
                indexLimitAfterPrompt
              );
            }

            if (clickOutside) {
              if (e.detail >= 2) {
                console.log('Double click outside threshold');
                //turn mode off
                changeModeOnOff();
              }
            }

            function checkSelectionDirection(element) {
              const selectionStart = element.selectionStart;
              const selectionEnd = element.selectionEnd;

              if (
                selectionEnd > prevSelectionEnd ||
                selectionStart > prevSelectionStart
              ) {
                // console.log('Forward');
                return 'forward';
              } else if (
                selectionEnd < prevSelectionEnd ||
                selectionStart < prevSelectionStart
              ) {
                // console.log('Backward');
                return 'backward';
              } else {
                // console.log('No selection');
                return 'no selection';
              }

              // Update previous selection positions
              prevSelectionStart = selectionStart;
              prevSelectionEnd = selectionEnd;
            }

            function preventMouseDragSelect(e) {
              if (mouseDown) {
                direction = checkSelectionDirection(e.target);
                if (direction === 'backward') {
                  currentCaretPos = e.target.selectionStart;
                } else if (direction === 'forward') {
                  currentCaretPos = e.target.selectionEnd;
                }
                if (currentCaretPos < indexLimitBeforePrompt) {
                  e.target.setAttribute('readonly', 'true');
                  e.target.classList.add('textarea-blind-select');
                } else if (currentCaretPos > indexLimitAfterPrompt) {
                  e.target.setAttribute('readonly', 'true');
                  e.target.classList.add('textarea-blind-select');
                }
              }
            }
            $(document).on('mousemove', preventMouseDragSelect);
            $(this).one('mouseup', function () {
              // console.log('cleared event');
              // When the mouse button is released or the cursor leaves the element,
              // clear the interval, stopping the repeating function
              $(document).off('mousemove', preventMouseDragSelect);
              mouseDown = false;
              if (e.target.hasAttribute('readonly')) {
                e.target.removeAttribute('readonly');
                e.target.classList.remove('textarea-blind-select');
                if (direction === 'backward') {
                  e.target.setSelectionRange(
                    indexLimitBeforePrompt,
                    indexLimitBeforePrompt
                  );
                } else if (direction === 'forward') {
                  e.target.setSelectionRange(
                    indexLimitAfterPrompt,
                    indexLimitAfterPrompt
                  );
                }
              }
              mouseMoved = false;
              // clearInterval(intervalId);
            });
          }

          //HANDLE SELECT ALL WITH TRIPLE CLICK
          function handleMouseClick(e) {
            if (prompt.length == 0 && (e.detail === 3 || e.detail === 2)) {
              //console.log('TRIPLE CLICK TRIGGERED WHEN NO PROMPT');
              e.preventDefault();
            } else if (prompt.length > 0 && e.detail > 2) {
              //console.log('TRIPLE CLICK TRIGGERED WITH PROMPT');
              e.preventDefault();
              e.target.setSelectionRange(
                indexLimitBeforePrompt,
                indexLimitAfterPrompt
              );
            }
          }

          function ensureSpacesAroundCaret(element) {
            let caretPos = element.selectionStart;
            let text = element.value;
            let addedSpace = false;

            // Check if there is a space before the caret position
            const spaceBefore =
              caretPos > 0 && text.charAt(caretPos - 1) === ' ';

            // Check if there is a space after the caret position
            const spaceAfter =
              caretPos < text.length && text.charAt(caretPos) === ' ';

            // Add a space before the caret position if missing
            if (!spaceBefore) {
              text = text.slice(0, caretPos) + ' ' + text.slice(caretPos);
              addedSpace = true;
            }

            // Add a space after the caret position if missing
            if (!spaceAfter) {
              text =
                text.slice(0, caretPos + (addedSpace ? 1 : 0)) +
                ' ' +
                text.slice(caretPos + (addedSpace ? 1 : 0));
            }

            // Update the value and set the caret position
            element.value = text;
            element.selectionStart = caretPos + (addedSpace ? 1 : 0);
            element.selectionEnd = caretPos + (addedSpace ? 1 : 0);
          }

          // //SHORTCUT control enter TO TURN MODE ON
          checkKeyBoardShortcut('ctrl', 'c', function (e) {
            let selectedText = window.getSelection().toString().trim(); // Get the selected text
            if (selectedText.length > 0) {
              contextCopy = selectedText; // Save the selected text to the contextCopyPrompt variable
              console.log(`Text saved to contextCopyPrompt: ${contextCopy}`);
            }
          });

          //Escape when inputting prompt and turning mode off
          //When generating prompt
          //When response is already returned
          checkKeyBoardShortcut(null, 'Escape', function (e) {
            if (
              sessionOn === true &&
              submitedAnswerReturned === false &&
              generatingResponse === false &&
              inputtingPrompt === true
            ) {
              //if in session and not generating response, turn off mode
              //means when typing
              e.preventDefault();
              console.log('escaped');
              changeModeOnOff();
            } else if (
              sessionOn === true &&
              generatingResponse === false &&
              submitedAnswerReturned === true &&
              inputtingPrompt === false
            ) {
              //turn mode off if not generating response and response is already returned
              e.preventDefault();
              console.log('escaped');
              changeModeOnOff();
            } else if (
              sessionOn === true &&
              submitedAnswerReturned === false &&
              generatingResponse === true &&
              inputtingPrompt === false
            ) {
              //when generating response, stop and turn mode off if shortcut is met
              console.log('stop by escaped while inputting prompt');
              textField.value = initialValue;
              changeModeOnOff();
            }
          });

          //Enter to submit prompt to server
          checkKeyBoardShortcut(null, 'Enter', function (e) {
            if (
              //if prompt is ready and shortcut is clicked
              //submit to server and start generting response
              sessionOn === true &&
              submitedAnswerReturned === false &&
              generatingResponse === false &&
              inputtingPrompt === true
            ) {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
              console.log('submitting prompt');
              submitPrompt(e, prompt, contextCopy);
            } else if (
              sessionOn === true &&
              generatingResponse === false &&
              submitedAnswerReturned === true &&
              inputtingPrompt === false
            ) {
              //turn mode off if not generating response and response is already returned
              e.preventDefault();
              e.stopPropagation();
              console.log('escaped when answer is available');
              changeModeOnOff();
            }
          });

          checkKeyBoardShortcut('ctrl', ' ', function (e) {
            if (
              // turn mode on if no in session
              //also later Enter to submit to server
              sessionOn === false
            ) {
              console.log('turning mode on extension');
              changeModeOnOff();
            } else if (
              //if prompt is ready and shortcut is clicked
              //submit to server and start generting response
              sessionOn === true &&
              submitedAnswerReturned === false &&
              generatingResponse === false &&
              inputtingPrompt === true
            ) {
              console.log('submitting prompt');
              submitPrompt(e, prompt, contextCopy);
            } else if (
              //if response is already returned
              //allow inputting a new prompt to send to server
              //delete the previous answer and submit new prompt
              sessionOn === true &&
              submitedAnswerReturned === true &&
              generatingResponse === false &&
              inputtingPrompt === false
            ) {
              console.log('reinputting prompt');
              reInputPrompt(e);
            }
          });

          function handleBlurUnfocus(e) {
            if (
              sessionOn === true &&
              submitedAnswerReturned === false &&
              generatingResponse === true &&
              inputtingPrompt === false
            ) {
              textField.value = initialValue;
              console.log('exit blur');

              changeModeOnOff();
            } else {
              changeModeOnOff();
            }
          }

          function handleWindowEvents(e) {
            requestAnimationFrame(() => {
              updateRect('rect-before-prompt');
              updateRect('rect-after-prompt');
              // checkRectWithinTextArea('rect-before-prompt');
              // checkRectWithinTextArea('rect-after-prompt');
            });
            console.log('window scrolling update rect');
          }

          //REMOVE THE SCROLLBAR WIDTH IN TEXTAREA ELEMENTS SO THEY DON'T INTERFERE WITH LINE WRAPPING
          //THIS HELPS THE GET COORDINATES FUNCTION TO WORK PROPERLY AND PREVENTS THE CURSOR FROM GOING OUTSIDE OF THE PROMPT IN HANDLEMOUSEDOWN FUNCTION
          //FOR NOW, DON'T REMOVE THIS CSS RULE EVEN WHEN TURNED OFF MODE, BECAUSE MIGHT BREAK COORDINATES FUNCTION
          const cssRuleRemoveScrollBar =
            'textarea::-webkit-scrollbar { width: 0px; }';
          const styleElement = document.createElement('style');
          styleElement.id = 'secretgpt-style';
          styleElement.appendChild(
            document.createTextNode(cssRuleRemoveScrollBar)
          );
          document.getElementsByTagName('head')[0].appendChild(styleElement);
          //************** */

          //add the class defined above
          styleElement.appendChild(document.createTextNode(cssClassHideSelect));
          document.getElementsByTagName('head')[0].appendChild(styleElement);

          //****************************************************************************************** */
          //HANDLE ACTIVATING THE SHORTCUT TO TURN ON/OFF THE EXTENSION
          function handleMode() {
            if (sessionOn === false) {
              //WHEN TURNING ON MODE
              sessionOn = true;
              inputtingPrompt = true;
              submitedAnswerReturned = false;
              rectEmojiInput = '🤖';
              rectEmojiOutput = '✨';

              //CHECK IF THERE IS BOTH AT LEAST 1 SPACE BEFORE AND AFTER THE INDEX LIMIT THRESHOLD

              // if is already in text field, trigger the capture initial value function
              // if not (if turning mode on mannually by clicking checkbox), then add the event listener focus on the input and textarea

              if (
                (document.activeElement.tagName === 'INPUT' &&
                  document.activeElement.type === 'text') ||
                document.activeElement.tagName === 'TEXTAREA'
              ) {
                textField = document.activeElement;
                // textField.style.position = 'relative'; // remove this later
                console.log('value 1 is ' + textField.value);
                captureInitialValue(document.activeElement);
                //console.log('capture value triggered active');
                rectBeforePrompt.innerHTML = rectEmojiInput;
                rectAfterPrompt.innerHTML = rectEmojiInput;
              }

              $(textField).on('blur', handleBlurUnfocus);

              // update cursor and caret coordinates any time a mouse move
              // for preventing action outside of index limit
              $('input[type="text"], textarea, document').on(
                'mousemove scroll keyup click',
                updateCooridnates
              );
              $(window).on('scroll keyup click', handleWindowEvents);

              $($('[data-initial-value]')).on('scroll click keyup', (e) => {
                updateRect('rect-before-prompt');
                updateRect('rect-after-prompt');
                checkRectWithinTextArea('rect-before-prompt');
                checkRectWithinTextArea('rect-after-prompt');
              });

              //detect window resize to update coordinates of rect
              window.onresize = function (e) {
                var zoomLevel =
                  window.innerWidth / document.documentElement.clientWidth;
                console.log('Zoom level is: ' + zoomLevel * 100 + '%');
                updateRect('rect-before-prompt');
                updateRect('rect-after-prompt');
                checkRectWithinTextArea('rect-before-prompt');
                checkRectWithinTextArea('rect-after-prompt');
              };

              $(document).on(
                'keydown mousedown',
                'input, textarea',
                reCaptureInitialValue
              );

              $(document).on('mousedown', 'input, textarea', handleMouseDown);

              $(document).on('mousedown', 'input, textarea', handleMouseClick);
              $(document).on('input', 'input, textarea', handleInput);

              //prevent delete when there is no prompt to avoid changing the initial value
              //this is for mouseDown to prevent pressing delete continuously, works with keyup prevent delete in recapturevalue above
              $(document).on('keydown', 'input, textarea', handleWhiteSpace);

              //prevents the cursor from going outside of the prompt
              //by limiting the arrow keys and backspace/delete to the prompt only
              $(document).on('keydown', 'input, textarea', handleKeyArrows);

              //change color of caret to red when mode is on
              $(document.body).css('caret-color', 'red');

              //console.log('checked');
            } else if (sessionOn === true) {
              //WHEN TURNING OFF MODE
              //********************************************************************************************************** */
              //remove the event listeners for specific functions, so as not to affect
              //check shortcuts event listeners

              $(window).off('scroll keyup click', handleWindowEvents);

              $('input[type="text"], textarea').off(
                'mousemove scroll keyup click',
                updateCooridnates
              );

              $($('[data-initial-value]')).off('scroll click keyup');

              window.onresize = null;

              $(document).off(
                'keydown mousedown',
                'input, textarea',
                reCaptureInitialValue
              );

              $(textField).off('blur', handleBlurUnfocus);

              $(document).off('mousedown', 'input, textarea', handleMouseDown);

              $(document).off('mousedown', 'input, textarea', handleMouseClick);

              $(document).off('input', 'input, textarea', handleInput);

              $(document).off('keydown', 'input, textarea', handleWhiteSpace);

              $(document).off('keydown', 'input, textarea', handleKeyArrows);

              // Revert caret color
              $(document.body).css('caret-color', '');

              $(textField).removeAttr('data-initial-value'); //REMOVES THE ATTRIBUTE AFTER RETURNING THE INITIAL VALUE FOR NEXT TIME

              //IF THERE IS AN INITIAL VALUE ATTRIBUTE, RETURNS IT TO THE FOCUS INPUT/TEXT AREA ELEMENT
              // $this HERE REFERS TO THE INPUT/TEXT AREA ELEMENT THAT HAS THE ATTRIBUTE "data-initial-value"
              if (
                $('[data-initial-value]').length > 0 &&
                submitedAnswerReturned === false
              ) {
                //RESETS THE CURSOR POSITION TO THE STARTING POSITION OF THE PROMPT
                textField.value = initialValue;
                console.log('restore initial value to input/textarea');
                textField.removeAttribute('data-initial-value'); // remove the attribute after returning the initial value
                // SET CURSOR TO ORIGINAL POSITION (START OF THE PROMPT)
                textField.selectionStart = textField.selectionEnd =
                  promptCursorStart;
              }

              console.log('mode turned off');

              // DELETE THE INDEX LIMIT THRESHOLD RECTANGLES
              document.querySelectorAll('.rect').forEach(function (element) {
                element.remove();
              });

              //RESET VARIABLE STATE VALUES AFTER MODE IS TURNED OFF
              prompt = '';
              promptCursorStart = 0;
              valueLengthAfterCursorInputOffset = 0;
              initialValue = null;
              prevSelectionStart = 0;
              prevSelectionEnd = 0;
              mouseMoved = false;
              mouseDown = false;
              sessionOn = !sessionOn;
              textField = null;
              contextCopy = '';
              sessionOn = false;
              generatingResponse = false;
              submitedAnswerReturned = false;
              inputtingPrompt = false;
            }
          }

          //MODE ON/OFF AND CLEAN UP EVENT LISTENER
          // checkKeyBoardShortcut('ctrl', ' ', handleMode);
          // $('#mode').on('change', handleMode); // REMEMBERS TO OFFLOAD THIS LISTENER WHEN EXITING THE PAGE

          function changeModeOnOff() {
            // $('#mode').prop('checked', !$('#mode').prop('checked'));
            // $('#mode').trigger('change');
            handleMode();
            //change the state of session to coordinate other shortcuts
          }

          var sampleAnswer =
            "ChatGPT, powered by OpenAI's GPT-3.5 architecture, is an incredibly useful tool.";

          async function submitPrompt(e, prompt, contextCopy) {
            var filteredPrompt = prompt.replace(/\/s/g, ''); //delete unnecessary /s command in prompt
            filteredPrompt =
              filteredPrompt + '\n\n' + `"""` + contextCopy + `"""`;
            $('.current-text').text(filteredPrompt);
            console.log('filtered prompt', filteredPrompt);
            conversation.push({ role: 'user', content: filteredPrompt });

            //IF THERE IS AN INITIAL VALUE ATTRIBUTE, RETURNS IT TO THE FOCUS INPUT/TEXT AREA ELEMENT
            // $this HERE REFERS TO THE INPUT/TEXT AREA ELEMENT THAT HAS THE ATTRIBUTE "data-initial-value"
            if (initialValue.length > 0) {
              //RESETS THE CURSOR POSITION TO THE STARTING POSITION OF THE PROMPT
              textField.value = initialValue; //put the initial value back
              // SET CURSOR TO ORIGINAL POSITION (START OF THE PROMPT)
              textField.selectionStart = textField.selectionEnd =
                promptCursorStart;

              //handle input to update the index limits and the rectangles
              handleInput(e);
            }

            //MODEL HANDLE REQUEST AND RESPONSE LOGIC
            // TURN THIS ON TO SIMULATE CHATGPT

            //if response not finished yet and in session
            //continue generating response
            inputtingPrompt = false;
            rectBeforePrompt.innerHTML = rectEmojiOutput;
            rectAfterPrompt.innerHTML = rectEmojiOutput;
            generatingResponse = true;
            await typeTextAtCaret(textField, sampleAnswer, 250);
            conversation.push({ role: 'system', content: sampleAnswer });
            generatingResponse = false;
            submitedAnswerReturned = true;

            contextCopy = '';
            console.log(conversation);
          }

          function reInputPrompt(e) {
            //IF THERE IS AN INITIAL VALUE ATTRIBUTE, RETURNS IT TO THE FOCUS INPUT/TEXT AREA ELEMENT
            // $this HERE REFERS TO THE INPUT/TEXT AREA ELEMENT THAT HAS THE ATTRIBUTE "data-initial-value"
            if (initialValue.length > 0) {
              //RESETS THE CURSOR POSITION TO THE STARTING POSITION OF THE PROMPT
              rectBeforePrompt.innerHTML = rectEmojiInput;
              rectAfterPrompt.innerHTML = rectEmojiInput;
              textField.value = initialValue; //put the initial value back
              // SET CURSOR TO ORIGINAL POSITION (START OF THE PROMPT)
              textField.selectionStart = textField.selectionEnd =
                promptCursorStart;

              //handle input to update the index limits and the rectangles
              handleInput(e);
            }
            submitedAnswerReturned = false;
            inputtingPrompt = true;
          }

          function checkKeyBoardShortcut(
            shortcutMetaKey,
            shortcutKey,
            triggerFunction
          ) {
            document.addEventListener(
              'keydown',
              function (e) {
                var metaKeyPressed = true; // default to true

                if (shortcutMetaKey) {
                  metaKeyPressed =
                    (shortcutMetaKey === 'ctrl' && e.ctrlKey) ||
                    (shortcutMetaKey === 'shift' && e.shiftKey) ||
                    (shortcutMetaKey === 'alt' && e.altKey) ||
                    (shortcutMetaKey === 'meta' && e.metaKey);
                }
                try {
                  if (
                    metaKeyPressed &&
                    e.key.toLowerCase() === shortcutKey.toLowerCase()
                  ) {
                    if (e.key.toLowerCase() === 'enter' && e.shiftKey) {
                      return; //allow shift enter to preserve behavior
                    }

                    if (!(shortcutMetaKey === 'ctrl' && shortcutKey === 'c')) {
                      //creates exception to still allow copy to clipboard shortcut
                      e.preventDefault();
                    }

                    if (sessionOn === false) {
                      //mode is off, about to be turned on
                      ensureSpacesAroundCaret(e.target);
                    }
                    if (typeof triggerFunction === 'function') {
                      triggerFunction(e);
                    }
                  }
                } catch (error) {
                  console.log(error);
                }
              },
              true
            );
          }
        });

        const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
        const $ReactRefreshCurrentExports$ =
          __react_refresh_utils__.getModuleExports($ReactRefreshModuleId$);

        function $ReactRefreshModuleRuntime$(exports) {
          if (false) {
          }
        }

        if (
          typeof Promise !== 'undefined' &&
          $ReactRefreshCurrentExports$ instanceof Promise
        ) {
          $ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
        } else {
          $ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
        }

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ErrorOverlayEntry.js':
      /*!***************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ErrorOverlayEntry.js ***!
  \***************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        var __resourceQuery = '';
        /* provided dependency */ var __react_refresh_error_overlay__ =
          __webpack_require__(
            /*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js'
          );
        /* provided dependency */ var __react_refresh_socket__ =
          __webpack_require__(
            /*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WDSSocket.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WDSSocket.js'
          );
        /* global __react_refresh_error_overlay__, __react_refresh_socket__, __resourceQuery */

        const events = __webpack_require__(
          /*! ./utils/errorEventHandlers.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/errorEventHandlers.js'
        );
        const formatWebpackErrors = __webpack_require__(
          /*! ./utils/formatWebpackErrors.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/formatWebpackErrors.js'
        );
        const runWithPatchedUrl = __webpack_require__(
          /*! ./utils/patchUrl.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/patchUrl.js'
        );
        const runWithRetry = __webpack_require__(
          /*! ./utils/retry.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/retry.js'
        );

        // Setup error states
        let isHotReload = false;
        let hasRuntimeErrors = false;

        /**
         * Try dismissing the compile error overlay.
         * This will also reset runtime error records (if any),
         * because we have new source to evaluate.
         * @returns {void}
         */
        function tryDismissErrorOverlay() {
          __react_refresh_error_overlay__.clearCompileError();
          __react_refresh_error_overlay__.clearRuntimeErrors(!hasRuntimeErrors);
          hasRuntimeErrors = false;
        }

        /**
         * A function called after a compile success signal is received from Webpack.
         * @returns {void}
         */
        function handleCompileSuccess() {
          isHotReload = true;

          if (isHotReload) {
            tryDismissErrorOverlay();
          }
        }

        /**
         * A function called after a compile errored signal is received from Webpack.
         * @param {string[]} errors
         * @returns {void}
         */
        function handleCompileErrors(errors) {
          isHotReload = true;

          const formattedErrors = formatWebpackErrors(errors);

          // Only show the first error
          __react_refresh_error_overlay__.showCompileError(formattedErrors[0]);
        }

        /**
         * Handles compilation messages from Webpack.
         * Integrates with a compile error overlay.
         * @param {*} message A Webpack HMR message sent via WebSockets.
         * @returns {void}
         */
        function compileMessageHandler(message) {
          switch (message.type) {
            case 'ok':
            case 'still-ok':
            case 'warnings': {
              // TODO: Implement handling for warnings
              handleCompileSuccess();
              break;
            }
            case 'errors': {
              handleCompileErrors(message.data);
              break;
            }
            default: {
              // Do nothing.
            }
          }
        }

        if (true) {
          if (typeof window !== 'undefined') {
            runWithPatchedUrl(function setupOverlay() {
              // Only register if no other overlay have been registered
              if (
                !window.__reactRefreshOverlayInjected &&
                __react_refresh_socket__
              ) {
                // Registers handlers for compile errors with retry -
                // This is to prevent mismatching injection order causing errors to be thrown
                runWithRetry(function initSocket() {
                  __react_refresh_socket__.init(
                    compileMessageHandler,
                    __resourceQuery
                  );
                }, 3);
                // Registers handlers for runtime errors
                events.handleError(function handleError(error) {
                  hasRuntimeErrors = true;
                  __react_refresh_error_overlay__.handleRuntimeError(error);
                });
                events.handleUnhandledRejection(
                  function handleUnhandledPromiseRejection(error) {
                    hasRuntimeErrors = true;
                    __react_refresh_error_overlay__.handleRuntimeError(error);
                  }
                );

                // Mark overlay as injected to prevent double-injection
                window.__reactRefreshOverlayInjected = true;
              }
            });
          }
        }

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ReactRefreshEntry.js':
      /*!***************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ReactRefreshEntry.js ***!
  \***************************************************************************************/
      /***/ (
        __unused_webpack_module,
        __unused_webpack_exports,
        __webpack_require__
      ) => {
        /* global __react_refresh_library__ */

        const safeThis = __webpack_require__(
          /*! core-js-pure/features/global-this */ './node_modules/core-js-pure/features/global-this.js'
        );
        const RefreshRuntime = __webpack_require__(
          /*! react-refresh/runtime */ './node_modules/react-refresh/runtime.js'
        );

        if (true) {
          if (typeof safeThis !== 'undefined') {
            var $RefreshInjected$ = '__reactRefreshInjected';
            // Namespace the injected flag (if necessary) for monorepo compatibility
            if (false) {
            }

            // Only inject the runtime if it hasn't been injected
            if (!safeThis[$RefreshInjected$]) {
              // Inject refresh runtime into global scope
              RefreshRuntime.injectIntoGlobalHook(safeThis);

              // Mark the runtime as injected to prevent double-injection
              safeThis[$RefreshInjected$] = true;
            }
          }
        }

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/errorEventHandlers.js':
      /*!**********************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/errorEventHandlers.js ***!
  \**********************************************************************************************/
      /***/ (module) => {
        /**
         * @callback EventCallback
         * @param {string | Error | null} context
         * @returns {void}
         */
        /**
         * @callback EventHandler
         * @param {Event} event
         * @returns {void}
         */

        /**
         * A function that creates an event handler for the `error` event.
         * @param {EventCallback} callback A function called to handle the error context.
         * @returns {EventHandler} A handler for the `error` event.
         */
        function createErrorHandler(callback) {
          return function errorHandler(event) {
            if (!event || !event.error) {
              return callback(null);
            }
            if (event.error instanceof Error) {
              return callback(event.error);
            }
            // A non-error was thrown, we don't have a trace. :(
            // Look in your browser's devtools for more information
            return callback(new Error(event.error));
          };
        }

        /**
         * A function that creates an event handler for the `unhandledrejection` event.
         * @param {EventCallback} callback A function called to handle the error context.
         * @returns {EventHandler} A handler for the `unhandledrejection` event.
         */
        function createRejectionHandler(callback) {
          return function rejectionHandler(event) {
            if (!event || !event.reason) {
              return callback(new Error('Unknown'));
            }
            if (event.reason instanceof Error) {
              return callback(event.reason);
            }
            // A non-error was rejected, we don't have a trace :(
            // Look in your browser's devtools for more information
            return callback(new Error(event.reason));
          };
        }

        /**
         * Creates a handler that registers an EventListener on window for a valid type
         * and calls a callback when the event fires.
         * @param {string} eventType A valid DOM event type.
         * @param {function(EventCallback): EventHandler} createHandler A function that creates an event handler.
         * @returns {register} A function that registers the EventListener given a callback.
         */
        function createWindowEventHandler(eventType, createHandler) {
          /**
           * @type {EventHandler | null} A cached event handler function.
           */
          let eventHandler = null;

          /**
           * Unregisters an EventListener if it has been registered.
           * @returns {void}
           */
          function unregister() {
            if (eventHandler === null) {
              return;
            }
            window.removeEventListener(eventType, eventHandler);
            eventHandler = null;
          }

          /**
           * Registers an EventListener if it hasn't been registered.
           * @param {EventCallback} callback A function called after the event handler to handle its context.
           * @returns {unregister | void} A function to unregister the registered EventListener if registration is performed.
           */
          function register(callback) {
            if (eventHandler !== null) {
              return;
            }
            eventHandler = createHandler(callback);
            window.addEventListener(eventType, eventHandler);

            return unregister;
          }

          return register;
        }

        const handleError = createWindowEventHandler(
          'error',
          createErrorHandler
        );
        const handleUnhandledRejection = createWindowEventHandler(
          'unhandledrejection',
          createRejectionHandler
        );

        module.exports = {
          handleError: handleError,
          handleUnhandledRejection: handleUnhandledRejection,
        };

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/formatWebpackErrors.js':
      /*!***********************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/formatWebpackErrors.js ***!
  \***********************************************************************************************/
      /***/ (module) => {
        /**
         * @typedef {Object} WebpackErrorObj
         * @property {string} moduleIdentifier
         * @property {string} moduleName
         * @property {string} message
         */

        const friendlySyntaxErrorLabel = 'Syntax error:';

        /**
         * Checks if the error message is for a syntax error.
         * @param {string} message The raw Webpack error message.
         * @returns {boolean} Whether the error message is for a syntax error.
         */
        function isLikelyASyntaxError(message) {
          return message.indexOf(friendlySyntaxErrorLabel) !== -1;
        }

        /**
         * Cleans up Webpack error messages.
         *
         * This implementation is based on the one from [create-react-app](https://github.com/facebook/create-react-app/blob/edc671eeea6b7d26ac3f1eb2050e50f75cf9ad5d/packages/react-dev-utils/formatWebpackMessages.js).
         * @param {string} message The raw Webpack error message.
         * @returns {string} The formatted Webpack error message.
         */
        function formatMessage(message) {
          let lines = message.split('\n');

          // Strip Webpack-added headers off errors/warnings
          // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js
          lines = lines.filter(function (line) {
            return !/Module [A-z ]+\(from/.test(line);
          });

          // Remove leading newline
          if (lines.length > 2 && lines[1].trim() === '') {
            lines.splice(1, 1);
          }

          // Remove duplicated newlines
          lines = lines.filter(function (line, index, arr) {
            return (
              index === 0 ||
              line.trim() !== '' ||
              line.trim() !== arr[index - 1].trim()
            );
          });

          // Clean up the file name
          lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, '$1');

          // Cleans up verbose "module not found" messages for files and packages.
          if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
            lines = [
              lines[0],
              lines[1]
                .replace('Error: ', '')
                .replace(
                  'Module not found: Cannot find file:',
                  'Cannot find file:'
                ),
            ];
          }

          message = lines.join('\n');

          // Clean up syntax errors
          message = message.replace('SyntaxError:', friendlySyntaxErrorLabel);

          // Internal stacks are generally useless, so we strip them -
          // except the stacks containing `webpack:`,
          // because they're normally from user code generated by webpack.
          message = message.replace(
            /^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm,
            ''
          ); // at ... ...:x:y
          message = message.replace(
            /^\s*at\s((?!webpack:).)*<anonymous>[\s)]*(\n|$)/gm,
            ''
          ); // at ... <anonymous>
          message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, ''); // at <anonymous>

          return message.trim();
        }

        /**
         * Formats Webpack error messages into a more readable format.
         * @param {Array<string | WebpackErrorObj>} errors An array of Webpack error messages.
         * @returns {string[]} The formatted Webpack error messages.
         */
        function formatWebpackErrors(errors) {
          let formattedErrors = errors.map(function (errorObjOrMessage) {
            // Webpack 5 compilation errors are in the form of descriptor objects,
            // so we have to join pieces to get the format we want.
            if (typeof errorObjOrMessage === 'object') {
              return formatMessage(
                [errorObjOrMessage.moduleName, errorObjOrMessage.message].join(
                  '\n'
                )
              );
            }
            // Webpack 4 compilation errors are strings
            return formatMessage(errorObjOrMessage);
          });

          if (formattedErrors.some(isLikelyASyntaxError)) {
            // If there are any syntax errors, show just them.
            formattedErrors = formattedErrors.filter(isLikelyASyntaxError);
          }
          return formattedErrors;
        }

        module.exports = formatWebpackErrors;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/patchUrl.js':
      /*!************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/patchUrl.js ***!
  \************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        /* global __react_refresh_polyfill_url__ */

        /**
         * @typedef {Object} UrlAPIs
         * @property {typeof URL} URL
         * @property {typeof URLSearchParams} URLSearchParams
         */

        /**
         * Runs a callback with patched the DOM URL APIs.
         * @param {function(UrlAPIs): void} callback The code to run with patched URL globals.
         * @returns {void}
         */
        function runWithPatchedUrl(callback) {
          var __originalURL;
          var __originalURLSearchParams;

          // Polyfill the DOM URL and URLSearchParams constructors
          if (false || !window.URL) {
            __originalURL = window.URL;
            window.URL = __webpack_require__(
              /*! core-js-pure/web/url */ './node_modules/core-js-pure/web/url.js'
            );
          }
          if (false || !window.URLSearchParams) {
            __originalURLSearchParams = window.URLSearchParams;
            window.URLSearchParams = __webpack_require__(
              /*! core-js-pure/web/url-search-params */ './node_modules/core-js-pure/web/url-search-params.js'
            );
          }

          // Pass in URL APIs in case they are needed
          callback({
            URL: window.URL,
            URLSearchParams: window.URLSearchParams,
          });

          // Restore polyfill-ed APIs to their original state
          if (__originalURL) {
            window.URL = __originalURL;
          }
          if (__originalURLSearchParams) {
            window.URLSearchParams = __originalURLSearchParams;
          }
        }

        module.exports = runWithPatchedUrl;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/retry.js':
      /*!*********************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/client/utils/retry.js ***!
  \*********************************************************************************/
      /***/ (module) => {
        function runWithRetry(callback, maxRetries) {
          function executeWithRetryAndTimeout(currentCount) {
            try {
              if (currentCount > maxRetries - 1) {
                console.warn(
                  '[React Refresh] Failed to set up the socket connection.'
                );
                return;
              }

              callback();
            } catch (err) {
              setTimeout(function () {
                executeWithRetryAndTimeout(currentCount + 1);
              }, Math.pow(10, currentCount));
            }
          }

          executeWithRetryAndTimeout(0);
        }

        module.exports = runWithRetry;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/CompileErrorTrace.js':
      /*!***************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/CompileErrorTrace.js ***!
  \***************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const ansiHTML = __webpack_require__(
          /*! ansi-html-community */ './node_modules/ansi-html-community/index.js'
        );
        const entities = __webpack_require__(
          /*! html-entities */ './node_modules/html-entities/lib/index.js'
        );
        const theme = __webpack_require__(
          /*! ../theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );
        const utils = __webpack_require__(
          /*! ../utils.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/utils.js'
        );

        ansiHTML.setColors(theme);

        /**
         * @typedef {Object} CompileErrorTraceProps
         * @property {string} errorMessage
         */

        /**
         * A formatter that turns Webpack compile error messages into highlighted HTML source traces.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {CompileErrorTraceProps} props
         * @returns {void}
         */
        function CompileErrorTrace(document, root, props) {
          const errorParts = props.errorMessage.split('\n');
          if (errorParts.length) {
            if (errorParts[0]) {
              errorParts[0] = utils.formatFilename(errorParts[0]);
            }

            const errorMessage = errorParts.splice(1, 1)[0];
            if (errorMessage) {
              // Strip filename from the error message
              errorParts.unshift(
                errorMessage.replace(/^(.*:)\s.*:(\s.*)$/, '$1$2')
              );
            }
          }

          const stackContainer = document.createElement('pre');
          stackContainer.innerHTML = entities.decode(
            ansiHTML(
              entities.encode(errorParts.join('\n'), {
                level: 'html5',
                mode: 'nonAscii',
              })
            ),
            { level: 'html5' }
          );
          stackContainer.style.fontFamily = [
            '"Operator Mono SSm"',
            '"Operator Mono"',
            '"Fira Code Retina"',
            '"Fira Code"',
            '"FiraCode-Retina"',
            '"Andale Mono"',
            '"Lucida Console"',
            'Menlo',
            'Consolas',
            'Monaco',
            'monospace',
          ].join(', ');
          stackContainer.style.margin = '0';
          stackContainer.style.whiteSpace = 'pre-wrap';

          root.appendChild(stackContainer);
        }

        module.exports = CompileErrorTrace;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/PageHeader.js':
      /*!********************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/PageHeader.js ***!
  \********************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const Spacer = __webpack_require__(
          /*! ./Spacer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js'
        );
        const theme = __webpack_require__(
          /*! ../theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );

        /**
         * @typedef {Object} PageHeaderProps
         * @property {string} [message]
         * @property {string} title
         * @property {string} [topOffset]
         */

        /**
         * The header of the overlay.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {PageHeaderProps} props
         * @returns {void}
         */
        function PageHeader(document, root, props) {
          const pageHeaderContainer = document.createElement('div');
          pageHeaderContainer.style.background = '#' + theme.dimgrey;
          pageHeaderContainer.style.boxShadow = '0 1px 4px rgba(0, 0, 0, 0.3)';
          pageHeaderContainer.style.color = '#' + theme.white;
          pageHeaderContainer.style.left = '0';
          pageHeaderContainer.style.right = '0';
          pageHeaderContainer.style.padding = '1rem 1.5rem';
          pageHeaderContainer.style.paddingLeft =
            'max(1.5rem, env(safe-area-inset-left))';
          pageHeaderContainer.style.paddingRight =
            'max(1.5rem, env(safe-area-inset-right))';
          pageHeaderContainer.style.position = 'fixed';
          pageHeaderContainer.style.top = props.topOffset || '0';

          const title = document.createElement('h3');
          title.innerText = props.title;
          title.style.color = '#' + theme.red;
          title.style.fontSize = '1.125rem';
          title.style.lineHeight = '1.3';
          title.style.margin = '0';
          pageHeaderContainer.appendChild(title);

          if (props.message) {
            title.style.margin = '0 0 0.5rem';

            const message = document.createElement('span');
            message.innerText = props.message;
            message.style.color = '#' + theme.white;
            message.style.wordBreak = 'break-word';
            pageHeaderContainer.appendChild(message);
          }

          root.appendChild(pageHeaderContainer);

          // This has to run after appending elements to root
          // because we need to actual mounted height.
          Spacer(document, root, {
            space: pageHeaderContainer.offsetHeight.toString(10),
          });
        }

        module.exports = PageHeader;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorFooter.js':
      /*!****************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorFooter.js ***!
  \****************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const Spacer = __webpack_require__(
          /*! ./Spacer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js'
        );
        const theme = __webpack_require__(
          /*! ../theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );

        /**
         * @typedef {Object} RuntimeErrorFooterProps
         * @property {string} [initialFocus]
         * @property {boolean} multiple
         * @property {function(MouseEvent): void} onClickCloseButton
         * @property {function(MouseEvent): void} onClickNextButton
         * @property {function(MouseEvent): void} onClickPrevButton
         */

        /**
         * A fixed footer that handles pagination of runtime errors.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {RuntimeErrorFooterProps} props
         * @returns {void}
         */
        function RuntimeErrorFooter(document, root, props) {
          const footer = document.createElement('div');
          footer.style.backgroundColor = '#' + theme.dimgrey;
          footer.style.bottom = '0';
          footer.style.boxShadow = '0 -1px 4px rgba(0, 0, 0, 0.3)';
          footer.style.height = '2.5rem';
          footer.style.left = '0';
          footer.style.right = '0';
          footer.style.lineHeight = '2.5rem';
          footer.style.paddingBottom = '0';
          footer.style.paddingBottom = 'env(safe-area-inset-bottom)';
          footer.style.position = 'fixed';
          footer.style.textAlign = 'center';
          footer.style.zIndex = '2';

          const BUTTON_CONFIGS = {
            prev: {
              id: 'prev',
              label: '◀&ensp;Prev',
              onClick: props.onClickPrevButton,
            },
            close: {
              id: 'close',
              label: '×&ensp;Close',
              onClick: props.onClickCloseButton,
            },
            next: {
              id: 'next',
              label: 'Next&ensp;▶',
              onClick: props.onClickNextButton,
            },
          };

          let buttons = [BUTTON_CONFIGS.close];
          if (props.multiple) {
            buttons = [
              BUTTON_CONFIGS.prev,
              BUTTON_CONFIGS.close,
              BUTTON_CONFIGS.next,
            ];
          }

          /** @type {HTMLButtonElement | undefined} */
          let initialFocusButton;
          for (let i = 0; i < buttons.length; i += 1) {
            const buttonConfig = buttons[i];

            const button = document.createElement('button');
            button.id = buttonConfig.id;
            button.innerHTML = buttonConfig.label;
            button.tabIndex = 1;
            button.style.backgroundColor = '#' + theme.dimgrey;
            button.style.border = 'none';
            button.style.color = '#' + theme.white;
            button.style.cursor = 'pointer';
            button.style.fontSize = 'inherit';
            button.style.height = '100%';
            button.style.padding = '0.5rem 0.75rem';
            button.style.width = (100 / buttons.length).toString(10) + '%';
            button.addEventListener('click', buttonConfig.onClick);

            if (buttonConfig.id === props.initialFocus) {
              initialFocusButton = button;
            }

            footer.appendChild(button);
          }

          root.appendChild(footer);

          Spacer(document, root, { space: '2.5rem' });

          if (initialFocusButton) {
            initialFocusButton.focus();
          }
        }

        module.exports = RuntimeErrorFooter;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorHeader.js':
      /*!****************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorHeader.js ***!
  \****************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const Spacer = __webpack_require__(
          /*! ./Spacer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js'
        );
        const theme = __webpack_require__(
          /*! ../theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );

        /**
         * @typedef {Object} RuntimeErrorHeaderProps
         * @property {number} currentErrorIndex
         * @property {number} totalErrors
         */

        /**
         * A fixed header that shows the total runtime error count.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {RuntimeErrorHeaderProps} props
         * @returns {void}
         */
        function RuntimeErrorHeader(document, root, props) {
          const header = document.createElement('div');
          header.innerText =
            'Error ' +
            (props.currentErrorIndex + 1) +
            ' of ' +
            props.totalErrors;
          header.style.backgroundColor = '#' + theme.red;
          header.style.color = '#' + theme.white;
          header.style.fontWeight = '500';
          header.style.height = '2.5rem';
          header.style.left = '0';
          header.style.lineHeight = '2.5rem';
          header.style.position = 'fixed';
          header.style.textAlign = 'center';
          header.style.top = '0';
          header.style.width = '100vw';
          header.style.zIndex = '2';

          root.appendChild(header);

          Spacer(document, root, { space: '2.5rem' });
        }

        module.exports = RuntimeErrorHeader;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorStack.js':
      /*!***************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorStack.js ***!
  \***************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const ErrorStackParser = __webpack_require__(
          /*! error-stack-parser */ './node_modules/error-stack-parser/error-stack-parser.js'
        );
        const theme = __webpack_require__(
          /*! ../theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );
        const utils = __webpack_require__(
          /*! ../utils.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/utils.js'
        );

        /**
         * @typedef {Object} RuntimeErrorStackProps
         * @property {Error} error
         */

        /**
         * A formatter that turns runtime error stacks into highlighted HTML stacks.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {RuntimeErrorStackProps} props
         * @returns {void}
         */
        function RuntimeErrorStack(document, root, props) {
          const stackTitle = document.createElement('h4');
          stackTitle.innerText = 'Call Stack';
          stackTitle.style.color = '#' + theme.white;
          stackTitle.style.fontSize = '1.0625rem';
          stackTitle.style.fontWeight = '500';
          stackTitle.style.lineHeight = '1.3';
          stackTitle.style.margin = '0 0 0.5rem';

          const stackContainer = document.createElement('div');
          stackContainer.style.fontSize = '0.8125rem';
          stackContainer.style.lineHeight = '1.3';
          stackContainer.style.whiteSpace = 'pre-wrap';

          let errorStacks;
          try {
            errorStacks = ErrorStackParser.parse(props.error);
          } catch (e) {
            errorStacks = [];
            stackContainer.innerHTML =
              'No stack trace is available for this error!';
          }

          for (let i = 0; i < Math.min(errorStacks.length, 10); i += 1) {
            const currentStack = errorStacks[i];

            const functionName = document.createElement('code');
            functionName.innerHTML = '&emsp;' + currentStack.functionName || 0;
            functionName.style.color = '#' + theme.yellow;
            functionName.style.fontFamily = [
              '"Operator Mono SSm"',
              '"Operator Mono"',
              '"Fira Code Retina"',
              '"Fira Code"',
              '"FiraCode-Retina"',
              '"Andale Mono"',
              '"Lucida Console"',
              'Menlo',
              'Consolas',
              'Monaco',
              'monospace',
            ].join(', ');

            const fileName = document.createElement('div');
            fileName.innerHTML =
              '&emsp;&emsp;' +
              utils.formatFilename(currentStack.fileName) +
              ':' +
              currentStack.lineNumber +
              ':' +
              currentStack.columnNumber;
            fileName.style.color = '#' + theme.white;
            fileName.style.fontSize = '0.6875rem';
            fileName.style.marginBottom = '0.25rem';

            stackContainer.appendChild(functionName);
            stackContainer.appendChild(fileName);
          }

          root.appendChild(stackTitle);
          root.appendChild(stackContainer);
        }

        module.exports = RuntimeErrorStack;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js':
      /*!****************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js ***!
  \****************************************************************************************/
      /***/ (module) => {
        /**
         * @typedef {Object} SpacerProps
         * @property {string} space
         */

        /**
         * An empty element to add spacing manually.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {SpacerProps} props
         * @returns {void}
         */
        function Spacer(document, root, props) {
          const spacer = document.createElement('div');
          spacer.style.paddingBottom = props.space;
          root.appendChild(spacer);
        }

        module.exports = Spacer;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/CompileErrorContainer.js':
      /*!*******************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/CompileErrorContainer.js ***!
  \*******************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const CompileErrorTrace = __webpack_require__(
          /*! ../components/CompileErrorTrace.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/CompileErrorTrace.js'
        );
        const PageHeader = __webpack_require__(
          /*! ../components/PageHeader.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/PageHeader.js'
        );
        const Spacer = __webpack_require__(
          /*! ../components/Spacer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js'
        );

        /**
         * @typedef {Object} CompileErrorContainerProps
         * @property {string} errorMessage
         */

        /**
         * A container to render Webpack compilation error messages with source trace.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {CompileErrorContainerProps} props
         * @returns {void}
         */
        function CompileErrorContainer(document, root, props) {
          PageHeader(document, root, {
            title: 'Failed to compile.',
          });
          CompileErrorTrace(document, root, {
            errorMessage: props.errorMessage,
          });
          Spacer(document, root, { space: '1rem' });
        }

        module.exports = CompileErrorContainer;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/RuntimeErrorContainer.js':
      /*!*******************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/RuntimeErrorContainer.js ***!
  \*******************************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const PageHeader = __webpack_require__(
          /*! ../components/PageHeader.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/PageHeader.js'
        );
        const RuntimeErrorStack = __webpack_require__(
          /*! ../components/RuntimeErrorStack.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorStack.js'
        );
        const Spacer = __webpack_require__(
          /*! ../components/Spacer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/Spacer.js'
        );

        /**
         * @typedef {Object} RuntimeErrorContainerProps
         * @property {Error} currentError
         */

        /**
         * A container to render runtime error messages with stack trace.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {RuntimeErrorContainerProps} props
         * @returns {void}
         */
        function RuntimeErrorContainer(document, root, props) {
          PageHeader(document, root, {
            message: props.currentError.message,
            title: props.currentError.name,
            topOffset: '2.5rem',
          });
          RuntimeErrorStack(document, root, {
            error: props.currentError,
          });
          Spacer(document, root, { space: '1rem' });
        }

        module.exports = RuntimeErrorContainer;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js ***!
  \****************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const RuntimeErrorFooter = __webpack_require__(
          /*! ./components/RuntimeErrorFooter.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorFooter.js'
        );
        const RuntimeErrorHeader = __webpack_require__(
          /*! ./components/RuntimeErrorHeader.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/components/RuntimeErrorHeader.js'
        );
        const CompileErrorContainer = __webpack_require__(
          /*! ./containers/CompileErrorContainer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/CompileErrorContainer.js'
        );
        const RuntimeErrorContainer = __webpack_require__(
          /*! ./containers/RuntimeErrorContainer.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/containers/RuntimeErrorContainer.js'
        );
        const theme = __webpack_require__(
          /*! ./theme.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js'
        );
        const utils = __webpack_require__(
          /*! ./utils.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/utils.js'
        );

        /**
         * @callback RenderFn
         * @returns {void}
         */

        /* ===== Cached elements for DOM manipulations ===== */
        /**
         * The iframe that contains the overlay.
         * @type {HTMLIFrameElement}
         */
        let iframeRoot = null;
        /**
         * The document object from the iframe root, used to create and render elements.
         * @type {Document}
         */
        let rootDocument = null;
        /**
         * The root div elements will attach to.
         * @type {HTMLDivElement}
         */
        let root = null;
        /**
         * A Cached function to allow deferred render.
         * @type {RenderFn | null}
         */
        let scheduledRenderFn = null;

        /* ===== Overlay State ===== */
        /**
         * The latest error message from Webpack compilation.
         * @type {string}
         */
        let currentCompileErrorMessage = '';
        /**
         * Index of the error currently shown by the overlay.
         * @type {number}
         */
        let currentRuntimeErrorIndex = 0;
        /**
         * The latest runtime error objects.
         * @type {Error[]}
         */
        let currentRuntimeErrors = [];
        /**
         * The render mode the overlay is currently in.
         * @type {'compileError' | 'runtimeError' | null}
         */
        let currentMode = null;

        /**
         * @typedef {Object} IframeProps
         * @property {function(): void} onIframeLoad
         */

        /**
         * Creates the main `iframe` the overlay will attach to.
         * Accepts a callback to be ran after iframe is initialized.
         * @param {Document} document
         * @param {HTMLElement} root
         * @param {IframeProps} props
         * @returns {HTMLIFrameElement}
         */
        function IframeRoot(document, root, props) {
          const iframe = document.createElement('iframe');
          iframe.id = 'react-refresh-overlay';
          iframe.src = 'about:blank';

          iframe.style.border = 'none';
          iframe.style.height = '100%';
          iframe.style.left = '0';
          iframe.style.minHeight = '100vh';
          iframe.style.minHeight = '-webkit-fill-available';
          iframe.style.position = 'fixed';
          iframe.style.top = '0';
          iframe.style.width = '100vw';
          iframe.style.zIndex = '2147483647';
          iframe.addEventListener('load', function onLoad() {
            // Reset margin of iframe body
            iframe.contentDocument.body.style.margin = '0';
            props.onIframeLoad();
          });

          // We skip mounting and returns as we need to ensure
          // the load event is fired after we setup the global variable
          return iframe;
        }

        /**
         * Creates the main `div` element for the overlay to render.
         * @param {Document} document
         * @param {HTMLElement} root
         * @returns {HTMLDivElement}
         */
        function OverlayRoot(document, root) {
          const div = document.createElement('div');
          div.id = 'react-refresh-overlay-error';

          // Style the contents container
          div.style.backgroundColor = '#' + theme.grey;
          div.style.boxSizing = 'border-box';
          div.style.color = '#' + theme.white;
          div.style.fontFamily = [
            '-apple-system',
            'BlinkMacSystemFont',
            '"Segoe UI"',
            '"Helvetica Neue"',
            'Helvetica',
            'Arial',
            'sans-serif',
            '"Apple Color Emoji"',
            '"Segoe UI Emoji"',
            'Segoe UI Symbol',
          ].join(', ');
          div.style.fontSize = '0.875rem';
          div.style.height = '100%';
          div.style.lineHeight = '1.3';
          div.style.overflow = 'auto';
          div.style.padding = '1rem 1.5rem 0';
          div.style.paddingTop = 'max(1rem, env(safe-area-inset-top))';
          div.style.paddingRight = 'max(1.5rem, env(safe-area-inset-right))';
          div.style.paddingBottom = 'env(safe-area-inset-bottom)';
          div.style.paddingLeft = 'max(1.5rem, env(safe-area-inset-left))';
          div.style.width = '100vw';

          root.appendChild(div);
          return div;
        }

        /**
         * Ensures the iframe root and the overlay root are both initialized before render.
         * If check fails, render will be deferred until both roots are initialized.
         * @param {RenderFn} renderFn A function that triggers a DOM render.
         * @returns {void}
         */
        function ensureRootExists(renderFn) {
          if (root) {
            // Overlay root is ready, we can render right away.
            renderFn();
            return;
          }

          // Creating an iframe may be asynchronous so we'll defer render.
          // In case of multiple calls, function from the last call will be used.
          scheduledRenderFn = renderFn;

          if (iframeRoot) {
            // Iframe is already ready, it will fire the load event.
            return;
          }

          // Create the iframe root, and, the overlay root inside it when it is ready.
          iframeRoot = IframeRoot(document, document.body, {
            onIframeLoad: function onIframeLoad() {
              rootDocument = iframeRoot.contentDocument;
              root = OverlayRoot(rootDocument, rootDocument.body);
              scheduledRenderFn();
            },
          });

          // We have to mount here to ensure `iframeRoot` is set when `onIframeLoad` fires.
          // This is because onIframeLoad() will be called synchronously
          // or asynchronously depending on the browser.
          document.body.appendChild(iframeRoot);
        }

        /**
         * Creates the main `div` element for the overlay to render.
         * @returns {void}
         */
        function render() {
          ensureRootExists(function () {
            const currentFocus = rootDocument.activeElement;
            let currentFocusId;
            if (currentFocus.localName === 'button' && currentFocus.id) {
              currentFocusId = currentFocus.id;
            }

            utils.removeAllChildren(root);

            if (currentCompileErrorMessage) {
              currentMode = 'compileError';

              CompileErrorContainer(rootDocument, root, {
                errorMessage: currentCompileErrorMessage,
              });
            } else if (currentRuntimeErrors.length) {
              currentMode = 'runtimeError';

              RuntimeErrorHeader(rootDocument, root, {
                currentErrorIndex: currentRuntimeErrorIndex,
                totalErrors: currentRuntimeErrors.length,
              });
              RuntimeErrorContainer(rootDocument, root, {
                currentError: currentRuntimeErrors[currentRuntimeErrorIndex],
              });
              RuntimeErrorFooter(rootDocument, root, {
                initialFocus: currentFocusId,
                multiple: currentRuntimeErrors.length > 1,
                onClickCloseButton: function onClose() {
                  clearRuntimeErrors();
                },
                onClickNextButton: function onNext() {
                  if (
                    currentRuntimeErrorIndex ===
                    currentRuntimeErrors.length - 1
                  ) {
                    return;
                  }
                  currentRuntimeErrorIndex += 1;
                  ensureRootExists(render);
                },
                onClickPrevButton: function onPrev() {
                  if (currentRuntimeErrorIndex === 0) {
                    return;
                  }
                  currentRuntimeErrorIndex -= 1;
                  ensureRootExists(render);
                },
              });
            }
          });
        }

        /**
         * Destroys the state of the overlay.
         * @returns {void}
         */
        function cleanup() {
          // Clean up and reset all internal state.
          document.body.removeChild(iframeRoot);
          scheduledRenderFn = null;
          root = null;
          iframeRoot = null;
        }

        /**
         * Clears Webpack compilation errors and dismisses the compile error overlay.
         * @returns {void}
         */
        function clearCompileError() {
          if (!root || currentMode !== 'compileError') {
            return;
          }

          currentCompileErrorMessage = '';
          currentMode = null;
          cleanup();
        }

        /**
         * Clears runtime error records and dismisses the runtime error overlay.
         * @param {boolean} [dismissOverlay] Whether to dismiss the overlay or not.
         * @returns {void}
         */
        function clearRuntimeErrors(dismissOverlay) {
          if (!root || currentMode !== 'runtimeError') {
            return;
          }

          currentRuntimeErrorIndex = 0;
          currentRuntimeErrors = [];

          if (typeof dismissOverlay === 'undefined' || dismissOverlay) {
            currentMode = null;
            cleanup();
          }
        }

        /**
         * Shows the compile error overlay with the specific Webpack error message.
         * @param {string} message
         * @returns {void}
         */
        function showCompileError(message) {
          if (!message) {
            return;
          }

          currentCompileErrorMessage = message;

          render();
        }

        /**
         * Shows the runtime error overlay with the specific error records.
         * @param {Error[]} errors
         * @returns {void}
         */
        function showRuntimeErrors(errors) {
          if (!errors || !errors.length) {
            return;
          }

          currentRuntimeErrors = errors;

          render();
        }

        /**
         * The debounced version of `showRuntimeErrors` to prevent frequent renders
         * due to rapid firing listeners.
         * @param {Error[]} errors
         * @returns {void}
         */
        const debouncedShowRuntimeErrors = utils.debounce(
          showRuntimeErrors,
          30
        );

        /**
         * Detects if an error is a Webpack compilation error.
         * @param {Error} error The error of interest.
         * @returns {boolean} If the error is a Webpack compilation error.
         */
        function isWebpackCompileError(error) {
          return (
            /Module [A-z ]+\(from/.test(error.message) ||
            /Cannot find module/.test(error.message)
          );
        }

        /**
         * Handles runtime error contexts captured with EventListeners.
         * Integrates with a runtime error overlay.
         * @param {Error} error A valid error object.
         * @returns {void}
         */
        function handleRuntimeError(error) {
          if (
            error &&
            !isWebpackCompileError(error) &&
            currentRuntimeErrors.indexOf(error) === -1
          ) {
            currentRuntimeErrors = currentRuntimeErrors.concat(error);
          }
          debouncedShowRuntimeErrors(currentRuntimeErrors);
        }

        module.exports = Object.freeze({
          clearCompileError: clearCompileError,
          clearRuntimeErrors: clearRuntimeErrors,
          handleRuntimeError: handleRuntimeError,
          showCompileError: showCompileError,
          showRuntimeErrors: showRuntimeErrors,
        });

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/theme.js ***!
  \****************************************************************************/
      /***/ (module) => {
        /**
         * @typedef {Object} Theme
         * @property {string[]} reset
         * @property {string} black
         * @property {string} red
         * @property {string} green
         * @property {string} yellow
         * @property {string} blue
         * @property {string} magenta
         * @property {string} cyan
         * @property {string} white
         * @property {string} lightgrey
         * @property {string} darkgrey
         * @property {string} grey
         * @property {string} dimgrey
         */

        /**
         * @type {Theme} theme
         * A collection of colors to be used by the overlay.
         * Partially adopted from Tomorrow Night Bright.
         */
        const theme = {
          reset: ['transparent', 'transparent'],
          black: '000000',
          red: 'D34F56',
          green: 'B9C954',
          yellow: 'E6C452',
          blue: '7CA7D8',
          magenta: 'C299D6',
          cyan: '73BFB1',
          white: 'FFFFFF',
          lightgrey: 'C7C7C7',
          darkgrey: 'A9A9A9',
          grey: '474747',
          dimgrey: '343434',
        };

        module.exports = theme;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/utils.js':
      /*!****************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/utils.js ***!
  \****************************************************************************/
      /***/ (module) => {
        /**
         * Debounce a function to delay invoking until wait (ms) have elapsed since the last invocation.
         * @param {function(...*): *} fn The function to be debounced.
         * @param {number} wait Milliseconds to wait before invoking again.
         * @return {function(...*): void} The debounced function.
         */
        function debounce(fn, wait) {
          /**
           * A cached setTimeout handler.
           * @type {number | undefined}
           */
          let timer;

          /**
           * @returns {void}
           */
          function debounced() {
            const context = this;
            const args = arguments;

            clearTimeout(timer);
            timer = setTimeout(function () {
              return fn.apply(context, args);
            }, wait);
          }

          return debounced;
        }

        /**
         * Prettify a filename from error stacks into the desired format.
         * @param {string} filename The filename to be formatted.
         * @returns {string} The formatted filename.
         */
        function formatFilename(filename) {
          // Strip away protocol and domain for compiled files
          const htmlMatch = /^https?:\/\/(.*)\/(.*)/.exec(filename);
          if (htmlMatch && htmlMatch[1] && htmlMatch[2]) {
            return htmlMatch[2];
          }

          // Strip everything before the first directory for source files
          const sourceMatch = /\/.*?([^./]+[/|\\].*)$/.exec(filename);
          if (sourceMatch && sourceMatch[1]) {
            return sourceMatch[1].replace(/\?$/, '');
          }

          // Unknown filename type, use it as is
          return filename;
        }

        /**
         * Remove all children of an element.
         * @param {HTMLElement} element A valid HTML element.
         * @param {number} [skip] Number of elements to skip removing.
         * @returns {void}
         */
        function removeAllChildren(element, skip) {
          /** @type {Node[]} */
          const childList = Array.prototype.slice.call(
            element.childNodes,
            typeof skip !== 'undefined' ? skip : 0
          );

          for (let i = 0; i < childList.length; i += 1) {
            element.removeChild(childList[i]);
          }
        }

        module.exports = {
          debounce: debounce,
          formatFilename: formatFilename,
          removeAllChildren: removeAllChildren,
        };

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WDSSocket.js':
      /*!********************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/WDSSocket.js ***!
  \********************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        /* global __webpack_dev_server_client__ */

        const getSocketUrlParts = __webpack_require__(
          /*! ./utils/getSocketUrlParts.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getSocketUrlParts.js'
        );
        const getUrlFromParts = __webpack_require__(
          /*! ./utils/getUrlFromParts */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getUrlFromParts.js'
        );
        const getWDSMetadata = __webpack_require__(
          /*! ./utils/getWDSMetadata */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getWDSMetadata.js'
        );

        /**
         * Initializes a socket server for HMR for webpack-dev-server.
         * @param {function(*): void} messageHandler A handler to consume Webpack compilation messages.
         * @param {string} [resourceQuery] Webpack's `__resourceQuery` string.
         * @returns {void}
         */
        function initWDSSocket(messageHandler, resourceQuery) {
          if (typeof __webpack_dev_server_client__ !== 'undefined') {
            let SocketClient = __webpack_dev_server_client__;
            if (typeof __webpack_dev_server_client__.default !== 'undefined') {
              SocketClient = __webpack_dev_server_client__.default;
            }

            const wdsMeta = getWDSMetadata(SocketClient);
            const urlParts = getSocketUrlParts(resourceQuery, wdsMeta);

            const connection = new SocketClient(
              getUrlFromParts(urlParts, wdsMeta)
            );

            connection.onMessage(function onSocketMessage(data) {
              const message = JSON.parse(data);
              messageHandler(message);
            });
          }
        }

        module.exports = { init: initWDSSocket };

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getCurrentScriptSource.js':
      /*!***************************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getCurrentScriptSource.js ***!
  \***************************************************************************************************/
      /***/ (module) => {
        /**
         * Gets the source (i.e. host) of the script currently running.
         * @returns {string}
         */
        function getCurrentScriptSource() {
          // `document.currentScript` is the most accurate way to get the current running script,
          // but is not supported in all browsers (most notably, IE).
          if ('currentScript' in document) {
            // In some cases, `document.currentScript` would be `null` even if the browser supports it:
            // e.g. asynchronous chunks on Firefox.
            // We should not fallback to the list-approach as it would not be safe.
            if (document.currentScript == null) return;
            return document.currentScript.getAttribute('src');
          }
          // Fallback to getting all scripts running in the document,
          // and finding the last one injected.
          else {
            const scriptElementsWithSrc = Array.prototype.filter.call(
              document.scripts || [],
              function (elem) {
                return elem.getAttribute('src');
              }
            );
            if (!scriptElementsWithSrc.length) return;
            const currentScript =
              scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
            return currentScript.getAttribute('src');
          }
        }

        module.exports = getCurrentScriptSource;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getSocketUrlParts.js':
      /*!**********************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getSocketUrlParts.js ***!
  \**********************************************************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        const getCurrentScriptSource = __webpack_require__(
          /*! ./getCurrentScriptSource.js */ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getCurrentScriptSource.js'
        );

        /**
         * @typedef {Object} SocketUrlParts
         * @property {string} [auth]
         * @property {string} hostname
         * @property {string} [protocol]
         * @property {string} pathname
         * @property {string} [port]
         */

        /**
         * Parse current location and Webpack's `__resourceQuery` into parts that can create a valid socket URL.
         * @param {string} [resourceQuery] The Webpack `__resourceQuery` string.
         * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.
         * @returns {SocketUrlParts} The parsed URL parts.
         * @see https://webpack.js.org/api/module-variables/#__resourcequery-webpack-specific
         */
        function getSocketUrlParts(resourceQuery, metadata) {
          if (typeof metadata === 'undefined') {
            metadata = {};
          }

          /** @type {SocketUrlParts} */
          let urlParts = {};

          // If the resource query is available,
          // parse it and ignore everything we received from the script host.
          if (resourceQuery) {
            const parsedQuery = {};
            const searchParams = new URLSearchParams(resourceQuery.slice(1));
            searchParams.forEach(function (value, key) {
              parsedQuery[key] = value;
            });

            urlParts.hostname = parsedQuery.sockHost;
            urlParts.pathname = parsedQuery.sockPath;
            urlParts.port = parsedQuery.sockPort;

            // Make sure the protocol from resource query has a trailing colon
            if (parsedQuery.sockProtocol) {
              urlParts.protocol = parsedQuery.sockProtocol + ':';
            }
          } else {
            const scriptSource = getCurrentScriptSource();

            let url = {};
            try {
              // The placeholder `baseURL` with `window.location.href`,
              // is to allow parsing of path-relative or protocol-relative URLs,
              // and will have no effect if `scriptSource` is a fully valid URL.
              url = new URL(scriptSource, window.location.href);
            } catch (e) {
              // URL parsing failed, do nothing.
              // We will still proceed to see if we can recover using `resourceQuery`
            }

            // Parse authentication credentials in case we need them
            if (url.username) {
              // Since HTTP basic authentication does not allow empty username,
              // we only include password if the username is not empty.
              // Result: <username> or <username>:<password>
              urlParts.auth = url.username;
              if (url.password) {
                urlParts.auth += ':' + url.password;
              }
            }

            // `file://` URLs has `'null'` origin
            if (url.origin !== 'null') {
              urlParts.hostname = url.hostname;
            }

            urlParts.protocol = url.protocol;
            urlParts.port = url.port;
          }

          if (!urlParts.pathname) {
            if (metadata.version === 4) {
              // This is hard-coded in WDS v4
              urlParts.pathname = '/ws';
            } else {
              // This is hard-coded in WDS v3
              urlParts.pathname = '/sockjs-node';
            }
          }

          // Check for IPv4 and IPv6 host addresses that correspond to any/empty.
          // This is important because `hostname` can be empty for some hosts,
          // such as 'about:blank' or 'file://' URLs.
          const isEmptyHostname =
            urlParts.hostname === '0.0.0.0' ||
            urlParts.hostname === '[::]' ||
            !urlParts.hostname;
          // We only re-assign the hostname if it is empty,
          // and if we are using HTTP/HTTPS protocols.
          if (
            isEmptyHostname &&
            window.location.hostname &&
            window.location.protocol.indexOf('http') === 0
          ) {
            urlParts.hostname = window.location.hostname;
          }

          // We only re-assign `protocol` when `protocol` is unavailable,
          // or if `hostname` is available and is empty,
          // since otherwise we risk creating an invalid URL.
          // We also do this when 'https' is used as it mandates the use of secure sockets.
          if (
            !urlParts.protocol ||
            (urlParts.hostname &&
              (isEmptyHostname || window.location.protocol === 'https:'))
          ) {
            urlParts.protocol = window.location.protocol;
          }

          // We only re-assign port when it is not available
          if (!urlParts.port) {
            urlParts.port = window.location.port;
          }

          if (!urlParts.hostname || !urlParts.pathname) {
            throw new Error(
              [
                '[React Refresh] Failed to get an URL for the socket connection.',
                "This usually means that the current executed script doesn't have a `src` attribute set.",
                'You should either specify the socket path parameters under the `devServer` key in your Webpack config, or use the `overlay` option.',
                'https://github.com/pmmmwh/react-refresh-webpack-plugin/blob/main/docs/API.md#overlay',
              ].join('\n')
            );
          }

          return {
            auth: urlParts.auth,
            hostname: urlParts.hostname,
            pathname: urlParts.pathname,
            protocol: urlParts.protocol,
            port: urlParts.port || undefined,
          };
        }

        module.exports = getSocketUrlParts;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getUrlFromParts.js':
      /*!********************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getUrlFromParts.js ***!
  \********************************************************************************************/
      /***/ (module) => {
        /**
         * Create a valid URL from parsed URL parts.
         * @param {import('./getSocketUrlParts').SocketUrlParts} urlParts The parsed URL parts.
         * @param {import('./getWDSMetadata').WDSMetaObj} [metadata] The parsed WDS metadata object.
         * @returns {string} The generated URL.
         */
        function urlFromParts(urlParts, metadata) {
          if (typeof metadata === 'undefined') {
            metadata = {};
          }

          let fullProtocol = 'http:';
          if (urlParts.protocol) {
            fullProtocol = urlParts.protocol;
          }
          if (metadata.enforceWs) {
            fullProtocol = fullProtocol.replace(
              /^(?:http|.+-extension|file)/i,
              'ws'
            );
          }

          fullProtocol = fullProtocol + '//';

          let fullHost = urlParts.hostname;
          if (urlParts.auth) {
            const fullAuth =
              urlParts.auth.split(':').map(encodeURIComponent).join(':') + '@';
            fullHost = fullAuth + fullHost;
          }
          if (urlParts.port) {
            fullHost = fullHost + ':' + urlParts.port;
          }

          const url = new URL(urlParts.pathname, fullProtocol + fullHost);
          return url.href;
        }

        module.exports = urlFromParts;

        /***/
      },

    /***/ './node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getWDSMetadata.js':
      /*!*******************************************************************************************!*\
  !*** ./node_modules/@pmmmwh/react-refresh-webpack-plugin/sockets/utils/getWDSMetadata.js ***!
  \*******************************************************************************************/
      /***/ (module) => {
        /**
         * @typedef {Object} WDSMetaObj
         * @property {boolean} enforceWs
         * @property {number} version
         */

        /**
         * Derives WDS metadata from a compatible socket client.
         * @param {Function} SocketClient A WDS socket client (SockJS/WebSocket).
         * @returns {WDSMetaObj} The parsed WDS metadata object.
         */
        function getWDSMetadata(SocketClient) {
          let enforceWs = false;
          if (
            typeof SocketClient.name !== 'undefined' &&
            SocketClient.name !== null &&
            SocketClient.name.toLowerCase().includes('websocket')
          ) {
            enforceWs = true;
          }

          let version;
          // WDS versions <=3.5.0
          if (!('onMessage' in SocketClient.prototype)) {
            version = 3;
          } else {
            // WDS versions >=3.5.0 <4
            if (
              'getClientPath' in SocketClient ||
              Object.getPrototypeOf(SocketClient).name === 'BaseClient'
            ) {
              version = 3;
            } else {
              version = 4;
            }
          }

          return {
            enforceWs: enforceWs,
            version: version,
          };
        }

        module.exports = getWDSMetadata;

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ var execOptions = {
      id: moduleId,
      module: module,
      factory: __webpack_modules__[moduleId],
      require: __webpack_require__,
    };
    /******/ __webpack_require__.i.forEach(function (handler) {
      handler(execOptions);
    });
    /******/ module = execOptions.module;
    /******/ execOptions.factory.call(
      module.exports,
      module,
      module.exports,
      execOptions.require
    );
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /******/ // expose the module cache
  /******/ __webpack_require__.c = __webpack_module_cache__;
  /******/
  /******/ // expose the module execution interceptor
  /******/ __webpack_require__.i = [];
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/compat get default export */
  /******/ (() => {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = (module) => {
      /******/ var getter =
        module && module.__esModule
          ? /******/ () => module['default']
          : /******/ () => module;
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ (() => {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = (exports, definition) => {
      /******/ for (var key in definition) {
        /******/ if (
          __webpack_require__.o(definition, key) &&
          !__webpack_require__.o(exports, key)
        ) {
          /******/ Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key],
          });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/global */
  /******/ (() => {
    /******/ __webpack_require__.g = (function () {
      /******/ if (typeof globalThis === 'object') return globalThis;
      /******/ try {
        /******/ return this || new Function('return this')();
        /******/
      } catch (e) {
        /******/ if (typeof window === 'object') return window;
        /******/
      }
      /******/
    })();
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) =>
      Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, {
          value: 'Module',
        });
        /******/
      }
      /******/ Object.defineProperty(exports, '__esModule', { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/react refresh */
  /******/ (() => {
    /******/ __webpack_require__.i.push((options) => {
      /******/ const originalFactory = options.factory;
      /******/ options.factory = function (
        moduleObject,
        moduleExports,
        webpackRequire
      ) {
        /******/ __webpack_require__.$Refresh$.setup(options.id);
        /******/ try {
          /******/ originalFactory.call(
            this,
            moduleObject,
            moduleExports,
            webpackRequire
          );
          /******/
        } finally {
          /******/ if (
            typeof Promise !== 'undefined' &&
            moduleObject.exports instanceof Promise
          ) {
            /******/ options.module.exports = options.module.exports.then(
              /******/ (result) => {
                /******/ __webpack_require__.$Refresh$.cleanup(options.id);
                /******/ return result;
                /******/
              },
              /******/ (reason) => {
                /******/ __webpack_require__.$Refresh$.cleanup(options.id);
                /******/ return Promise.reject(reason);
                /******/
              }
              /******/
            );
            /******/
          } else {
            /******/ __webpack_require__.$Refresh$.cleanup(options.id);
            /******/
          }
          /******/
        }
        /******/
      };
      /******/
    });
    /******/
    /******/ __webpack_require__.$Refresh$ = {
      /******/ register: () => undefined,
      /******/ signature: () => (type) => type,
      /******/ runtime: {
        /******/ createSignatureFunctionForTransform: () => (type) => type,
        /******/ register: () => undefined,
        /******/
      },
      /******/ setup: (currentModuleId) => {
        /******/ const prevModuleId = __webpack_require__.$Refresh$.moduleId;
        /******/ const prevRegister = __webpack_require__.$Refresh$.register;
        /******/ const prevSignature = __webpack_require__.$Refresh$.signature;
        /******/ const prevCleanup = __webpack_require__.$Refresh$.cleanup;
        /******/
        /******/ __webpack_require__.$Refresh$.moduleId = currentModuleId;
        /******/
        /******/ __webpack_require__.$Refresh$.register = (type, id) => {
          /******/ const typeId = currentModuleId + ' ' + id;
          /******/ __webpack_require__.$Refresh$.runtime.register(type, typeId);
          /******/
        };
        /******/
        /******/ __webpack_require__.$Refresh$.signature = () =>
          __webpack_require__.$Refresh$.runtime.createSignatureFunctionForTransform();
        /******/
        /******/ __webpack_require__.$Refresh$.cleanup = (cleanupModuleId) => {
          /******/ if (currentModuleId === cleanupModuleId) {
            /******/ __webpack_require__.$Refresh$.moduleId = prevModuleId;
            /******/ __webpack_require__.$Refresh$.register = prevRegister;
            /******/ __webpack_require__.$Refresh$.signature = prevSignature;
            /******/ __webpack_require__.$Refresh$.cleanup = prevCleanup;
            /******/
          }
          /******/
        };
        /******/
      },
      /******/
    };
    /******/
  })();
  /******/
  /************************************************************************/
  /******/
  /******/ // module cache are used so entry inlining is disabled
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ __webpack_require__(
    './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ReactRefreshEntry.js'
  );
  /******/ __webpack_require__(
    './node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ErrorOverlayEntry.js'
  );
  /******/ var __webpack_exports__ = __webpack_require__(
    './src/contentScript.js'
  );
  /******/
  /******/
})();
//# sourceMappingURL=contentScript.js.map
